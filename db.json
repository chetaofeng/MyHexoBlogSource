{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/pub-images/ASPMVC.png","path":"pub-images/ASPMVC.png","modified":1,"renderable":0},{"_id":"source/pub-images/git.png","path":"pub-images/git.png","modified":1,"renderable":0},{"_id":"source/pub-images/redux-middleware1.png","path":"pub-images/redux-middleware1.png","modified":1,"renderable":0},{"_id":"source/pub-images/redux组件配合原理.png","path":"pub-images/redux组件配合原理.png","modified":1,"renderable":0},{"_id":"source/pub-images/redux-middleware2.png","path":"pub-images/redux-middleware2.png","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"source/pub-images/alipay.png","path":"pub-images/alipay.png","modified":1,"renderable":0},{"_id":"source/pub-images/git2.png","path":"pub-images/git2.png","modified":1,"renderable":0},{"_id":"source/pub-images/avatar.png","path":"pub-images/avatar.png","modified":1,"renderable":0},{"_id":"source/pub-images/wechatpay.png","path":"pub-images/wechatpay.png","modified":1,"renderable":0},{"_id":"source/pub-images/插件安装.png","path":"pub-images/插件安装.png","modified":1,"renderable":0},{"_id":"source/pub-images/gradle生命周期.png","path":"pub-images/gradle生命周期.png","modified":1,"renderable":0},{"_id":"source/pub-images/middleware机制示例.png","path":"pub-images/middleware机制示例.png","modified":1,"renderable":0},{"_id":"source/pub-images/react-router-redux示例.png","path":"pub-images/react-router-redux示例.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/pub-images/Groovy元编程.png","path":"pub-images/Groovy元编程.png","modified":1,"renderable":0},{"_id":"source/pub-images/Intelij Groovy.png","path":"pub-images/Intelij Groovy.png","modified":1,"renderable":0},{"_id":"source/pub-images/github设置.png","path":"pub-images/github设置.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"source/pub-images/mysql.png","path":"pub-images/mysql.png","modified":1,"renderable":0},{"_id":"source/pub-images/虚拟机文件结构.png","path":"pub-images/虚拟机文件结构.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"source/pub-images/macOS制作U盘启动.png","path":"pub-images/macOS制作U盘启动.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"source/pub-images/Parallels Tools.png","path":"pub-images/Parallels Tools.png","modified":1,"renderable":0},{"_id":"source/pub-images/Ecma-262.pdf","path":"pub-images/Ecma-262.pdf","modified":1,"renderable":0}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1547136283000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1547136283000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1547136283000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1547136283000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1547136283000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1547136283000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1547136283000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1547136283000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1547136283000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1547136283000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1547136283000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1547136283000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1547136283000},{"_id":"themes/next/_config.yml","hash":"dfe0d0713c406525c470bd1c2ab57607b3d304f8","modified":1547136283000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1547136283000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1547136283000},{"_id":"source/_drafts/utils.md","hash":"fab8a607b5c40a87e6928869a5e6a218d0e50235","modified":1547136282000},{"_id":"source/_posts/2018-10-02-GithubPages.md","hash":"3a9413fd689f1ccc616689b7246c17a3a21b295a","modified":1547136282000},{"_id":"source/_posts/2018-10-05-MySQL安装-Windows.md","hash":"d1dbe1a9177c941273e3460c917176e7e4f90e2a","modified":1547136282000},{"_id":"source/_posts/2018-10-06-ngrok的使用.md","hash":"699fc633f403d013b9878473fb17a331fa1fa7b6","modified":1547136282000},{"_id":"source/_posts/2018-10-06-微信公众平台.md","hash":"4852b0fdc12ba129776ee05b68b66d2b90a4a753","modified":1547136282000},{"_id":"source/_posts/2018-10-06-微信第三方登录.md","hash":"5992d3114868084682d93253591ba941aeb19ed5","modified":1547136282000},{"_id":"source/_posts/2018-10-08-Gitblit搭建git服务器.md","hash":"c171f4c93297a8337bd9af85575682b23992b5a1","modified":1547136282000},{"_id":"source/_posts/2018-10-08-windows-git.md","hash":"d219f3ea730a43e1b4f26fa640cf16e79535640a","modified":1547136282000},{"_id":"source/_posts/2018-10-15-React全家桶.md","hash":"c2c039ce4b5a3a68783f836aa4dd4341bb66d2b4","modified":1547136282000},{"_id":"source/_posts/2018-10-17-C.md","hash":"ad76834abd1189a02135e35e2d306c65bd18f690","modified":1547136282000},{"_id":"source/_posts/2018-10-26-CommonJS规范-AMD-CMD.md","hash":"67175f434b9ee240a99547167bdc5b9858d9bd9d","modified":1547136282000},{"_id":"source/_posts/2018-10-26-Jest.md","hash":"e59fd17ed2270edfb540d646bca5d0ce1aa10ae8","modified":1547136282000},{"_id":"source/_posts/2018-10-26-ECMAScript规范.md","hash":"4cb65a0009bb69dd03219b75c138398749c97220","modified":1547136282000},{"_id":"source/_posts/2018-10-26-React-Router.md","hash":"fb56c84af0f29f03f7a2ec3c7a37d5b49f34cd27","modified":1547136282000},{"_id":"source/_posts/2018-10-26-React入门.md","hash":"c3478d0c550881d5f5e4a8adf14f8462d73b54ef","modified":1547136282000},{"_id":"source/_posts/2018-10-26-React相关需学习.md","hash":"05727539059211304c288ca2bc91cdc4ada05c2c","modified":1547136282000},{"_id":"source/_posts/2018-10-26-react-router-redux.md","hash":"7fb21c30084752735d9202c07e4b2b85432987fa","modified":1547136282000},{"_id":"source/_posts/2018-10-26-middleware.md","hash":"7f6a720ccf333b447356381ec2c0807dab44f028","modified":1547136282000},{"_id":"source/_posts/2018-10-26-Redux入门.md","hash":"026e0605ae4b896a5065b9dd6d19e5b48b8d2b94","modified":1547136282000},{"_id":"source/_posts/2018-11-02-NuGet.md","hash":"a579a2b1df269ceff9d326ce6dad8a6141321706","modified":1547136282000},{"_id":"source/_posts/2018-10-26-redux-thunk.md","hash":"ddf3efaaad38265ae0b4a8ca0cdf49f34c743345","modified":1547136282000},{"_id":"source/_posts/2018-11-26-Kotlin.md","hash":"9de8ed7328768fbd0abe343c2dde9b1427aa4e81","modified":1547136282000},{"_id":"source/_posts/2018-11-26-SpringBoot.md","hash":"e8649a838afc0e3c00ff8f9089ada4b590cdf37b","modified":1547691593000},{"_id":"source/_posts/2018-12-10-MongoDB.md","hash":"67d47713e8318cf2c9aba66cb68fa764c92bb9a7","modified":1547136282000},{"_id":"source/_posts/2018-12-10-MyBatis.md","hash":"500ed2b1d38f76663873de86e82667581091bb0b","modified":1547136282000},{"_id":"source/_posts/2018-12-12-oracle.md","hash":"4a49dbd086cdf7837ec3af4708a1de68c32ceb50","modified":1547136282000},{"_id":"source/_posts/2019-01-02-Java并发编程.md","hash":"f295ecee017b5b4da4f0cd20b95340e3fbe75702","modified":1548147974000},{"_id":"source/_posts/2018-12-19-aa.md","hash":"4d8841d9315cd551e96660d2e91bee8a297118e5","modified":1547144072000},{"_id":"source/about/index.md","hash":"77c550db4e9fc05177d2eb858815269c8f4e3fca","modified":1547136282000},{"_id":"source/archives/index.md","hash":"52e65dbf6fb364d211ec472dc1d9f7155706986e","modified":1547136282000},{"_id":"source/categories/index.md","hash":"fa0b53baa8854e4a3b5ae132fc48aad1cc69bae6","modified":1547136282000},{"_id":"source/pub-images/ASPMVC.png","hash":"28bc7b343fc138cb7905cc6eac1a2924f2c0d61e","modified":1547136282000},{"_id":"source/pub-images/git.png","hash":"3a423ec78672ac41dcd934f171eb8a454fe09fc5","modified":1547142775000},{"_id":"source/pub-images/redux-middleware1.png","hash":"9b3e423778b1b3c542e5d15635e4ceeb8e62976e","modified":1547136283000},{"_id":"source/pub-images/redux组件配合原理.png","hash":"fdf407ce536c442b3cccc71e635126fb6a8c5b20","modified":1547136283000},{"_id":"source/pub-images/redux-middleware2.png","hash":"c63e7d649ece3473643ab848fb5ccd9547264ca4","modified":1547136283000},{"_id":"source/schedule/index.md","hash":"ef0329eaf2379ce901c05e96ef611f6c61b824b4","modified":1547136283000},{"_id":"source/tags/index.md","hash":"47105e0b05b1f723de09c91d9bbddd88d4c5aa70","modified":1547136283000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1547136283000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1547136283000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1547136283000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1547136283000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1547136283000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1547136283000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1547136283000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1547136283000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1547136283000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1547136283000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1547136283000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1547136283000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1547136283000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1547136283000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1547136283000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1547136283000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1547136283000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1547136283000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1547136283000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1547136283000},{"_id":"themes/next/layout/_layout.swig","hash":"6c66478af95827a5aa8230d3e4fce2d65dcff435","modified":1547136283000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1547136283000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1547136283000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1547136283000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1547136283000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1547136283000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1547136283000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1547136283000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1547136283000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1547136283000},{"_id":"themes/next/source/404.html","hash":"b74e38e322d86183d8865cd8dce465058e879e9c","modified":1547136283000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1547136283000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1547136283000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1547136283000},{"_id":"source/pub-images/alipay.png","hash":"6f3de391ca6436179b847c95c5e870f8ec6801d2","modified":1547136283000},{"_id":"source/pub-images/git2.png","hash":"86956ca2c7ca53305d264e0425ea1875da96ba4b","modified":1547142783000},{"_id":"source/pub-images/avatar.png","hash":"a9567e2000759431e70233a7ee6aacf9b75b9f22","modified":1547136283000},{"_id":"source/pub-images/wechatpay.png","hash":"0611ce39c6e865ffaf32d544820183c4de8222a7","modified":1547136283000},{"_id":"source/pub-images/插件安装.png","hash":"63962106b6f03bf5584f3e879735315ea086b2ae","modified":1547134511000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547136283000},{"_id":"source/_posts/2018-10-05-MySQL安装-Windows/屏幕快照 2018-09-30 上午9.06.54.png","hash":"91f2ddef63424a4f13cd66f27f9ba00495c637a8","modified":1547136282000},{"_id":"source/_posts/C#开发/2018-10-05-ASP-NET-MVC使用.md","hash":"82f0ac40e73efa26ada532ff7d7ba73097422684","modified":1547136282000},{"_id":"source/_posts/C#开发/2018-10-05-ASP-NET.md","hash":"7af6b8b82cb411d03113bebda0ba15d48e328fd9","modified":1547136282000},{"_id":"source/_posts/C#开发/2018-10-05-ASP-NET-WebForms使用.md","hash":"e5e6bc0ed66f9261862e47f37e94940a053d73fb","modified":1547136282000},{"_id":"source/_posts/C#开发/2018-10-05-Razor使用.md","hash":"e25ce4783f44837039314703763e5d96132cd2dc","modified":1547136282000},{"_id":"source/_posts/C#开发/2018-10-05-WebPages.md","hash":"3d9f87846f42c644a4a9829a34e74917de166f09","modified":1547136282000},{"_id":"source/_posts/C#开发/2018-10-05-Windows下SVN服务器搭建及VS2015插件安装联动.md","hash":"9092c008d58a56fa734ce4d89f167dff27df0983","modified":1547136282000},{"_id":"source/_posts/C#开发/2018-10-06-ASP-NET-HTML表单元素.md","hash":"e045d5dd6e307e26b7d16c8561b276e5cfb71f8b","modified":1547136282000},{"_id":"source/_posts/C#开发/2018-10-18-docker.md","hash":"61371b13388bb6f8364818444f31849f80ffa068","modified":1547136282000},{"_id":"source/_posts/CI/Jekins.md","hash":"7ca1e08b7434b00549df4b3eb6070b0b111d2300","modified":1548688429000},{"_id":"source/_posts/Linux/01_linux 配置文件启动顺序.md","hash":"5ab79ac37c79c2ff8fe70f1368767a9f255e26a2","modified":1547703516000},{"_id":"source/_posts/android/Gradle3.0自动化项目构建技术.md","hash":"ad5acf6b53ace453717e7c5249d7850a661571f4","modified":1550108491000},{"_id":"source/_posts/android/RxJava.md","hash":"1ed95ae04390e1c4233445cdd62b4ca3d16ed5b9","modified":1548690115000},{"_id":"source/_posts/环境搭建/01_mac系统安装.md","hash":"0d763c9d960c3d80b94c3165e75da5d80aca880a","modified":1550108846000},{"_id":"source/_posts/环境搭建/02_Homebrew.md","hash":"778675eea7f4496fcd7b62c60878cdde333e1f29","modified":1547141198000},{"_id":"source/_posts/环境搭建/05_node安装.md","hash":"0d0b0012f608b4befe18a4c23db6c64ea46ef8d5","modified":1548060753000},{"_id":"source/_posts/环境搭建/03_mac虚拟机安装系统及设置.md","hash":"ffa0514df40eb34d85ae0e66f786716976b961d4","modified":1550108491000},{"_id":"source/_posts/环境搭建/04_git安装配置.md","hash":"6772a2ab914646ed56402abd75479bc6dd82cf9d","modified":1550108491000},{"_id":"source/_posts/环境搭建/06_Java安装.md","hash":"6c6fc4d1ba5ee402f40b7a8a0e1e36eb315d41ea","modified":1550108626000},{"_id":"source/_posts/环境搭建/07_CentOS系统初始设置.md","hash":"e2479d631db9676046f06559a031f5549dbd09f1","modified":1547143978000},{"_id":"source/_posts/环境搭建/08_Ubuntu系统安装后的设置.md","hash":"aaa74f1b7283997f5a440cdefd3e971f0811cbe6","modified":1548646858000},{"_id":"source/_posts/环境搭建/09_JetBrains系列软件安装使用.md","hash":"5d4b05d4a1b3d185274582457435bb47e2d13dc5","modified":1547800947000},{"_id":"source/_posts/环境搭建/10_hexo安装配置.md","hash":"89cda9d986b8824db901a116e7902b987eec9dde","modified":1547136282000},{"_id":"source/_posts/环境搭建/11_VirturalBox安装.md","hash":"7918496e624ed9be5dc205bfdf50eb80f08e6580","modified":1547795337000},{"_id":"source/_posts/环境搭建/11_MySQL安装配置.md","hash":"44fdf3331ef8aed181efa1303c87f4136f5f2ac1","modified":1550108491000},{"_id":"source/pub-images/gradle生命周期.png","hash":"ebc6691a71dba2e37579e0120d93c15d5a98aade","modified":1548235014000},{"_id":"source/pub-images/middleware机制示例.png","hash":"69369b3fc34f51f37f7a939317314e3bacdbb512","modified":1547136283000},{"_id":"source/pub-images/react-router-redux示例.png","hash":"56b6b7753009882f3e1312e35ea5fe6be0ae254f","modified":1547136283000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1547136283000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1547136283000},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"f27712f349a819095cc151b9da509a97dc46776f","modified":1547136283000},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"f29b50d83bcdc9e70696b6a8a8917d8b2ad4be10","modified":1547136283000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1547136283000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1547136283000},{"_id":"themes/next/layout/_macro/post.swig","hash":"9314d69ba2f684f78846edfb24deeefd7209716c","modified":1547136283000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1547136283000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"c35d88feef06e803cbdc7676a03efea3d4816aa4","modified":1547136283000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1547136283000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"33d601be7bc413d070ba00916ae77b7d694e6b3e","modified":1547136283000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"8c4fcf19a26885c41fc8c082daf5af7eb00e53dc","modified":1547136283000},{"_id":"themes/next/layout/_partials/head.swig","hash":"898bcc59c47ec1ccd973f01be3dd0eea55e13ff4","modified":1547136283000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1547136283000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1547136283000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1547136283000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1547136283000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1547136283000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1547136283000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1547136283000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1547136283000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1547136283000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1547136283000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1547136283000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1547136283000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1547136283000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1547136283000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1547136283000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1547136283000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1547136283000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1547136283000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1547136283000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1547136283000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1547136283000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1547136283000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1547136283000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1547136283000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1547136283000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1547136283000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1547136283000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1547136283000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1547136283000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1547136283000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1547136283000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1547136283000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1547136283000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1547136283000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1547136283000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1547136283000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547136283000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1547136283000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547136283000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1547136283000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1547136283000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1547136283000},{"_id":"source/_posts/2018-10-05-MySQL安装-Windows/屏幕快照 2018-09-16 下午4.08.12.png","hash":"0e43632e4b3185d9a67f09833ae0c02eceba3fac","modified":1547136282000},{"_id":"source/pub-images/Groovy元编程.png","hash":"6d792abc1619522d28a282d8f2a9926afb2dfe92","modified":1548212805000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547136283000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547136283000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547136283000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547136283000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547136283000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547136283000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547136283000},{"_id":"source/_posts/2018-10-18-docker/container添加layer.png","hash":"9c62cf1315c5ffaf98f4e83e774830e6eec8c0d0","modified":1547136282000},{"_id":"source/_posts/2018-10-18-docker/docker软件架构.png","hash":"4c7b9de69c05370a29adf8b2b14f769e848bc0e8","modified":1547136282000},{"_id":"source/_posts/2018-10-18-docker/前后端分离项目3高部署图.png","hash":"ebd5680be239690dfd27762ce450f135f0f13116","modified":1547136282000},{"_id":"source/pub-images/Intelij Groovy.png","hash":"afd3d087ba317021e36d7cdfb9fec0c6bcdeaae0","modified":1548135931000},{"_id":"source/pub-images/github设置.png","hash":"d9d43ef9caba8851a2c020f961be4bb5e58e5018","modified":1547142592000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1547136283000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1547136283000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1547136283000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1547136283000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1547136283000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1547136283000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1547136283000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1547136283000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1547136283000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1547136283000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1547136283000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1547136283000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1547136283000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1547136283000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1547136283000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1547136283000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1547136283000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1547136283000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1547136283000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1547136283000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1547136283000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1547136283000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1547136283000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1547136283000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1547136283000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1547136283000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1547136283000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1547136283000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1547136283000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1547136283000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1547136283000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1547136283000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1547136283000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1547136283000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1547136283000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1547136283000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1547136283000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1547136283000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1547136283000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1547136283000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1547136283000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1547136283000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1547136283000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1547136283000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1547136283000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1547136283000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1547136283000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1547136283000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1547136283000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1547136283000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1547136283000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1547136283000},{"_id":"themes/next/source/js/src/love.js","hash":"ca63890ecac4cc408a20e8772a1ffabb532c6996","modified":1547136283000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1547136283000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1547136283000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1547136283000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1547136283000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1547136283000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1547136283000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1547136283000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1547136283000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1547136283000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1547136283000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1547136283000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1547136283000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1547136283000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1547136283000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1547136283000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1547136283000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1547136283000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1547136283000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1547136283000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1547136283000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1547136283000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1547136283000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1547136283000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1547136283000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1547136283000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1547136283000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1547136283000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1547136283000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1547136283000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1547136283000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1547136283000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1547136283000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1547136283000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1547136283000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1547136283000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1547136283000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1547136283000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1547136283000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1547136283000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1547136283000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1547136283000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1547136283000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1547136283000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1547136283000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1547136283000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1547136283000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1547136283000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1547136283000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1547136283000},{"_id":"source/_posts/2018-10-18-docker/renren-fast项目技术说明.png","hash":"cbb9703be450a37aec9ae09a28d4376246a98a1b","modified":1547136282000},{"_id":"source/pub-images/mysql.png","hash":"b171f09d61f96c9fdf42f23be9848cea995aead3","modified":1548060018000},{"_id":"source/pub-images/虚拟机文件结构.png","hash":"168a7e3b379214f0e5bd669351bab77bc19f9884","modified":1547139770000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1547136283000},{"_id":"source/_posts/2018-10-18-docker/docker的client&server.png","hash":"d96d1697f246db846a8ced02feb59062899f4d0a","modified":1547136282000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1547136283000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1547136283000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1547136283000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1547136283000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1547136283000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1547136283000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1547136283000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1547136283000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1547136283000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1547136283000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1547136283000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1547136283000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1547136283000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1547136283000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1547136283000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1547136283000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1547136283000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1547136283000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1547136283000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1547136283000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1547136283000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1547136283000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1547136283000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1547136283000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1547136283000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1547136283000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1547136283000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1547136283000},{"_id":"source/_posts/2018-10-18-docker/DevOps.png","hash":"de14307bbd87c7db9978b275846a9abf14018ba6","modified":1547136282000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1547136283000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1547136283000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1547136283000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1547136283000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1547136283000},{"_id":"source/_posts/2018-10-18-docker/Linux系统目录说明.png","hash":"5b4f118c12f050e0a0b03dd2f2ad505b4b056e49","modified":1547136282000},{"_id":"source/_posts/2018-10-18-docker/基于docker运维整体过程.png","hash":"f334e1fb4d7ee4804e524c3e54f540571cce8746","modified":1547136282000},{"_id":"source/_posts/2018-10-18-docker/前后端分离项目部署图.png","hash":"ff71311d41ae7af689e70037a661cf07ac7ee6c0","modified":1547136282000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"90d78b7270739eaab5b054226b684631a319011a","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"f98b91ae0296e0b10c11286f68c4ad7b71471fbb","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"1a510f995e665b28d85ba4d169b824276c40e4f3","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1547136283000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1547136283000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1547136283000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1547136283000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1547136283000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1547136283000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1547136283000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1547136283000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1547136283000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1547136283000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1547136283000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1547136283000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1547136283000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1547136283000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1547136283000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1547136283000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1547136283000},{"_id":"source/_posts/2018-10-18-docker/docker物理架构.png","hash":"13d23eff12d0d6ae1a06b41699763a5ced2b5042","modified":1547136282000},{"_id":"source/_posts/2018-10-05-Windows下SVN服务器搭建及VS2015插件安装联动/VS2015+SVN环境搭建.docx","hash":"4c4a48bf2a793b1400a36459947a72b138fadb27","modified":1547136282000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1547136283000},{"_id":"source/_posts/2018-10-18-docker/自动化整体过程.png","hash":"922499854267a589be6846bc3d566a60880838d6","modified":1547136282000},{"_id":"source/pub-images/macOS制作U盘启动.png","hash":"9c8c876bc2fe737c53dc158896073dcc4bc0e864","modified":1547127077000},{"_id":"source/_posts/2018-10-18-docker/虚拟机和Doker的区别.png","hash":"bb0981a15c25412524aef1b18a03132e5568d77a","modified":1547136282000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1547136283000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1547136283000},{"_id":"source/pub-images/Parallels Tools.png","hash":"178613a2605e9afd5d3bd6db9b13ad63b18c25d1","modified":1547139347000},{"_id":"source/pub-images/Ecma-262.pdf","hash":"b727e3c03b5272e30f11c36a0cd114eaae91bdb8","modified":1547136283000},{"_id":"public/baidusitemap.xml","hash":"cacf9b5c9cfe16dc0555fb66dba9ef58c4971e4f","modified":1550108936384},{"_id":"public/search.xml","hash":"ebd686c5aba23239b65082fd9e30cee2b147242c","modified":1550108936497},{"_id":"public/sitemap.xml","hash":"09f2b6547f096ed019f177f53152c9d37ae9dc38","modified":1550108936498},{"_id":"public/about/index.html","hash":"8daaa22900a858fc1aee786555e928db729649d5","modified":1550108936534},{"_id":"public/archives/index.html","hash":"0e30c3b6779281d3a58a6e0aeb0094047bc8beb1","modified":1550108936534},{"_id":"public/categories/index.html","hash":"87a8d18ce1832a72945ec39008268e10c0c05fb9","modified":1550108936534},{"_id":"public/schedule/index.html","hash":"771972393452036fa383b5083691f76eb75196f0","modified":1550108936534},{"_id":"public/tags/index.html","hash":"d721b525032be4da96382d299ded668b4d73ec58","modified":1550108936534},{"_id":"public/2019/01/02/Java并发编程/index.html","hash":"87c6295b8698c7bd4780aed9d1570a4dce5920b4","modified":1550108936534},{"_id":"public/2018/12/19/aa/index.html","hash":"26ba2653c4f2cd8640f65ce3fb3762dd0fe425d3","modified":1550108936534},{"_id":"public/2018/12/19/Linux-01-linux-配置文件启动顺序/index.html","hash":"77362b84345cc8ac49a0dba58ed2d3914d83c2ca","modified":1550108936534},{"_id":"public/2018/12/19/环境搭建-01-mac系统安装/index.html","hash":"ef00ad3d98688798499ec166a2e168a4eb9dc87d","modified":1550108936534},{"_id":"public/2018/12/19/环境搭建-02-Homebrew/index.html","hash":"755aa8ca36933b5c980b847470e7bbb3a101f477","modified":1550108936534},{"_id":"public/2018/12/19/环境搭建-05-node安装/index.html","hash":"20a9851aea66eabf808644f0b818f6c98197668f","modified":1550108936534},{"_id":"public/2018/12/19/环境搭建-03-mac虚拟机安装系统及设置/index.html","hash":"7212cfac09302e4a131aba56d5dc85390c8732ee","modified":1550108936535},{"_id":"public/2018/12/19/环境搭建-04-git安装配置/index.html","hash":"3e6613521dba8ca76fca656e815f7df6f56ca6b0","modified":1550108936535},{"_id":"public/2018/12/19/环境搭建-06-Java安装/index.html","hash":"7189d372390fbaebfb3f41e0acb9053f2b91d492","modified":1550108936535},{"_id":"public/2018/12/19/环境搭建-07-CentOS系统初始设置/index.html","hash":"7037fd8035770c10ea4fc737e4ef595ab7dbdf43","modified":1550108936535},{"_id":"public/2018/12/19/环境搭建-08-Ubuntu系统安装后的设置/index.html","hash":"46430559d52addf787cd7778c0bd0a9b9118c272","modified":1550108936535},{"_id":"public/2018/12/19/环境搭建-09-JetBrains系列软件安装使用/index.html","hash":"d0e639b1e366d56d1121a88d1d2a5b17b48bbbc5","modified":1550108936535},{"_id":"public/2018/12/12/oracle/index.html","hash":"661d47b469f00adc35779fa1db966fe3079c6075","modified":1550108936535},{"_id":"public/2018/12/10/MongoDB/index.html","hash":"977c35008685dc09e70380d3060b9f7e9567e145","modified":1550108936535},{"_id":"public/2018/12/10/MyBatis/index.html","hash":"ff9e7deed6bbcde86a3ae14b5a4db41d89418838","modified":1550108936536},{"_id":"public/2018/11/26/Kotlin/index.html","hash":"6d432a99aa49e844e8688fd8605d891a97b287e4","modified":1550108936536},{"_id":"public/2018/11/26/SpringBoot/index.html","hash":"253b6d47316a379edf2ccc3133515c51a2069629","modified":1550108936536},{"_id":"public/2018/11/02/NuGet/index.html","hash":"cbb78d413b968bf99a4757a3ba88db99fd1c129f","modified":1550108936536},{"_id":"public/2018/10/26/ECMAScript规范/index.html","hash":"be3500748fe2fbd1b4b29de43b9ae3a3768945f4","modified":1550108936536},{"_id":"public/2018/10/26/CommonJS规范-AMD-CMD/index.html","hash":"10e5e82f06d271fab0855fb42902b74fe0f5b037","modified":1550108936536},{"_id":"public/2018/10/26/middleware/index.html","hash":"2a605df5720c309cdbe086398efea748953c89bb","modified":1550108936537},{"_id":"public/2018/10/26/redux-thunk/index.html","hash":"20246ca7be4617ab96abfd8407edc38d5661e9d8","modified":1550108936537},{"_id":"public/2018/10/26/React相关需学习/index.html","hash":"ce0c2fc2f1ab44a25bff8720726505caafed78d2","modified":1550108936537},{"_id":"public/2018/10/26/Jest/index.html","hash":"5af9a50a96f5409546ddf668c91c4791c678ae3c","modified":1550108936537},{"_id":"public/2018/10/26/react-router-redux/index.html","hash":"8782a87535d48332f08b8867eed9e699fa8c5747","modified":1550108936537},{"_id":"public/2018/10/26/Redux入门/index.html","hash":"3146a7161bbe507051a3f814fa402b7e74014851","modified":1550108936537},{"_id":"public/2018/10/26/React-Router/index.html","hash":"e41e1c71bff0895b3cb9b278933505071dab2e1d","modified":1550108936538},{"_id":"public/2018/10/26/React入门/index.html","hash":"3fe648a02a3469915cae834ac6982c949b003214","modified":1550108936538},{"_id":"public/2018/10/17/C/index.html","hash":"2f9af564c3d134fdc4ec3e3e01478164c3036d24","modified":1550108936538},{"_id":"public/2018/10/18/C-开发-2018-10-18-docker/index.html","hash":"8fbe8925cc06b19f38eb637a8c1934c5b2792e4b","modified":1550108936538},{"_id":"public/2018/10/15/React全家桶/index.html","hash":"0eedb1fd206813bd943300af3803404a518bbbd4","modified":1550108936538},{"_id":"public/2018/10/08/windows-git/index.html","hash":"bf6f33377948cbfabfc039bdff78f91f642254cf","modified":1550108936538},{"_id":"public/2018/10/08/Gitblit搭建git服务器/index.html","hash":"5a0b6098a0c15203dc2dcdcdef15bf92beafed4c","modified":1550108936538},{"_id":"public/2018/10/06/微信公众平台/index.html","hash":"bc432d637e9a4dc858502342d67fc93d73a06a79","modified":1550108936538},{"_id":"public/2018/10/06/ngrok的使用/index.html","hash":"ea1d63891ea71660e115f12ef485febbfcba8bf4","modified":1550108936538},{"_id":"public/2018/10/06/微信第三方登录/index.html","hash":"33ce7a25a60d4aa0f7ba72ddd64a54d1503a7ea5","modified":1550108936538},{"_id":"public/2018/10/06/C-开发-2018-10-06-ASP-NET-HTML表单元素/index.html","hash":"bfab5f5b55507ea8ce4b4fb69cfe065d1c125131","modified":1550108936538},{"_id":"public/2018/10/05/C-开发-2018-10-05-ASP-NET-WebForms使用/index.html","hash":"0056774a0ba707574757b36f888f1daaf7788007","modified":1550108936539},{"_id":"public/2018/10/05/C-开发-2018-10-05-ASP-NET-MVC使用/index.html","hash":"5f36ea9baa7a2ce0637fa69ea0c3436b802be40d","modified":1550108936539},{"_id":"public/2018/10/05/C-开发-2018-10-05-Razor使用/index.html","hash":"05064ccc4fa84edce8f110faa327b52eed8a2cfe","modified":1550108936539},{"_id":"public/2018/10/05/C-开发-2018-10-05-WebPages/index.html","hash":"f328398998903e34daa0ad69650670d918ec5a46","modified":1550108936539},{"_id":"public/2018/10/05/C-开发-2018-10-05-ASP-NET/index.html","hash":"ca96508ba5392b2cdcbf17ef111c62efa079d498","modified":1550108936539},{"_id":"public/2018/10/05/C-开发-2018-10-05-Windows下SVN服务器搭建及VS2015插件安装联动/index.html","hash":"14508450ad19c9822de8af7b03eea4502dd1336e","modified":1550108936539},{"_id":"public/2018/10/05/MySQL安装-Windows/index.html","hash":"205c28a40aa2fdbe2ac76dac279142c04ac3fa7b","modified":1550108936539},{"_id":"public/2018/10/05/CI-Jekins/index.html","hash":"560220660239f722cf71cf697231de090ef78f32","modified":1550108936539},{"_id":"public/2018/10/04/环境搭建-10-hexo安装配置/index.html","hash":"3fb1368736fc6260915decfd6ec02f0d3bf6176e","modified":1550108936539},{"_id":"public/2018/10/04/环境搭建-11-VirturalBox安装/index.html","hash":"07fe2ffb77564418e35cb7e76cb6223e41243442","modified":1550108936540},{"_id":"public/2018/10/04/环境搭建-11-MySQL安装配置/index.html","hash":"d050832c1c998c12e716e84b7127c4b2b04af662","modified":1550108936540},{"_id":"public/2018/10/02/GithubPages/index.html","hash":"aa56aa49029f3fcb138a702d47e85c667defd1fb","modified":1550108936540},{"_id":"public/2018/10/02/android-RxJava/index.html","hash":"afcd12737bd31ff6ff9e29d2db3139ed23b0e880","modified":1550108936540},{"_id":"public/2018/10/02/android-Gradle3-0自动化项目构建技术/index.html","hash":"740c6ca97a45d6a152e6d1f820302f3147fb68e0","modified":1550108936540},{"_id":"public/archives/page/2/index.html","hash":"e8fcfd1fc7534d055d46e18a84e456690fd85c1e","modified":1550108936540},{"_id":"public/archives/page/3/index.html","hash":"67c4d000dac70107f96564abb07934b9d7690f17","modified":1550108936540},{"_id":"public/archives/page/4/index.html","hash":"d5711197d89fe386cc42a351ad6575316d6135fc","modified":1550108936541},{"_id":"public/archives/page/5/index.html","hash":"6c7edb45ea53f55bf08e58c2f61ccf8891189601","modified":1550108936541},{"_id":"public/archives/page/6/index.html","hash":"61776aa28eeb5cfa33bc4616bde7cece461301aa","modified":1550108936541},{"_id":"public/archives/2018/index.html","hash":"4297bea51c595ab5bcc93228a87f5a58f59c0513","modified":1550108936541},{"_id":"public/archives/2018/page/2/index.html","hash":"333c73e2070d5b61249dc06e79f00e2cd367a220","modified":1550108936541},{"_id":"public/archives/2018/page/3/index.html","hash":"b0042d88db9888a8eca95d125ddffccee0b3c74a","modified":1550108936541},{"_id":"public/archives/2018/page/4/index.html","hash":"d58c5d2162af9493f3e8f5f3a0b2068306252ca5","modified":1550108936541},{"_id":"public/archives/2018/page/5/index.html","hash":"bb2fbe3f5dc9d81744c5852f2f8465ce2afb877b","modified":1550108936541},{"_id":"public/archives/2018/10/index.html","hash":"c74a7f6ffbfa89ae28c9c7102b6cd18665181984","modified":1550108936541},{"_id":"public/archives/2018/10/page/2/index.html","hash":"404b46bb9268039e1a37522f5ceb11574c66b999","modified":1550108936541},{"_id":"public/archives/2018/10/page/3/index.html","hash":"f67cb245fa54469d7bf65a661318ed7dd04b428f","modified":1550108936541},{"_id":"public/archives/2018/10/page/4/index.html","hash":"1cb0685225205a57608dfd3b7bbe7226ece06453","modified":1550108936541},{"_id":"public/archives/2018/11/index.html","hash":"e50a6450e009534b4f62ce8ec7a398442b5b4cdd","modified":1550108936542},{"_id":"public/archives/2018/12/index.html","hash":"a4f9017aa684351d875a96d223a15895cf1e1cf9","modified":1550108936542},{"_id":"public/archives/2018/12/page/2/index.html","hash":"d999939262844ce9d67c817bd2bf16ca842f4ce2","modified":1550108936542},{"_id":"public/archives/2019/index.html","hash":"afa7a069454d4f9bdf727dfe5f41d437e120266e","modified":1550108936542},{"_id":"public/archives/2019/01/index.html","hash":"41efec5f37b0012cc7b0874f03f8e6b5bd680307","modified":1550108936542},{"_id":"public/categories/搭建博客/index.html","hash":"cf8a89e400c45d276fd7ec869908811ea0a305c8","modified":1550108936542},{"_id":"public/categories/数据库/index.html","hash":"a23d4c89a147ce2d09420b0383efe7a117ffd8c6","modified":1550108936542},{"_id":"public/categories/工具/index.html","hash":"b8aefc8df681de4ba0cbde05187e64f4256e380e","modified":1550108936542},{"_id":"public/categories/微信/index.html","hash":"8100f0641ac006309f2fc0e10bef5ac98aeb3d85","modified":1550108936542},{"_id":"public/categories/react/index.html","hash":"467fad3a5a8ab4d77c20525f1e997d676842a83a","modified":1550108936542},{"_id":"public/categories/前端/index.html","hash":"a0a53e5767f7fcc18aba13633355c5dd411f9c33","modified":1550108936542},{"_id":"public/categories/React/index.html","hash":"48b158091ac84ee68c490c988f339e0d3f336a4f","modified":1550108936542},{"_id":"public/categories/C/index.html","hash":"4243e5e90102db92d1ef539a6824585683dfc06b","modified":1550108936543},{"_id":"public/categories/Kotlin/index.html","hash":"2e514a65d7b0f182c4fb38394f88efcc3e63bfc2","modified":1550108936543},{"_id":"public/categories/Spring/index.html","hash":"849d1a5b94804622b7430bf76fe783d4da3a30b4","modified":1550108936543},{"_id":"public/categories/Java/index.html","hash":"ac2f9c6df87ed00940ab89581a06eda2547fa290","modified":1550108936543},{"_id":"public/categories/环境搭建/index.html","hash":"30acb945143ac91b54121eef491193cafb8beca4","modified":1550108936543},{"_id":"public/categories/docker/index.html","hash":"47eefef7e9d71bf85a9da05c8ee2de43c6a00d71","modified":1550108936543},{"_id":"public/index.html","hash":"b58c97f393c380a2a2eca75dc3af37de077c1e03","modified":1550108936543},{"_id":"public/page/2/index.html","hash":"413cd7148bd768517df1e19ab983fd288e8eb6e8","modified":1550108936543},{"_id":"public/page/3/index.html","hash":"86a74de4d983e097f6eb1a6093526a66aa940fe9","modified":1550108936543},{"_id":"public/page/4/index.html","hash":"904ec31123ef8c273db75245929d7bd614d4e7b7","modified":1550108936543},{"_id":"public/page/5/index.html","hash":"8642caa4f10c15226b50263b68a26eb9e1c213d0","modified":1550108936543},{"_id":"public/page/6/index.html","hash":"14effd70762ff11577dcad950bdfacdfd36c521d","modified":1550108936544},{"_id":"public/tags/git/index.html","hash":"ff65a89ef200d35834b3236c09664a82d95de22e","modified":1550108936544},{"_id":"public/tags/github-pages/index.html","hash":"beac45bbb37d8aeee3e9645699ae53943d20a4a5","modified":1550108936544},{"_id":"public/tags/MySQL/index.html","hash":"133d26ae535b3fab83472c343a0d5bb12d4bbada","modified":1550108936544},{"_id":"public/tags/数据库/index.html","hash":"14d99d2391154459cc2e685849dedd5d4ebfb1fd","modified":1550108936544},{"_id":"public/tags/ngrok/index.html","hash":"c66ee0389fec42a1a76885aecb94de0330972770","modified":1550108936544},{"_id":"public/tags/网络工具/index.html","hash":"939a0817b0c900a41fe28226eb6a8a73fc809dd6","modified":1550108936544},{"_id":"public/tags/微信/index.html","hash":"b0acb79e92eeb14d408f3f34aa21c654a6d078ed","modified":1550108936545},{"_id":"public/tags/微信公众平台/index.html","hash":"4db9b257a666a32556af4e5f6abdc88a3b5363ae","modified":1550108936545},{"_id":"public/tags/windows/index.html","hash":"e08a22f678ae5cec8c522e76afafd1db438023f1","modified":1550108936545},{"_id":"public/tags/react/index.html","hash":"079efeabb1dfc91344a9252aaaf5ec1046d58e53","modified":1550108936545},{"_id":"public/tags/Antd/index.html","hash":"ac87a4b01eb848326212d3e269fc9453a566ce01","modified":1550108936545},{"_id":"public/tags/前端规范/index.html","hash":"b58cd71a0356efe7279d532fae506840f2054cf4","modified":1550108936545},{"_id":"public/tags/React/index.html","hash":"58ad6219dde14ab54868722b12635e7da398aea4","modified":1550108936545},{"_id":"public/tags/React组件库/index.html","hash":"f307be73bcd4791d578efdb58089ffe54dffcad7","modified":1550108936545},{"_id":"public/tags/React-Router/index.html","hash":"efdf4314b6686c7da19b5d7c6964cab9953321bf","modified":1550108936545},{"_id":"public/tags/React组件/index.html","hash":"6d627844f444863ff0dc578bc4c3ac41372aac85","modified":1550108936545},{"_id":"public/tags/C/index.html","hash":"2368f646dd16c0d4d6fefa8e0aacb89d0e740f24","modified":1550108936545},{"_id":"public/tags/redux组件库/index.html","hash":"3047db3076f72603c8f99704a9eee35eb5f37af1","modified":1550108936545},{"_id":"public/tags/Kotlin入门/index.html","hash":"6a76af3d0ee5b5ba49f88446d2496cb5e115f113","modified":1550108936545},{"_id":"public/tags/Spring/index.html","hash":"a2b5780bca656e86cd847a554b099b44a74c4d5f","modified":1550108936546},{"_id":"public/tags/Spring-Boot/index.html","hash":"1c07e80609edc1c8405e054bed291ed3923fcece","modified":1550108936546},{"_id":"public/tags/JavaWeb/index.html","hash":"87f2aa60042132f6a8eb613b45fbc6cc2ccba5d6","modified":1550108936546},{"_id":"public/tags/MyBatis/index.html","hash":"2642430b742f51a534c285d36e556f599e8bf0d0","modified":1550108936546},{"_id":"public/tags/Java/index.html","hash":"b502fcedf109f2f26b54ef3d6f8377617934c324","modified":1550108936546},{"_id":"public/tags/Redux/index.html","hash":"e873daa67b3ff75d7615f5bbd175f1338b73db9c","modified":1550108936546},{"_id":"public/tags/Oracle/index.html","hash":"4bace430de9116b191aa53ef29f2f34a4ff3d45c","modified":1550108936546},{"_id":"public/tags/MongoDB/index.html","hash":"a8e0703fdbd85dec735cfac0dab8b82f78146e45","modified":1550108936546},{"_id":"public/tags/ASP-NET/index.html","hash":"0928ab364c0fd3588d35214f1487c9f951cfd6bc","modified":1550108936546},{"_id":"public/tags/MVC/index.html","hash":"c773345e7af09c932e0d05ec459206b8d30715bb","modified":1550108936546},{"_id":"public/tags/WebForms/index.html","hash":"d684453ae013f55412167e16571dbf1eff241d70","modified":1550108936546},{"_id":"public/tags/Razor/index.html","hash":"ea8be007d9a1151d1881a0cd1942702b7eeeb7fd","modified":1550108936546},{"_id":"public/tags/WebPages/index.html","hash":"a5fa20953d3aed24146434dbe6c66b13b7e6452f","modified":1550108936546},{"_id":"public/tags/工具/index.html","hash":"119bf96ebf0449f79ab3fc80e0ac368221e34276","modified":1550108936546},{"_id":"public/tags/版本控制/index.html","hash":"88bfd7d9eb884181bf9964941a7674612a24326b","modified":1550108936546},{"_id":"public/tags/HTML表单元素/index.html","hash":"e6de058251dea02cbf936c499790667f2e62080b","modified":1550108936546},{"_id":"public/tags/环境搭建/index.html","hash":"1a0acaaf1d895955b425a6cda22d29c4b5880ba1","modified":1550108936547},{"_id":"public/tags/环境搭建/page/2/index.html","hash":"ddcc728a195df2f1ea0a3ed9fa20d43e5382a4da","modified":1550108936547},{"_id":"public/tags/持续集成/index.html","hash":"6bbc29684a728b7435d79daa1c9c1e18bf676b23","modified":1550108936547},{"_id":"public/tags/andrioid/index.html","hash":"bece887049188a5a5ccfa739fb5903f34789159a","modified":1550108936547},{"_id":"public/tags/RxJava/index.html","hash":"ca4bb8fbef9bfea7123352f0646f50449d2e5dde","modified":1550108936547},{"_id":"public/tags/node/index.html","hash":"0d290c92fb264dc1ddd7fa058766b626a50fb435","modified":1550108936547},{"_id":"public/tags/hexo/index.html","hash":"d4a34a0b5c350145a0d5184487866f1601c4bf73","modified":1550108936547},{"_id":"public/tags/docker/index.html","hash":"c511bbbbea6c77192c960af067f3faf83b606f6e","modified":1550108936547},{"_id":"public/pub-images/git.png","hash":"3a423ec78672ac41dcd934f171eb8a454fe09fc5","modified":1550108936566},{"_id":"public/pub-images/redux组件配合原理.png","hash":"fdf407ce536c442b3cccc71e635126fb6a8c5b20","modified":1550108936566},{"_id":"public/pub-images/redux-middleware1.png","hash":"9b3e423778b1b3c542e5d15635e4ceeb8e62976e","modified":1550108936566},{"_id":"public/pub-images/redux-middleware2.png","hash":"c63e7d649ece3473643ab848fb5ccd9547264ca4","modified":1550108936566},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1550108936566},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1550108936566},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1550108936566},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1550108936566},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1550108936566},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1550108936566},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1550108936566},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1550108936566},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1550108936566},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1550108936566},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1550108936566},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1550108936567},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1550108936567},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1550108936567},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1550108936567},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1550108936567},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1550108936567},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1550108936567},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1550108936567},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1550108936567},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1550108936567},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1550108936567},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1550108936567},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1550108936567},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1550108936567},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1550108936567},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1550108936567},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1550108936567},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1550108936567},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1550108936567},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1550108936568},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1550108936568},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1550108936568},{"_id":"public/2018/10/05/MySQL安装-Windows/屏幕快照 2018-09-30 上午9.06.54.png","hash":"91f2ddef63424a4f13cd66f27f9ba00495c637a8","modified":1550108936568},{"_id":"public/pub-images/ASPMVC.png","hash":"28bc7b343fc138cb7905cc6eac1a2924f2c0d61e","modified":1550108937358},{"_id":"public/pub-images/alipay.png","hash":"6f3de391ca6436179b847c95c5e870f8ec6801d2","modified":1550108937359},{"_id":"public/pub-images/git2.png","hash":"86956ca2c7ca53305d264e0425ea1875da96ba4b","modified":1550108937361},{"_id":"public/pub-images/wechatpay.png","hash":"0611ce39c6e865ffaf32d544820183c4de8222a7","modified":1550108937361},{"_id":"public/pub-images/avatar.png","hash":"a9567e2000759431e70233a7ee6aacf9b75b9f22","modified":1550108937361},{"_id":"public/pub-images/插件安装.png","hash":"63962106b6f03bf5584f3e879735315ea086b2ae","modified":1550108937361},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1550108937361},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1550108937361},{"_id":"public/2018/10/05/MySQL安装-Windows/屏幕快照 2018-09-16 下午4.08.12.png","hash":"0e43632e4b3185d9a67f09833ae0c02eceba3fac","modified":1550108937362},{"_id":"public/404.html","hash":"b74e38e322d86183d8865cd8dce465058e879e9c","modified":1550108937382},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1550108937383},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1550108937384},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1550108937384},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1550108937384},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1550108937384},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1550108937385},{"_id":"public/js/src/love.js","hash":"ca63890ecac4cc408a20e8772a1ffabb532c6996","modified":1550108937385},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1550108937385},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1550108937385},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1550108937385},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1550108937385},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1550108937385},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1550108937385},{"_id":"public/lib/fastclick/README.html","hash":"2a1eeda5db36785ac126a30516dcd7aa31aa6f56","modified":1550108937391},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1550108937393},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1550108937393},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"e052945954a31250c7dcefa88a0dd00aa0a7bdfa","modified":1550108937393},{"_id":"public/lib/jquery_lazyload/README.html","hash":"5a29ff39d4e456e314db5e497fbeaf6824272209","modified":1550108937394},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1550108937394},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1550108937394},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1550108937394},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1550108937394},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1550108937394},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1550108937394},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1550108937394},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1550108937394},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1550108937395},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1550108937395},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1550108937395},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1550108937395},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1550108937395},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1550108937395},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1550108937395},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1550108937395},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1550108937395},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1550108937395},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1550108937395},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1550108937395},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1550108937395},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1550108937395},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1550108937395},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1550108937396},{"_id":"public/css/main.css","hash":"8acd1f83e14255a6cf394248599532268cc5e409","modified":1550108937396},{"_id":"public/pub-images/react-router-redux示例.png","hash":"56b6b7753009882f3e1312e35ea5fe6be0ae254f","modified":1550108937396},{"_id":"public/pub-images/gradle生命周期.png","hash":"ebc6691a71dba2e37579e0120d93c15d5a98aade","modified":1550108937396},{"_id":"public/pub-images/middleware机制示例.png","hash":"69369b3fc34f51f37f7a939317314e3bacdbb512","modified":1550108937396},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1550108937396},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1550108937397},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1550108937397},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1550108937412},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1550108937412},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1550108937413},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1550108937413},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1550108937413},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1550108937413},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1550108937413},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1550108937413},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1550108937427},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1550108937427},{"_id":"public/pub-images/Groovy元编程.png","hash":"6d792abc1619522d28a282d8f2a9926afb2dfe92","modified":1550108937428},{"_id":"public/pub-images/github设置.png","hash":"d9d43ef9caba8851a2c020f961be4bb5e58e5018","modified":1550108937428},{"_id":"public/pub-images/mysql.png","hash":"b171f09d61f96c9fdf42f23be9848cea995aead3","modified":1550108937428},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1550108937452},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1550108937453},{"_id":"public/pub-images/虚拟机文件结构.png","hash":"168a7e3b379214f0e5bd669351bab77bc19f9884","modified":1550108937455},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1550108937471},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1550108937474},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1550108937476},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1550108937476},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1550108937477},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1550108937477},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1550108937477},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1550108937523},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1550108937524},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1550108937525},{"_id":"public/pub-images/Intelij Groovy.png","hash":"afd3d087ba317021e36d7cdfb9fec0c6bcdeaae0","modified":1550108937525},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1550108937538},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1550108937538},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1550108937568},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1550108937573},{"_id":"public/pub-images/macOS制作U盘启动.png","hash":"9c8c876bc2fe737c53dc158896073dcc4bc0e864","modified":1550108937573},{"_id":"public/pub-images/Parallels Tools.png","hash":"178613a2605e9afd5d3bd6db9b13ad63b18c25d1","modified":1550108937583},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1550108937588},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1550108937614},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1550108937622},{"_id":"public/pub-images/Ecma-262.pdf","hash":"b727e3c03b5272e30f11c36a0cd114eaae91bdb8","modified":1550108937679}],"Category":[{"name":"搭建博客","_id":"cjs3ytrp80007ck8h7wmoxclv"},{"name":"数据库","_id":"cjs3ytrpf000dck8h1g9tnzfu"},{"name":"工具","_id":"cjs3ytrpk000ick8hm9x1qrop"},{"name":"微信","_id":"cjs3ytrpp000ock8hvifxo71m"},{"name":"react","_id":"cjs3ytrq80015ck8hdss3w35x"},{"name":"前端","_id":"cjs3ytrqb001cck8hhk7ov7vo"},{"name":"React","_id":"cjs3ytrqd001jck8h30fo2u82"},{"name":"C#","_id":"cjs3ytrqk0029ck8h5owwfn6u"},{"name":"Kotlin","_id":"cjs3ytrqm002gck8hdywt9rq8"},{"name":"Spring","_id":"cjs3ytrqn002mck8ho65uuwwr"},{"name":"Java","_id":"cjs3ytrqn002pck8hreq2ukbl"},{"name":"环境搭建","_id":"cjs3ytry2004vck8h8yp6tv38"},{"name":"docker","_id":"cjs3yts0v006qck8hz7h6jmqw"}],"Data":[],"Page":[{"title":"关于","date":"2018-03-14T17:58:34.000Z","_content":"关于我","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-03-15 01:58:34\n---\n关于我","updated":"2019-01-10T16:04:42.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjs3ytroz0001ck8hyj19dwcr","content":"<p>关于我</p>\n","site":{"data":{}},"excerpt":"","more":"<p>关于我</p>\n"},{"title":"归档","date":"2018-03-14T17:59:39.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: 归档\ndate: 2018-03-15 01:59:39\n---\n","updated":"2019-01-10T16:04:42.000Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cjs3ytrp20003ck8hef77h7wn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-03-14T17:58:22.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-03-15 01:58:22\ntype: \"categories\"\n---\n","updated":"2019-01-10T16:04:42.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjs3ytrp70006ck8hng090yk6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2018-03-14T18:09:19.000Z","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2018-03-15 02:09:19\n---\n","updated":"2019-01-10T16:04:43.000Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"cjs3ytrvq003lck8hlnex9qxe","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-03-14T17:57:39.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-03-15 01:57:39\ntype: \"tags\"\n---\n","updated":"2019-01-10T16:04:43.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjs3ytrvt003nck8hnn6vwevd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"常用编写技巧记录","copyright":true,"comments":1,"toc":true,"password":null,"_content":"\n# 说明","source":"_drafts/utils.md","raw":"---\ntitle: 常用编写技巧记录\ntags:\n  - 编写工具 \ncopyright: true\ncomments: true\ntoc: true\ncategories:\npassword:\n---\n\n# 说明","slug":"utils","published":0,"date":"2019-01-10T16:04:42.000Z","updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrou0000ck8h3507kn69","content":"<h1 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\"></a> 说明</h1>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\"></a> 说明</h1>\n"},{"title":"使用Github Pages进行个人博客搭建","copyright":true,"comments":1,"toc":true,"date":"2018-10-02T14:10:23.000Z","password":null,"_content":"\n# Github Pages介绍\n\n官网：https://pages.github.com/\nGitHub Pages 是一个静态网站托管服务，使用github.io域名和HTTPS来提供服务。一个github账号只能有一个Github Pages网站。\nGitHub Pages 网站是在网络上公开使用的，即使他们的库是私有的。如果你敏感的数据在你的Page库中，你可能需要在发布之前删除它。\n\n# Github Pages创建\n1. 申请邮箱\n2. 申请github账号\n~~~\n前两步是为了准备没有进行Github Pages服务开通的github账号，如果已经有，可以跳过\n~~~\n3. 创建repository。和普通创建一样，但是名称要以\".github.io\"结尾，如：test.github.io，这样创建完之后才在这个项目的settings中有github pages选项\n4. 访问：https://test.github.io/,即可以看见Github Pages网站\n\n# Github Pages网站内容编辑\n1. 创建源码repository，用来存放Github Pages网站源码\n2. 此处选用Hexo作为网站模版，在本地初始化hexo项目，参考：\n3. 在hexo中安装配置hexo-deployer-git进行github项目管理\n4. 下载【1】中github代码到本地，本人是通过webstorm进行编辑操作的\n5. 拷贝【2】中代码到【1】中的repository中，在本地运行查看hexo效果\n6. 编辑.gitignore文件,忽略操作系统文件、编辑器临时文件、node临时文件等，提交\n7. 提交repository到github\n8. hexo部署本地代码到Github Pages，查看效果\n\n\n","source":"_posts/2018-10-02-GithubPages.md","raw":"---\ntitle: 使用Github Pages进行个人博客搭建\ntags: \n  - git\n  - github pages\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-02 22:10:23\ncategories: 搭建博客\npassword:\n---\n\n# Github Pages介绍\n\n官网：https://pages.github.com/\nGitHub Pages 是一个静态网站托管服务，使用github.io域名和HTTPS来提供服务。一个github账号只能有一个Github Pages网站。\nGitHub Pages 网站是在网络上公开使用的，即使他们的库是私有的。如果你敏感的数据在你的Page库中，你可能需要在发布之前删除它。\n\n# Github Pages创建\n1. 申请邮箱\n2. 申请github账号\n~~~\n前两步是为了准备没有进行Github Pages服务开通的github账号，如果已经有，可以跳过\n~~~\n3. 创建repository。和普通创建一样，但是名称要以\".github.io\"结尾，如：test.github.io，这样创建完之后才在这个项目的settings中有github pages选项\n4. 访问：https://test.github.io/,即可以看见Github Pages网站\n\n# Github Pages网站内容编辑\n1. 创建源码repository，用来存放Github Pages网站源码\n2. 此处选用Hexo作为网站模版，在本地初始化hexo项目，参考：\n3. 在hexo中安装配置hexo-deployer-git进行github项目管理\n4. 下载【1】中github代码到本地，本人是通过webstorm进行编辑操作的\n5. 拷贝【2】中代码到【1】中的repository中，在本地运行查看hexo效果\n6. 编辑.gitignore文件,忽略操作系统文件、编辑器临时文件、node临时文件等，提交\n7. 提交repository到github\n8. hexo部署本地代码到Github Pages，查看效果\n\n\n","slug":"GithubPages","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrp00002ck8h7f0raj9g","content":"<h1 id=\"github-pages介绍\"><a class=\"markdownIt-Anchor\" href=\"#github-pages介绍\"></a> Github Pages介绍</h1>\n<p>官网：<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">https://pages.github.com/</a><br>\nGitHub Pages 是一个静态网站托管服务，使用github.io域名和HTTPS来提供服务。一个github账号只能有一个Github Pages网站。<br>\nGitHub Pages 网站是在网络上公开使用的，即使他们的库是私有的。如果你敏感的数据在你的Page库中，你可能需要在发布之前删除它。</p>\n<h1 id=\"github-pages创建\"><a class=\"markdownIt-Anchor\" href=\"#github-pages创建\"></a> Github Pages创建</h1>\n<ol>\n<li>申请邮箱</li>\n<li>申请github账号</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前两步是为了准备没有进行Github Pages服务开通的github账号，如果已经有，可以跳过</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>创建repository。和普通创建一样，但是名称要以&quot;.github.io&quot;结尾，如：<a href=\"http://test.github.io\" target=\"_blank\" rel=\"noopener\">test.github.io</a>，这样创建完之后才在这个项目的settings中有github pages选项</li>\n<li>访问：<a href=\"https://test.github.io/,%E5%8D%B3%E5%8F%AF%E4%BB%A5%E7%9C%8B%E8%A7%81Github\" target=\"_blank\" rel=\"noopener\">https://test.github.io/,即可以看见Github</a> Pages网站</li>\n</ol>\n<h1 id=\"github-pages网站内容编辑\"><a class=\"markdownIt-Anchor\" href=\"#github-pages网站内容编辑\"></a> Github Pages网站内容编辑</h1>\n<ol>\n<li>创建源码repository，用来存放Github Pages网站源码</li>\n<li>此处选用Hexo作为网站模版，在本地初始化hexo项目，参考：</li>\n<li>在hexo中安装配置hexo-deployer-git进行github项目管理</li>\n<li>下载【1】中github代码到本地，本人是通过webstorm进行编辑操作的</li>\n<li>拷贝【2】中代码到【1】中的repository中，在本地运行查看hexo效果</li>\n<li>编辑.gitignore文件,忽略操作系统文件、编辑器临时文件、node临时文件等，提交</li>\n<li>提交repository到github</li>\n<li>hexo部署本地代码到Github Pages，查看效果</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"github-pages介绍\"><a class=\"markdownIt-Anchor\" href=\"#github-pages介绍\"></a> Github Pages介绍</h1>\n<p>官网：<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">https://pages.github.com/</a><br>\nGitHub Pages 是一个静态网站托管服务，使用github.io域名和HTTPS来提供服务。一个github账号只能有一个Github Pages网站。<br>\nGitHub Pages 网站是在网络上公开使用的，即使他们的库是私有的。如果你敏感的数据在你的Page库中，你可能需要在发布之前删除它。</p>\n<h1 id=\"github-pages创建\"><a class=\"markdownIt-Anchor\" href=\"#github-pages创建\"></a> Github Pages创建</h1>\n<ol>\n<li>申请邮箱</li>\n<li>申请github账号</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前两步是为了准备没有进行Github Pages服务开通的github账号，如果已经有，可以跳过</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>创建repository。和普通创建一样，但是名称要以&quot;.github.io&quot;结尾，如：<a href=\"http://test.github.io\" target=\"_blank\" rel=\"noopener\">test.github.io</a>，这样创建完之后才在这个项目的settings中有github pages选项</li>\n<li>访问：<a href=\"https://test.github.io/,%E5%8D%B3%E5%8F%AF%E4%BB%A5%E7%9C%8B%E8%A7%81Github\" target=\"_blank\" rel=\"noopener\">https://test.github.io/,即可以看见Github</a> Pages网站</li>\n</ol>\n<h1 id=\"github-pages网站内容编辑\"><a class=\"markdownIt-Anchor\" href=\"#github-pages网站内容编辑\"></a> Github Pages网站内容编辑</h1>\n<ol>\n<li>创建源码repository，用来存放Github Pages网站源码</li>\n<li>此处选用Hexo作为网站模版，在本地初始化hexo项目，参考：</li>\n<li>在hexo中安装配置hexo-deployer-git进行github项目管理</li>\n<li>下载【1】中github代码到本地，本人是通过webstorm进行编辑操作的</li>\n<li>拷贝【2】中代码到【1】中的repository中，在本地运行查看hexo效果</li>\n<li>编辑.gitignore文件,忽略操作系统文件、编辑器临时文件、node临时文件等，提交</li>\n<li>提交repository到github</li>\n<li>hexo部署本地代码到Github Pages，查看效果</li>\n</ol>\n"},{"title":"MySQL安装_Windows","copyright":true,"comments":1,"toc":true,"date":"2018-10-05T02:04:03.000Z","password":null,"_content":"\n\n下载页面：https://dev.mysql.com/downloads/mysql/\n\n* 选择\"Microsoft Windows\",下载免安装版的zip文件;\n* 将zip文件解压到本地\n* 新建一个配置文件（my.ini）用于配置字符集、端口等信息，用以覆盖原始的配置文件（my-default.ini），当然也可以修改这个默认的配置文件\n\n~~~\n[mysql]\n # 设置mysql客户端默认字符集\n default-character-set=utf8 \n [mysqld]\n #设置3306端口\n port = 3306 \n # 设置mysql的安装目录\n\n basedir=D:\\\\softwares\\\\mysql-5.7.14-winx64\n # 设置mysql数据库的数据的存放目录\n datadir=D:\\\\softwares\\\\mysql-5.7.14-winx64\\\\data\n\n # 允许最大连接数\n max_connections=200\n # 服务端使用的字符集默认为UTF8\n character-set-server=utf8\n # 创建新表时将使用的默认存储引擎\n default-storage-engine=INNODB\n~~~\n\n\n输入cmd，以管理员身份运行控制台\n\n\n\nS C:\\Windows\\system32> cd\nS C:\\Windows\\system32> cd ..\nS C:\\Windows> cd ..\nS C:\\> cd .\\mysql-8.0.12-winx64\\\nS C:\\mysql-8.0.12-winx64> cd .\\bin\\\n\n\n\nS C:\\mysql-8.0.12-winx64\\bin> .\\mysqld.exe -install\nervice successfully installed.\nS C:\\mysql-8.0.12-winx64\\bin> net start mysql\nySQL 服务正在启动 .\nySQL 服务无法启动。\n\n服务没有报告任何错误。\n\n请键入 NET HELPMSG 3534 以获得更多的帮助。\n\nS C:\\mysql-8.0.12-winx64\\bin> .\\mysqld.exe -remove\nervice successfully removed.\nS C:\\mysql-8.0.12-winx64\\bin> .\\mysqld.exe --initialize\nS C:\\mysql-8.0.12-winx64\\bin> .\\mysqld.exe -install\nervice successfully installed.\nS C:\\mysql-8.0.12-winx64\\bin> net start mysql\nySQL 服务正在启动 .\nySQL 服务已经启动成功。\n\n\nS C:\\mysql-8.0.12-winx64\\bin> .\\mysqladmin.exe -u root password \"axn7Og=ve;+2\"\nysqladmin: connect to server at 'localhost' failed\n\nalter user user() identified by \"root\";\nalter user user() identified by \"新密码\";\n\nmysql -u root -p \n\nysql> use mysql\natabase changed\nysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';\nuery OK, 0 rows affected (0.04 sec)\n\nysql> flush privileges;\nuery OK, 0 rows affected (0.00 sec)\n\n \nuse mysql\n\n4.ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';\n\n5.flush privileges;\n\n6.可以用navicat登陆了\n\n\nhttps://www.cnblogs.com/anstoner/p/6414440.html\n\nnet stop mysql\n\nhttps://blog.csdn.net/czhilovely/article/details/80360146\n\nhttps://blog.csdn.net/qq_42923798/article/details/81540122\n\nhttps://blog.csdn.net/u012561176/article/details/78557320","source":"_posts/2018-10-05-MySQL安装-Windows.md","raw":"---\ntitle: MySQL安装_Windows\ntags:\n  - MySQL\n  - 数据库\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-05 10:04:03\ncategories: 数据库\npassword:\n---\n\n\n下载页面：https://dev.mysql.com/downloads/mysql/\n\n* 选择\"Microsoft Windows\",下载免安装版的zip文件;\n* 将zip文件解压到本地\n* 新建一个配置文件（my.ini）用于配置字符集、端口等信息，用以覆盖原始的配置文件（my-default.ini），当然也可以修改这个默认的配置文件\n\n~~~\n[mysql]\n # 设置mysql客户端默认字符集\n default-character-set=utf8 \n [mysqld]\n #设置3306端口\n port = 3306 \n # 设置mysql的安装目录\n\n basedir=D:\\\\softwares\\\\mysql-5.7.14-winx64\n # 设置mysql数据库的数据的存放目录\n datadir=D:\\\\softwares\\\\mysql-5.7.14-winx64\\\\data\n\n # 允许最大连接数\n max_connections=200\n # 服务端使用的字符集默认为UTF8\n character-set-server=utf8\n # 创建新表时将使用的默认存储引擎\n default-storage-engine=INNODB\n~~~\n\n\n输入cmd，以管理员身份运行控制台\n\n\n\nS C:\\Windows\\system32> cd\nS C:\\Windows\\system32> cd ..\nS C:\\Windows> cd ..\nS C:\\> cd .\\mysql-8.0.12-winx64\\\nS C:\\mysql-8.0.12-winx64> cd .\\bin\\\n\n\n\nS C:\\mysql-8.0.12-winx64\\bin> .\\mysqld.exe -install\nervice successfully installed.\nS C:\\mysql-8.0.12-winx64\\bin> net start mysql\nySQL 服务正在启动 .\nySQL 服务无法启动。\n\n服务没有报告任何错误。\n\n请键入 NET HELPMSG 3534 以获得更多的帮助。\n\nS C:\\mysql-8.0.12-winx64\\bin> .\\mysqld.exe -remove\nervice successfully removed.\nS C:\\mysql-8.0.12-winx64\\bin> .\\mysqld.exe --initialize\nS C:\\mysql-8.0.12-winx64\\bin> .\\mysqld.exe -install\nervice successfully installed.\nS C:\\mysql-8.0.12-winx64\\bin> net start mysql\nySQL 服务正在启动 .\nySQL 服务已经启动成功。\n\n\nS C:\\mysql-8.0.12-winx64\\bin> .\\mysqladmin.exe -u root password \"axn7Og=ve;+2\"\nysqladmin: connect to server at 'localhost' failed\n\nalter user user() identified by \"root\";\nalter user user() identified by \"新密码\";\n\nmysql -u root -p \n\nysql> use mysql\natabase changed\nysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';\nuery OK, 0 rows affected (0.04 sec)\n\nysql> flush privileges;\nuery OK, 0 rows affected (0.00 sec)\n\n \nuse mysql\n\n4.ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';\n\n5.flush privileges;\n\n6.可以用navicat登陆了\n\n\nhttps://www.cnblogs.com/anstoner/p/6414440.html\n\nnet stop mysql\n\nhttps://blog.csdn.net/czhilovely/article/details/80360146\n\nhttps://blog.csdn.net/qq_42923798/article/details/81540122\n\nhttps://blog.csdn.net/u012561176/article/details/78557320","slug":"MySQL安装-Windows","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrp60005ck8h339efl4k","content":"<p>下载页面：<a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/downloads/mysql/</a></p>\n<ul>\n<li>选择&quot;Microsoft Windows&quot;,下载免安装版的zip文件;</li>\n<li>将zip文件解压到本地</li>\n<li>新建一个配置文件（my.ini）用于配置字符集、端口等信息，用以覆盖原始的配置文件（my-default.ini），当然也可以修改这个默认的配置文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\"> # 设置mysql客户端默认字符集</span><br><span class=\"line\"> default-character-set=utf8 </span><br><span class=\"line\"> [mysqld]</span><br><span class=\"line\"> #设置3306端口</span><br><span class=\"line\"> port = 3306 </span><br><span class=\"line\"> # 设置mysql的安装目录</span><br><span class=\"line\"></span><br><span class=\"line\"> basedir=D:\\\\softwares\\\\mysql-5.7.14-winx64</span><br><span class=\"line\"> # 设置mysql数据库的数据的存放目录</span><br><span class=\"line\"> datadir=D:\\\\softwares\\\\mysql-5.7.14-winx64\\\\data</span><br><span class=\"line\"></span><br><span class=\"line\"> # 允许最大连接数</span><br><span class=\"line\"> max_connections=200</span><br><span class=\"line\"> # 服务端使用的字符集默认为UTF8</span><br><span class=\"line\"> character-set-server=utf8</span><br><span class=\"line\"> # 创建新表时将使用的默认存储引擎</span><br><span class=\"line\"> default-storage-engine=INNODB</span><br></pre></td></tr></table></figure>\n<p>输入cmd，以管理员身份运行控制台</p>\n<p>S C:\\Windows\\system32&gt; cd<br>\nS C:\\Windows\\system32&gt; cd …<br>\nS C:\\Windows&gt; cd …<br>\nS C:&gt; cd .\\mysql-8.0.12-winx64<br>\nS C:\\mysql-8.0.12-winx64&gt; cd .\\bin\\</p>\n<p>S C:\\mysql-8.0.12-winx64\\bin&gt; .\\mysqld.exe -install<br>\nervice successfully installed.<br>\nS C:\\mysql-8.0.12-winx64\\bin&gt; net start mysql<br>\nySQL 服务正在启动 .<br>\nySQL 服务无法启动。</p>\n<p>服务没有报告任何错误。</p>\n<p>请键入 NET HELPMSG 3534 以获得更多的帮助。</p>\n<p>S C:\\mysql-8.0.12-winx64\\bin&gt; .\\mysqld.exe -remove<br>\nervice successfully removed.<br>\nS C:\\mysql-8.0.12-winx64\\bin&gt; .\\mysqld.exe --initialize<br>\nS C:\\mysql-8.0.12-winx64\\bin&gt; .\\mysqld.exe -install<br>\nervice successfully installed.<br>\nS C:\\mysql-8.0.12-winx64\\bin&gt; net start mysql<br>\nySQL 服务正在启动 .<br>\nySQL 服务已经启动成功。</p>\n<p>S C:\\mysql-8.0.12-winx64\\bin&gt; .\\mysqladmin.exe -u root password “axn7Og=ve;+2”<br>\nysqladmin: connect to server at ‘localhost’ failed</p>\n<p>alter user user() identified by “root”;<br>\nalter user user() identified by “新密码”;</p>\n<p>mysql -u root -p</p>\n<p>ysql&gt; use mysql<br>\natabase changed<br>\nysql&gt; ALTER USER ‘root’@‘localhost’ IDENTIFIED WITH mysql_native_password BY ‘root’;<br>\nuery OK, 0 rows affected (0.04 sec)</p>\n<p>ysql&gt; flush privileges;<br>\nuery OK, 0 rows affected (0.00 sec)</p>\n<p>use mysql</p>\n<p>4.ALTER USER ‘root’@‘localhost’ IDENTIFIED WITH mysql_native_password BY ‘root’;</p>\n<p>5.flush privileges;</p>\n<p>6.可以用navicat登陆了</p>\n<p><a href=\"https://www.cnblogs.com/anstoner/p/6414440.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/anstoner/p/6414440.html</a></p>\n<p>net stop mysql</p>\n<p><a href=\"https://blog.csdn.net/czhilovely/article/details/80360146\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/czhilovely/article/details/80360146</a></p>\n<p><a href=\"https://blog.csdn.net/qq_42923798/article/details/81540122\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_42923798/article/details/81540122</a></p>\n<p><a href=\"https://blog.csdn.net/u012561176/article/details/78557320\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012561176/article/details/78557320</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>下载页面：<a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/downloads/mysql/</a></p>\n<ul>\n<li>选择&quot;Microsoft Windows&quot;,下载免安装版的zip文件;</li>\n<li>将zip文件解压到本地</li>\n<li>新建一个配置文件（my.ini）用于配置字符集、端口等信息，用以覆盖原始的配置文件（my-default.ini），当然也可以修改这个默认的配置文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\"> # 设置mysql客户端默认字符集</span><br><span class=\"line\"> default-character-set=utf8 </span><br><span class=\"line\"> [mysqld]</span><br><span class=\"line\"> #设置3306端口</span><br><span class=\"line\"> port = 3306 </span><br><span class=\"line\"> # 设置mysql的安装目录</span><br><span class=\"line\"></span><br><span class=\"line\"> basedir=D:\\\\softwares\\\\mysql-5.7.14-winx64</span><br><span class=\"line\"> # 设置mysql数据库的数据的存放目录</span><br><span class=\"line\"> datadir=D:\\\\softwares\\\\mysql-5.7.14-winx64\\\\data</span><br><span class=\"line\"></span><br><span class=\"line\"> # 允许最大连接数</span><br><span class=\"line\"> max_connections=200</span><br><span class=\"line\"> # 服务端使用的字符集默认为UTF8</span><br><span class=\"line\"> character-set-server=utf8</span><br><span class=\"line\"> # 创建新表时将使用的默认存储引擎</span><br><span class=\"line\"> default-storage-engine=INNODB</span><br></pre></td></tr></table></figure>\n<p>输入cmd，以管理员身份运行控制台</p>\n<p>S C:\\Windows\\system32&gt; cd<br>\nS C:\\Windows\\system32&gt; cd …<br>\nS C:\\Windows&gt; cd …<br>\nS C:&gt; cd .\\mysql-8.0.12-winx64<br>\nS C:\\mysql-8.0.12-winx64&gt; cd .\\bin\\</p>\n<p>S C:\\mysql-8.0.12-winx64\\bin&gt; .\\mysqld.exe -install<br>\nervice successfully installed.<br>\nS C:\\mysql-8.0.12-winx64\\bin&gt; net start mysql<br>\nySQL 服务正在启动 .<br>\nySQL 服务无法启动。</p>\n<p>服务没有报告任何错误。</p>\n<p>请键入 NET HELPMSG 3534 以获得更多的帮助。</p>\n<p>S C:\\mysql-8.0.12-winx64\\bin&gt; .\\mysqld.exe -remove<br>\nervice successfully removed.<br>\nS C:\\mysql-8.0.12-winx64\\bin&gt; .\\mysqld.exe --initialize<br>\nS C:\\mysql-8.0.12-winx64\\bin&gt; .\\mysqld.exe -install<br>\nervice successfully installed.<br>\nS C:\\mysql-8.0.12-winx64\\bin&gt; net start mysql<br>\nySQL 服务正在启动 .<br>\nySQL 服务已经启动成功。</p>\n<p>S C:\\mysql-8.0.12-winx64\\bin&gt; .\\mysqladmin.exe -u root password “axn7Og=ve;+2”<br>\nysqladmin: connect to server at ‘localhost’ failed</p>\n<p>alter user user() identified by “root”;<br>\nalter user user() identified by “新密码”;</p>\n<p>mysql -u root -p</p>\n<p>ysql&gt; use mysql<br>\natabase changed<br>\nysql&gt; ALTER USER ‘root’@‘localhost’ IDENTIFIED WITH mysql_native_password BY ‘root’;<br>\nuery OK, 0 rows affected (0.04 sec)</p>\n<p>ysql&gt; flush privileges;<br>\nuery OK, 0 rows affected (0.00 sec)</p>\n<p>use mysql</p>\n<p>4.ALTER USER ‘root’@‘localhost’ IDENTIFIED WITH mysql_native_password BY ‘root’;</p>\n<p>5.flush privileges;</p>\n<p>6.可以用navicat登陆了</p>\n<p><a href=\"https://www.cnblogs.com/anstoner/p/6414440.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/anstoner/p/6414440.html</a></p>\n<p>net stop mysql</p>\n<p><a href=\"https://blog.csdn.net/czhilovely/article/details/80360146\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/czhilovely/article/details/80360146</a></p>\n<p><a href=\"https://blog.csdn.net/qq_42923798/article/details/81540122\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_42923798/article/details/81540122</a></p>\n<p><a href=\"https://blog.csdn.net/u012561176/article/details/78557320\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012561176/article/details/78557320</a></p>\n"},{"title":"ngrok的使用","copyright":true,"comments":1,"toc":true,"date":"2018-10-06T03:50:40.000Z","password":null,"_content":"\n\nhttps://ngrok.com/\n\nhttps://blog.csdn.net/liu_005/article/details/79557818","source":"_posts/2018-10-06-ngrok的使用.md","raw":"---\ntitle: ngrok的使用\ntags:\n  - ngrok\n  - 网络工具\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-06 11:50:40\ncategories: 工具\npassword:\n---\n\n\nhttps://ngrok.com/\n\nhttps://blog.csdn.net/liu_005/article/details/79557818","slug":"ngrok的使用","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrp90008ck8hgt5xy11o","content":"<p><a href=\"https://ngrok.com/\" target=\"_blank\" rel=\"noopener\">https://ngrok.com/</a></p>\n<p><a href=\"https://blog.csdn.net/liu_005/article/details/79557818\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/liu_005/article/details/79557818</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://ngrok.com/\" target=\"_blank\" rel=\"noopener\">https://ngrok.com/</a></p>\n<p><a href=\"https://blog.csdn.net/liu_005/article/details/79557818\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/liu_005/article/details/79557818</a></p>\n"},{"title":"微信第三方登录","copyright":true,"comments":1,"toc":true,"date":"2018-10-06T03:08:33.000Z","password":null,"_content":"\nhttps://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140842\n\n用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息，进而实现业务逻辑。\n\nopen id：在关注者与公众号产生消息交互后，公众号可获得关注者的open id， 同一个用户，在不同公众号或移动应用下对应有不同open id标识；\nunion id：同一个用户，在不同公众号或移动应用下unionID相同；前提是，如若需要做多个公众号以及移动应用账户互通，得到唯一身份标识union id，则需要将多个公众号或移动应用在微信开放平台进行绑定，然后我们才能给拿到union id；\n\n微信联合登录；也就是我们常用的微信移动端/PC端之间的扫码登录，PC端用微信扫码登录，微信移动端确认授权登录后，应用可以从微信拿到用户的open id或union id，将微信获取的用户信息与自己账户体系中的用户身份进行关联；\n授权登录：需要用户确认登录，这样可以通过用户的个人确认，获取用户全面的信息，无论是否关注相关微信公众号等都可以获取。\n\n\n","source":"_posts/2018-10-06-微信第三方登录.md","raw":"---\ntitle: 微信第三方登录\ntags:\n  - 微信 \ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-06 11:08:33\ncategories: 微信\npassword:\n---\n\nhttps://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140842\n\n用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息，进而实现业务逻辑。\n\nopen id：在关注者与公众号产生消息交互后，公众号可获得关注者的open id， 同一个用户，在不同公众号或移动应用下对应有不同open id标识；\nunion id：同一个用户，在不同公众号或移动应用下unionID相同；前提是，如若需要做多个公众号以及移动应用账户互通，得到唯一身份标识union id，则需要将多个公众号或移动应用在微信开放平台进行绑定，然后我们才能给拿到union id；\n\n微信联合登录；也就是我们常用的微信移动端/PC端之间的扫码登录，PC端用微信扫码登录，微信移动端确认授权登录后，应用可以从微信拿到用户的open id或union id，将微信获取的用户信息与自己账户体系中的用户身份进行关联；\n授权登录：需要用户确认登录，这样可以通过用户的个人确认，获取用户全面的信息，无论是否关注相关微信公众号等都可以获取。\n\n\n","slug":"微信第三方登录","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrpb0009ck8h9yw0zefs","content":"<p><a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842</a></p>\n<p>用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息，进而实现业务逻辑。</p>\n<p>open id：在关注者与公众号产生消息交互后，公众号可获得关注者的open id， 同一个用户，在不同公众号或移动应用下对应有不同open id标识；<br>\nunion id：同一个用户，在不同公众号或移动应用下unionID相同；前提是，如若需要做多个公众号以及移动应用账户互通，得到唯一身份标识union id，则需要将多个公众号或移动应用在微信开放平台进行绑定，然后我们才能给拿到union id；</p>\n<p>微信联合登录；也就是我们常用的微信移动端/PC端之间的扫码登录，PC端用微信扫码登录，微信移动端确认授权登录后，应用可以从微信拿到用户的open id或union id，将微信获取的用户信息与自己账户体系中的用户身份进行关联；<br>\n授权登录：需要用户确认登录，这样可以通过用户的个人确认，获取用户全面的信息，无论是否关注相关微信公众号等都可以获取。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842</a></p>\n<p>用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息，进而实现业务逻辑。</p>\n<p>open id：在关注者与公众号产生消息交互后，公众号可获得关注者的open id， 同一个用户，在不同公众号或移动应用下对应有不同open id标识；<br>\nunion id：同一个用户，在不同公众号或移动应用下unionID相同；前提是，如若需要做多个公众号以及移动应用账户互通，得到唯一身份标识union id，则需要将多个公众号或移动应用在微信开放平台进行绑定，然后我们才能给拿到union id；</p>\n<p>微信联合登录；也就是我们常用的微信移动端/PC端之间的扫码登录，PC端用微信扫码登录，微信移动端确认授权登录后，应用可以从微信拿到用户的open id或union id，将微信获取的用户信息与自己账户体系中的用户身份进行关联；<br>\n授权登录：需要用户确认登录，这样可以通过用户的个人确认，获取用户全面的信息，无论是否关注相关微信公众号等都可以获取。</p>\n"},{"title":"微信公众平台使用","copyright":true,"comments":1,"toc":true,"date":"2018-10-06T04:13:04.000Z","password":null,"_content":"# 官方文档\nhttps://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1445241432\n\n# 接口整体介绍\n微信接口请求返回格式介绍：\n\n微信接口是通过GET方式请求\n返回数据格式为JSON\n\n# 测试号配置\n无需公众账号，可直接体验和测试公众平台所有高级接口。\n\n配置：\n1. 登录公众账号\n2. 开发>开发者工具>公众平台测试账号\n3. 微信扫一扫登录\n4. 配置URL、TOKEN、JS接口安全域名\n\n# 注意事项\n1. 接口频率限制说明\n2. 全局返回码说明\n\n网页授权登录：\n如果用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息。\n\n两种scope模式：\n1. snsapi_base时只能获取到openid，静默授权，\n2. snsapi_userinfo时可获取到其他信息，需要用户手动同意授权的\n\n微信公众平台（互斥）\n1. 编辑模式\n2. 开发者模式-openid\n\n接入开发者模式步骤\n\n\n为了识别用户，每个用户针对每个公众号会产生一个安全的OpenID\n如果需要在多公众号、移动应用之间做用户共通，则需前往微信开放平台，将这些公众号和应用绑定到一个开放平台账号下，绑定后，一个用户虽然对多个公众号和应用有多个不同的OpenID，但他对所有这些同一开放平台账号下的公众号和应用，只有一个UnionID\n\n公众平台以access_token为接口调用凭据，来调用接口，所有接口的调用需要先获取access_token，access_token在2小时内有效，过期需要重新获取，但1天内获取次数有限，开发者需自行存储\n公众平台接口调用仅支持80端口。\n\n网页授权获取用户基本信息：通过该接口，可以获取用户的基本信息（获取用户的OpenID是无需用户同意的，获取用户的基本信息则需用户同意）\n\n微信JS-SDK：是开发者在网页上通过JavaScript代码使用微信原生功能的工具包，开发者可以使用它在网页上录制和播放微信语音、监听微信分享、上传手机本地图片、拍照等许多能力。\n\n\n调试接口可能需要取消关注之后才能看到最新的效果\n\n\nhttps://blog.csdn.net/z496007165/article/details/73239971\nhttp://www.php.cn/xiaochengxu-405121.html\n\n网页授权接口：\n授权回调页面域名：没有http，如：http://89495c4f.ngrok.io是错误的，应该是： 89495c4f.ngrok.io\n\n\n\nhttp://www.106jiekou.com/\n\n\nhttps://blog.csdn.net/kingmax54212008/article/details/50811885\n\nhttps://www.cnblogs.com/hoobey/p/6078584.html\n\nhttps://blog.csdn.net/qianxing111/article/details/79884527\n\nhttp://www.it165.net/pro/html/201606/70831.html","source":"_posts/2018-10-06-微信公众平台.md","raw":"---\ntitle: 微信公众平台使用\ntags:\n  - 微信公众平台 \ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-06 12:13:04\ncategories: 微信\npassword:\n---\n# 官方文档\nhttps://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1445241432\n\n# 接口整体介绍\n微信接口请求返回格式介绍：\n\n微信接口是通过GET方式请求\n返回数据格式为JSON\n\n# 测试号配置\n无需公众账号，可直接体验和测试公众平台所有高级接口。\n\n配置：\n1. 登录公众账号\n2. 开发>开发者工具>公众平台测试账号\n3. 微信扫一扫登录\n4. 配置URL、TOKEN、JS接口安全域名\n\n# 注意事项\n1. 接口频率限制说明\n2. 全局返回码说明\n\n网页授权登录：\n如果用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息。\n\n两种scope模式：\n1. snsapi_base时只能获取到openid，静默授权，\n2. snsapi_userinfo时可获取到其他信息，需要用户手动同意授权的\n\n微信公众平台（互斥）\n1. 编辑模式\n2. 开发者模式-openid\n\n接入开发者模式步骤\n\n\n为了识别用户，每个用户针对每个公众号会产生一个安全的OpenID\n如果需要在多公众号、移动应用之间做用户共通，则需前往微信开放平台，将这些公众号和应用绑定到一个开放平台账号下，绑定后，一个用户虽然对多个公众号和应用有多个不同的OpenID，但他对所有这些同一开放平台账号下的公众号和应用，只有一个UnionID\n\n公众平台以access_token为接口调用凭据，来调用接口，所有接口的调用需要先获取access_token，access_token在2小时内有效，过期需要重新获取，但1天内获取次数有限，开发者需自行存储\n公众平台接口调用仅支持80端口。\n\n网页授权获取用户基本信息：通过该接口，可以获取用户的基本信息（获取用户的OpenID是无需用户同意的，获取用户的基本信息则需用户同意）\n\n微信JS-SDK：是开发者在网页上通过JavaScript代码使用微信原生功能的工具包，开发者可以使用它在网页上录制和播放微信语音、监听微信分享、上传手机本地图片、拍照等许多能力。\n\n\n调试接口可能需要取消关注之后才能看到最新的效果\n\n\nhttps://blog.csdn.net/z496007165/article/details/73239971\nhttp://www.php.cn/xiaochengxu-405121.html\n\n网页授权接口：\n授权回调页面域名：没有http，如：http://89495c4f.ngrok.io是错误的，应该是： 89495c4f.ngrok.io\n\n\n\nhttp://www.106jiekou.com/\n\n\nhttps://blog.csdn.net/kingmax54212008/article/details/50811885\n\nhttps://www.cnblogs.com/hoobey/p/6078584.html\n\nhttps://blog.csdn.net/qianxing111/article/details/79884527\n\nhttp://www.it165.net/pro/html/201606/70831.html","slug":"微信公众平台","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrpd000cck8h384322ku","content":"<h1 id=\"官方文档\"><a class=\"markdownIt-Anchor\" href=\"#官方文档\"></a> 官方文档</h1>\n<p><a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432</a></p>\n<h1 id=\"接口整体介绍\"><a class=\"markdownIt-Anchor\" href=\"#接口整体介绍\"></a> 接口整体介绍</h1>\n<p>微信接口请求返回格式介绍：</p>\n<p>微信接口是通过GET方式请求<br>\n返回数据格式为JSON</p>\n<h1 id=\"测试号配置\"><a class=\"markdownIt-Anchor\" href=\"#测试号配置\"></a> 测试号配置</h1>\n<p>无需公众账号，可直接体验和测试公众平台所有高级接口。</p>\n<p>配置：</p>\n<ol>\n<li>登录公众账号</li>\n<li>开发&gt;开发者工具&gt;公众平台测试账号</li>\n<li>微信扫一扫登录</li>\n<li>配置URL、TOKEN、JS接口安全域名</li>\n</ol>\n<h1 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\"></a> 注意事项</h1>\n<ol>\n<li>接口频率限制说明</li>\n<li>全局返回码说明</li>\n</ol>\n<p>网页授权登录：<br>\n如果用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息。</p>\n<p>两种scope模式：</p>\n<ol>\n<li>snsapi_base时只能获取到openid，静默授权，</li>\n<li>snsapi_userinfo时可获取到其他信息，需要用户手动同意授权的</li>\n</ol>\n<p>微信公众平台（互斥）</p>\n<ol>\n<li>编辑模式</li>\n<li>开发者模式-openid</li>\n</ol>\n<p>接入开发者模式步骤</p>\n<p>为了识别用户，每个用户针对每个公众号会产生一个安全的OpenID<br>\n如果需要在多公众号、移动应用之间做用户共通，则需前往微信开放平台，将这些公众号和应用绑定到一个开放平台账号下，绑定后，一个用户虽然对多个公众号和应用有多个不同的OpenID，但他对所有这些同一开放平台账号下的公众号和应用，只有一个UnionID</p>\n<p>公众平台以access_token为接口调用凭据，来调用接口，所有接口的调用需要先获取access_token，access_token在2小时内有效，过期需要重新获取，但1天内获取次数有限，开发者需自行存储<br>\n公众平台接口调用仅支持80端口。</p>\n<p>网页授权获取用户基本信息：通过该接口，可以获取用户的基本信息（获取用户的OpenID是无需用户同意的，获取用户的基本信息则需用户同意）</p>\n<p>微信JS-SDK：是开发者在网页上通过JavaScript代码使用微信原生功能的工具包，开发者可以使用它在网页上录制和播放微信语音、监听微信分享、上传手机本地图片、拍照等许多能力。</p>\n<p>调试接口可能需要取消关注之后才能看到最新的效果</p>\n<p><a href=\"https://blog.csdn.net/z496007165/article/details/73239971\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/z496007165/article/details/73239971</a><br>\n<a href=\"http://www.php.cn/xiaochengxu-405121.html\" target=\"_blank\" rel=\"noopener\">http://www.php.cn/xiaochengxu-405121.html</a></p>\n<p>网页授权接口：<br>\n授权回调页面域名：没有http，如：<a href=\"http://89495c4f.ngrok.xn--io-k07di11djizfrl\" target=\"_blank\" rel=\"noopener\">http://89495c4f.ngrok.io是错误的</a>，应该是： <a href=\"http://89495c4f.ngrok.io\" target=\"_blank\" rel=\"noopener\">89495c4f.ngrok.io</a></p>\n<p><a href=\"http://www.106jiekou.com/\" target=\"_blank\" rel=\"noopener\">http://www.106jiekou.com/</a></p>\n<p><a href=\"https://blog.csdn.net/kingmax54212008/article/details/50811885\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/kingmax54212008/article/details/50811885</a></p>\n<p><a href=\"https://www.cnblogs.com/hoobey/p/6078584.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/hoobey/p/6078584.html</a></p>\n<p><a href=\"https://blog.csdn.net/qianxing111/article/details/79884527\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qianxing111/article/details/79884527</a></p>\n<p><a href=\"http://www.it165.net/pro/html/201606/70831.html\" target=\"_blank\" rel=\"noopener\">http://www.it165.net/pro/html/201606/70831.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"官方文档\"><a class=\"markdownIt-Anchor\" href=\"#官方文档\"></a> 官方文档</h1>\n<p><a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432</a></p>\n<h1 id=\"接口整体介绍\"><a class=\"markdownIt-Anchor\" href=\"#接口整体介绍\"></a> 接口整体介绍</h1>\n<p>微信接口请求返回格式介绍：</p>\n<p>微信接口是通过GET方式请求<br>\n返回数据格式为JSON</p>\n<h1 id=\"测试号配置\"><a class=\"markdownIt-Anchor\" href=\"#测试号配置\"></a> 测试号配置</h1>\n<p>无需公众账号，可直接体验和测试公众平台所有高级接口。</p>\n<p>配置：</p>\n<ol>\n<li>登录公众账号</li>\n<li>开发&gt;开发者工具&gt;公众平台测试账号</li>\n<li>微信扫一扫登录</li>\n<li>配置URL、TOKEN、JS接口安全域名</li>\n</ol>\n<h1 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\"></a> 注意事项</h1>\n<ol>\n<li>接口频率限制说明</li>\n<li>全局返回码说明</li>\n</ol>\n<p>网页授权登录：<br>\n如果用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息。</p>\n<p>两种scope模式：</p>\n<ol>\n<li>snsapi_base时只能获取到openid，静默授权，</li>\n<li>snsapi_userinfo时可获取到其他信息，需要用户手动同意授权的</li>\n</ol>\n<p>微信公众平台（互斥）</p>\n<ol>\n<li>编辑模式</li>\n<li>开发者模式-openid</li>\n</ol>\n<p>接入开发者模式步骤</p>\n<p>为了识别用户，每个用户针对每个公众号会产生一个安全的OpenID<br>\n如果需要在多公众号、移动应用之间做用户共通，则需前往微信开放平台，将这些公众号和应用绑定到一个开放平台账号下，绑定后，一个用户虽然对多个公众号和应用有多个不同的OpenID，但他对所有这些同一开放平台账号下的公众号和应用，只有一个UnionID</p>\n<p>公众平台以access_token为接口调用凭据，来调用接口，所有接口的调用需要先获取access_token，access_token在2小时内有效，过期需要重新获取，但1天内获取次数有限，开发者需自行存储<br>\n公众平台接口调用仅支持80端口。</p>\n<p>网页授权获取用户基本信息：通过该接口，可以获取用户的基本信息（获取用户的OpenID是无需用户同意的，获取用户的基本信息则需用户同意）</p>\n<p>微信JS-SDK：是开发者在网页上通过JavaScript代码使用微信原生功能的工具包，开发者可以使用它在网页上录制和播放微信语音、监听微信分享、上传手机本地图片、拍照等许多能力。</p>\n<p>调试接口可能需要取消关注之后才能看到最新的效果</p>\n<p><a href=\"https://blog.csdn.net/z496007165/article/details/73239971\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/z496007165/article/details/73239971</a><br>\n<a href=\"http://www.php.cn/xiaochengxu-405121.html\" target=\"_blank\" rel=\"noopener\">http://www.php.cn/xiaochengxu-405121.html</a></p>\n<p>网页授权接口：<br>\n授权回调页面域名：没有http，如：<a href=\"http://89495c4f.ngrok.xn--io-k07di11djizfrl\" target=\"_blank\" rel=\"noopener\">http://89495c4f.ngrok.io是错误的</a>，应该是： <a href=\"http://89495c4f.ngrok.io\" target=\"_blank\" rel=\"noopener\">89495c4f.ngrok.io</a></p>\n<p><a href=\"http://www.106jiekou.com/\" target=\"_blank\" rel=\"noopener\">http://www.106jiekou.com/</a></p>\n<p><a href=\"https://blog.csdn.net/kingmax54212008/article/details/50811885\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/kingmax54212008/article/details/50811885</a></p>\n<p><a href=\"https://www.cnblogs.com/hoobey/p/6078584.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/hoobey/p/6078584.html</a></p>\n<p><a href=\"https://blog.csdn.net/qianxing111/article/details/79884527\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qianxing111/article/details/79884527</a></p>\n<p><a href=\"http://www.it165.net/pro/html/201606/70831.html\" target=\"_blank\" rel=\"noopener\">http://www.it165.net/pro/html/201606/70831.html</a></p>\n"},{"title":"Gitblit搭建git服务器","copyright":true,"comments":1,"toc":true,"date":"2018-10-08T13:00:14.000Z","password":null,"_content":"\nhttp://www.gitblit.com/\nhttps://www.cnblogs.com/ucos/p/3924720.html\n\nhttps://blog.csdn.net/llengnuo/article/details/73477355\n\nhttp://gitblit.com/setup_go.html\n\nhttps://blog.csdn.net/zhangwenjie1105/article/details/81482238\n\n\nhttps://www.cnblogs.com/royi123/p/7754235.html","source":"_posts/2018-10-08-Gitblit搭建git服务器.md","raw":"---\ntitle: Gitblit搭建git服务器\ntags:\n  - null\n  - null\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-08 21:00:14\ncategories:\npassword:\n---\n\nhttp://www.gitblit.com/\nhttps://www.cnblogs.com/ucos/p/3924720.html\n\nhttps://blog.csdn.net/llengnuo/article/details/73477355\n\nhttp://gitblit.com/setup_go.html\n\nhttps://blog.csdn.net/zhangwenjie1105/article/details/81482238\n\n\nhttps://www.cnblogs.com/royi123/p/7754235.html","slug":"Gitblit搭建git服务器","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrph000eck8hxpqkawer","content":"<p><a href=\"http://www.gitblit.com/\" target=\"_blank\" rel=\"noopener\">http://www.gitblit.com/</a><br>\n<a href=\"https://www.cnblogs.com/ucos/p/3924720.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ucos/p/3924720.html</a></p>\n<p><a href=\"https://blog.csdn.net/llengnuo/article/details/73477355\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/llengnuo/article/details/73477355</a></p>\n<p><a href=\"http://gitblit.com/setup_go.html\" target=\"_blank\" rel=\"noopener\">http://gitblit.com/setup_go.html</a></p>\n<p><a href=\"https://blog.csdn.net/zhangwenjie1105/article/details/81482238\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zhangwenjie1105/article/details/81482238</a></p>\n<p><a href=\"https://www.cnblogs.com/royi123/p/7754235.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/royi123/p/7754235.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.gitblit.com/\" target=\"_blank\" rel=\"noopener\">http://www.gitblit.com/</a><br>\n<a href=\"https://www.cnblogs.com/ucos/p/3924720.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ucos/p/3924720.html</a></p>\n<p><a href=\"https://blog.csdn.net/llengnuo/article/details/73477355\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/llengnuo/article/details/73477355</a></p>\n<p><a href=\"http://gitblit.com/setup_go.html\" target=\"_blank\" rel=\"noopener\">http://gitblit.com/setup_go.html</a></p>\n<p><a href=\"https://blog.csdn.net/zhangwenjie1105/article/details/81482238\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zhangwenjie1105/article/details/81482238</a></p>\n<p><a href=\"https://www.cnblogs.com/royi123/p/7754235.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/royi123/p/7754235.html</a></p>\n"},{"title":"windows git","copyright":true,"comments":1,"toc":true,"date":"2018-10-08T13:15:47.000Z","password":null,"_content":"\nhttps://git-scm.com/\n\n\n\nhttps://www.cnblogs.com/vitah/p/3612473.html\n","source":"_posts/2018-10-08-windows-git.md","raw":"---\ntitle: windows git\ntags:\n  - git\n  - windows\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-08 21:15:47\ncategories: 工具\npassword:\n---\n\nhttps://git-scm.com/\n\n\n\nhttps://www.cnblogs.com/vitah/p/3612473.html\n","slug":"windows-git","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrpi000gck8hm79qbvq8","content":"<p><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a></p>\n<p><a href=\"https://www.cnblogs.com/vitah/p/3612473.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/vitah/p/3612473.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a></p>\n<p><a href=\"https://www.cnblogs.com/vitah/p/3612473.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/vitah/p/3612473.html</a></p>\n"},{"title":"React全家桶","copyright":true,"comments":1,"toc":true,"date":"2018-10-15T00:16:00.000Z","password":null,"_content":"\nReact全家桶+Antd共享单车后台管理系统\n\n# react基础知识\nVue生态：Vue+Vue-Router+Vuex+Axios+Babel+Webpack\nReact生态：React+React-Router+Redux+Axios+Babel+Webpack\n\n编程式实现：需要以具体代码表达在哪里做什么，如何实现 \n声明式实现：只需声明在哪里做什么，无需关心如何实现\n\n\nhttps://react.docschina.org/\nhttps://reactjs.org.cn/\nhttp://facebook.github.io/react/\n\n\nyarn： https://yarnpkg.com/zh-Hans/\n* yarn init\n* yarn add\n* yarn remove\n* yarn install\n\nreact生命周期\n\n\nreact-router ／react-router-dom\n\n按需加载：\nAntd中less样式\nyarn eject:暴露webpack配置，\n\nless-loader安装\nwebpack.config.xxx.js\n\n修改完之后，重启项目\n\n\nhttps://ant.design/docs/react/use-with-create-react-app-cn\n\nbabel-plugin-import\n\n\ncss3  calc属性\nheight:calc(100vh)\n\n\njsonp：https://www.npmjs.com/package/jsonp\n\n浏览器添加debugger\n\n\n伪类方式\n\n\n项目中前端路由用的是 React-Router V4。\n\n官方文档：https://reacttraining.com/react-router/web/guides/quick-start\n\n中文文档：http://reacttraining.cn/\n\nReact-Router 4.0\nReact-Router：基础包\nReact-Router-DOM：浏览器端实现\n\n\nhttps://segmentfault.com/a/1190000011399153\n\n箭头函数不加{}表示直接返回结果 \nthis.props.match.params.XXX\n处理404则不设置path，只设置component即可\n路由外面添加Switch\n\n\n详情页面、登录页面、主页面是同层级页面，还有其他自页面嵌套路由\n\nApp.js设置为{this.props.children}代表可以接受任何组件，APP组件作为HashRouter的根组件\n\n子路由、子组件模式\n\n\n传参数需要箭头函数\n\nModal.confirm()  等价于  Modal['confirm']\n\n{}里面必须是一个根对象\n\n\nhttps://blog.csdn.net/little_blue_ljy/article/details/80281803\nhttps://www.cnblogs.com/guolintao/p/9019504.html\nhttps://www.cnblogs.com/xuyuntao/articles/6391728.html\nhttps://github.com/fomenyesu/egg-restapi-module-tool/blob/master/README.cn.md\n\n\nES6模版语法:","source":"_posts/2018-10-15-React全家桶.md","raw":"---\ntitle: React全家桶\ntags:\n  - react\n  - Antd\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-15 08:16:00\ncategories: react\npassword:\n---\n\nReact全家桶+Antd共享单车后台管理系统\n\n# react基础知识\nVue生态：Vue+Vue-Router+Vuex+Axios+Babel+Webpack\nReact生态：React+React-Router+Redux+Axios+Babel+Webpack\n\n编程式实现：需要以具体代码表达在哪里做什么，如何实现 \n声明式实现：只需声明在哪里做什么，无需关心如何实现\n\n\nhttps://react.docschina.org/\nhttps://reactjs.org.cn/\nhttp://facebook.github.io/react/\n\n\nyarn： https://yarnpkg.com/zh-Hans/\n* yarn init\n* yarn add\n* yarn remove\n* yarn install\n\nreact生命周期\n\n\nreact-router ／react-router-dom\n\n按需加载：\nAntd中less样式\nyarn eject:暴露webpack配置，\n\nless-loader安装\nwebpack.config.xxx.js\n\n修改完之后，重启项目\n\n\nhttps://ant.design/docs/react/use-with-create-react-app-cn\n\nbabel-plugin-import\n\n\ncss3  calc属性\nheight:calc(100vh)\n\n\njsonp：https://www.npmjs.com/package/jsonp\n\n浏览器添加debugger\n\n\n伪类方式\n\n\n项目中前端路由用的是 React-Router V4。\n\n官方文档：https://reacttraining.com/react-router/web/guides/quick-start\n\n中文文档：http://reacttraining.cn/\n\nReact-Router 4.0\nReact-Router：基础包\nReact-Router-DOM：浏览器端实现\n\n\nhttps://segmentfault.com/a/1190000011399153\n\n箭头函数不加{}表示直接返回结果 \nthis.props.match.params.XXX\n处理404则不设置path，只设置component即可\n路由外面添加Switch\n\n\n详情页面、登录页面、主页面是同层级页面，还有其他自页面嵌套路由\n\nApp.js设置为{this.props.children}代表可以接受任何组件，APP组件作为HashRouter的根组件\n\n子路由、子组件模式\n\n\n传参数需要箭头函数\n\nModal.confirm()  等价于  Modal['confirm']\n\n{}里面必须是一个根对象\n\n\nhttps://blog.csdn.net/little_blue_ljy/article/details/80281803\nhttps://www.cnblogs.com/guolintao/p/9019504.html\nhttps://www.cnblogs.com/xuyuntao/articles/6391728.html\nhttps://github.com/fomenyesu/egg-restapi-module-tool/blob/master/README.cn.md\n\n\nES6模版语法:","slug":"React全家桶","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrpk000jck8hai3ioeye","content":"<p>React全家桶+Antd共享单车后台管理系统</p>\n<h1 id=\"react基础知识\"><a class=\"markdownIt-Anchor\" href=\"#react基础知识\"></a> react基础知识</h1>\n<p>Vue生态：Vue+Vue-Router+Vuex+Axios+Babel+Webpack<br>\nReact生态：React+React-Router+Redux+Axios+Babel+Webpack</p>\n<p>编程式实现：需要以具体代码表达在哪里做什么，如何实现<br>\n声明式实现：只需声明在哪里做什么，无需关心如何实现</p>\n<p><a href=\"https://react.docschina.org/\" target=\"_blank\" rel=\"noopener\">https://react.docschina.org/</a><br>\n<a href=\"https://reactjs.org.cn/\" target=\"_blank\" rel=\"noopener\">https://reactjs.org.cn/</a><br>\n<a href=\"http://facebook.github.io/react/\" target=\"_blank\" rel=\"noopener\">http://facebook.github.io/react/</a></p>\n<p>yarn： <a href=\"https://yarnpkg.com/zh-Hans/\" target=\"_blank\" rel=\"noopener\">https://yarnpkg.com/zh-Hans/</a></p>\n<ul>\n<li>yarn init</li>\n<li>yarn add</li>\n<li>yarn remove</li>\n<li>yarn install</li>\n</ul>\n<p>react生命周期</p>\n<p>react-router ／react-router-dom</p>\n<p>按需加载：<br>\nAntd中less样式<br>\nyarn eject:暴露webpack配置，</p>\n<p>less-loader安装<br>\nwebpack.config.xxx.js</p>\n<p>修改完之后，重启项目</p>\n<p><a href=\"https://ant.design/docs/react/use-with-create-react-app-cn\" target=\"_blank\" rel=\"noopener\">https://ant.design/docs/react/use-with-create-react-app-cn</a></p>\n<p>babel-plugin-import</p>\n<p>css3  calc属性<br>\nheight:calc(100vh)</p>\n<p>jsonp：<a href=\"https://www.npmjs.com/package/jsonp\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/jsonp</a></p>\n<p>浏览器添加debugger</p>\n<p>伪类方式</p>\n<p>项目中前端路由用的是 React-Router V4。</p>\n<p>官方文档：<a href=\"https://reacttraining.com/react-router/web/guides/quick-start\" target=\"_blank\" rel=\"noopener\">https://reacttraining.com/react-router/web/guides/quick-start</a></p>\n<p>中文文档：<a href=\"http://reacttraining.cn/\" target=\"_blank\" rel=\"noopener\">http://reacttraining.cn/</a></p>\n<p>React-Router 4.0<br>\nReact-Router：基础包<br>\nReact-Router-DOM：浏览器端实现</p>\n<p><a href=\"https://segmentfault.com/a/1190000011399153\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000011399153</a></p>\n<p>箭头函数不加{}表示直接返回结果<br>\n<a href=\"http://this.props.match.params.XXX\" target=\"_blank\" rel=\"noopener\">this.props.match.params.XXX</a><br>\n处理404则不设置path，只设置component即可<br>\n路由外面添加Switch</p>\n<p>详情页面、登录页面、主页面是同层级页面，还有其他自页面嵌套路由</p>\n<p>App.js设置为{this.props.children}代表可以接受任何组件，APP组件作为HashRouter的根组件</p>\n<p>子路由、子组件模式</p>\n<p>传参数需要箭头函数</p>\n<p>Modal.confirm()  等价于  Modal[‘confirm’]</p>\n<p>{}里面必须是一个根对象</p>\n<p><a href=\"https://blog.csdn.net/little_blue_ljy/article/details/80281803\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/little_blue_ljy/article/details/80281803</a><br>\n<a href=\"https://www.cnblogs.com/guolintao/p/9019504.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/guolintao/p/9019504.html</a><br>\n<a href=\"https://www.cnblogs.com/xuyuntao/articles/6391728.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xuyuntao/articles/6391728.html</a><br>\n<a href=\"https://github.com/fomenyesu/egg-restapi-module-tool/blob/master/README.cn.md\" target=\"_blank\" rel=\"noopener\">https://github.com/fomenyesu/egg-restapi-module-tool/blob/master/README.cn.md</a></p>\n<p>ES6模版语法:</p>\n","site":{"data":{}},"excerpt":"","more":"<p>React全家桶+Antd共享单车后台管理系统</p>\n<h1 id=\"react基础知识\"><a class=\"markdownIt-Anchor\" href=\"#react基础知识\"></a> react基础知识</h1>\n<p>Vue生态：Vue+Vue-Router+Vuex+Axios+Babel+Webpack<br>\nReact生态：React+React-Router+Redux+Axios+Babel+Webpack</p>\n<p>编程式实现：需要以具体代码表达在哪里做什么，如何实现<br>\n声明式实现：只需声明在哪里做什么，无需关心如何实现</p>\n<p><a href=\"https://react.docschina.org/\" target=\"_blank\" rel=\"noopener\">https://react.docschina.org/</a><br>\n<a href=\"https://reactjs.org.cn/\" target=\"_blank\" rel=\"noopener\">https://reactjs.org.cn/</a><br>\n<a href=\"http://facebook.github.io/react/\" target=\"_blank\" rel=\"noopener\">http://facebook.github.io/react/</a></p>\n<p>yarn： <a href=\"https://yarnpkg.com/zh-Hans/\" target=\"_blank\" rel=\"noopener\">https://yarnpkg.com/zh-Hans/</a></p>\n<ul>\n<li>yarn init</li>\n<li>yarn add</li>\n<li>yarn remove</li>\n<li>yarn install</li>\n</ul>\n<p>react生命周期</p>\n<p>react-router ／react-router-dom</p>\n<p>按需加载：<br>\nAntd中less样式<br>\nyarn eject:暴露webpack配置，</p>\n<p>less-loader安装<br>\nwebpack.config.xxx.js</p>\n<p>修改完之后，重启项目</p>\n<p><a href=\"https://ant.design/docs/react/use-with-create-react-app-cn\" target=\"_blank\" rel=\"noopener\">https://ant.design/docs/react/use-with-create-react-app-cn</a></p>\n<p>babel-plugin-import</p>\n<p>css3  calc属性<br>\nheight:calc(100vh)</p>\n<p>jsonp：<a href=\"https://www.npmjs.com/package/jsonp\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/jsonp</a></p>\n<p>浏览器添加debugger</p>\n<p>伪类方式</p>\n<p>项目中前端路由用的是 React-Router V4。</p>\n<p>官方文档：<a href=\"https://reacttraining.com/react-router/web/guides/quick-start\" target=\"_blank\" rel=\"noopener\">https://reacttraining.com/react-router/web/guides/quick-start</a></p>\n<p>中文文档：<a href=\"http://reacttraining.cn/\" target=\"_blank\" rel=\"noopener\">http://reacttraining.cn/</a></p>\n<p>React-Router 4.0<br>\nReact-Router：基础包<br>\nReact-Router-DOM：浏览器端实现</p>\n<p><a href=\"https://segmentfault.com/a/1190000011399153\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000011399153</a></p>\n<p>箭头函数不加{}表示直接返回结果<br>\n<a href=\"http://this.props.match.params.XXX\" target=\"_blank\" rel=\"noopener\">this.props.match.params.XXX</a><br>\n处理404则不设置path，只设置component即可<br>\n路由外面添加Switch</p>\n<p>详情页面、登录页面、主页面是同层级页面，还有其他自页面嵌套路由</p>\n<p>App.js设置为{this.props.children}代表可以接受任何组件，APP组件作为HashRouter的根组件</p>\n<p>子路由、子组件模式</p>\n<p>传参数需要箭头函数</p>\n<p>Modal.confirm()  等价于  Modal[‘confirm’]</p>\n<p>{}里面必须是一个根对象</p>\n<p><a href=\"https://blog.csdn.net/little_blue_ljy/article/details/80281803\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/little_blue_ljy/article/details/80281803</a><br>\n<a href=\"https://www.cnblogs.com/guolintao/p/9019504.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/guolintao/p/9019504.html</a><br>\n<a href=\"https://www.cnblogs.com/xuyuntao/articles/6391728.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xuyuntao/articles/6391728.html</a><br>\n<a href=\"https://github.com/fomenyesu/egg-restapi-module-tool/blob/master/README.cn.md\" target=\"_blank\" rel=\"noopener\">https://github.com/fomenyesu/egg-restapi-module-tool/blob/master/README.cn.md</a></p>\n<p>ES6模版语法:</p>\n"},{"title":"C#","copyright":true,"comments":1,"toc":true,"date":"2018-10-17T07:03:28.000Z","password":null,"_content":"双问号操作符意思是取所赋值??左边的，如果左边为null，取所赋值??右边的，双问号操作符意思是取所赋值??左边的，如果左边为null，取所赋值??右边的，\n\nhttps://blog.csdn.net/zmh458/article/details/78935172\nhttps://www.cnblogs.com/lanpingwang/p/6596758.html\nhttps://www.cnblogs.com/Inspire-Yi/p/6230567.html\n\nhttps://www.jianshu.com/p/c82ef6babf8e\n\nhttps://www.cnblogs.com/caofangsheng/p/5715876.html\nhttps://blog.csdn.net/beglorious/article/details/39637475\n \nhttps://www.cnblogs.com/servicehot/p/6510199.html\n\n\n首先我觉得action的跳转大致可以这样归一下类，跳转到同一控制器内的action和不同控制器内的action、带有参数的action跳转和不带参数的action跳转。\n\n一、RedirectToAction(\"Index\");//一个参数时在本Controller下，不传入参数。\n\n二、RedirectToAction(ActionName,ControllerName) //可以直接跳到别的Controller.\n\n三、RedirectToRoute(new {controller=\"Home\",action=\"Index\"});//可跳到其他controller\n\n四、RedirectToRoute(new {controller=\"Home\",action=\"Index\"， id=param});//可跳到其他controller,带参数。\n\n五、Response.Redirect(\"Index?id=1\");//适用于本controller下的方法名称,可带参数。\n六、return Redirect(\"Index\");//适用于本controller下的方法名称。\n\n七、return View(\"Index\"); //直接显示对应的页面 不经过执行Controller的方法。 \n八、return View(\"~/Views/Home/Index.aspx\");//这种方法是写全路径,直接显示页面,不经过Controller方法\n九、return View();//直接显示页面,不经过Controller方法\n\n\nhttps://blog.csdn.net/zhensoft163/article/details/7174661?utm_source=blogxgwz1\n一般情况下我们返回的都是本页面，所以使用return View()就可以解决问题了，\n\n\nhttps://www.cnblogs.com/Cwj-XFH/p/5956142.html\nModel验证是ASP.NET MVC中的重要部分，它主要用于判断输入的数据类型及值是否符合我们设定的规则，这篇文章就介绍下ASP.NET MVC中Model验证的几种方式。\n\n\n后台验证\nDataAnnotation\nValidationAttribute\nIValidatableObject\nIDataErrorInfo\n前端验证\n\n\nViewData和ViewBag\n\nhttps://blog.csdn.net/pasic/article/details/7093802\n\nhttps://www.cnblogs.com/webapi/p/9505400.html\n\n\n系列文章：\nhttps://blog.csdn.net/ydm19891101/article/details/43338999\n\nWebForm与MVC的本质区别：请求的url不同\n\n\nhttps://blog.csdn.net/liupantao/article/details/78582078?locationNum=3&fps=1\n\n\n \nMVC action 返回javascriptResult 需要引入的文件是 \n需要引用这个文件 ：   jquery.unobtrusive-ajax.min.js \n\n同时 用javascrptResult  作为action的返回结果 的话 ，前台必须用ajax.BeginForm  \n\n\nhttps://www.cnblogs.com/zjf1987/p/ActionResult.html\n","source":"_posts/2018-10-17-C.md","raw":"---\ntitle: 'C#'\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-17 15:03:28\ncategories:\npassword:\n---\n双问号操作符意思是取所赋值??左边的，如果左边为null，取所赋值??右边的，双问号操作符意思是取所赋值??左边的，如果左边为null，取所赋值??右边的，\n\nhttps://blog.csdn.net/zmh458/article/details/78935172\nhttps://www.cnblogs.com/lanpingwang/p/6596758.html\nhttps://www.cnblogs.com/Inspire-Yi/p/6230567.html\n\nhttps://www.jianshu.com/p/c82ef6babf8e\n\nhttps://www.cnblogs.com/caofangsheng/p/5715876.html\nhttps://blog.csdn.net/beglorious/article/details/39637475\n \nhttps://www.cnblogs.com/servicehot/p/6510199.html\n\n\n首先我觉得action的跳转大致可以这样归一下类，跳转到同一控制器内的action和不同控制器内的action、带有参数的action跳转和不带参数的action跳转。\n\n一、RedirectToAction(\"Index\");//一个参数时在本Controller下，不传入参数。\n\n二、RedirectToAction(ActionName,ControllerName) //可以直接跳到别的Controller.\n\n三、RedirectToRoute(new {controller=\"Home\",action=\"Index\"});//可跳到其他controller\n\n四、RedirectToRoute(new {controller=\"Home\",action=\"Index\"， id=param});//可跳到其他controller,带参数。\n\n五、Response.Redirect(\"Index?id=1\");//适用于本controller下的方法名称,可带参数。\n六、return Redirect(\"Index\");//适用于本controller下的方法名称。\n\n七、return View(\"Index\"); //直接显示对应的页面 不经过执行Controller的方法。 \n八、return View(\"~/Views/Home/Index.aspx\");//这种方法是写全路径,直接显示页面,不经过Controller方法\n九、return View();//直接显示页面,不经过Controller方法\n\n\nhttps://blog.csdn.net/zhensoft163/article/details/7174661?utm_source=blogxgwz1\n一般情况下我们返回的都是本页面，所以使用return View()就可以解决问题了，\n\n\nhttps://www.cnblogs.com/Cwj-XFH/p/5956142.html\nModel验证是ASP.NET MVC中的重要部分，它主要用于判断输入的数据类型及值是否符合我们设定的规则，这篇文章就介绍下ASP.NET MVC中Model验证的几种方式。\n\n\n后台验证\nDataAnnotation\nValidationAttribute\nIValidatableObject\nIDataErrorInfo\n前端验证\n\n\nViewData和ViewBag\n\nhttps://blog.csdn.net/pasic/article/details/7093802\n\nhttps://www.cnblogs.com/webapi/p/9505400.html\n\n\n系列文章：\nhttps://blog.csdn.net/ydm19891101/article/details/43338999\n\nWebForm与MVC的本质区别：请求的url不同\n\n\nhttps://blog.csdn.net/liupantao/article/details/78582078?locationNum=3&fps=1\n\n\n \nMVC action 返回javascriptResult 需要引入的文件是 \n需要引用这个文件 ：   jquery.unobtrusive-ajax.min.js \n\n同时 用javascrptResult  作为action的返回结果 的话 ，前台必须用ajax.BeginForm  \n\n\nhttps://www.cnblogs.com/zjf1987/p/ActionResult.html\n","slug":"C","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrpl000lck8hf3di75ld","content":"<p>双问号操作符意思是取所赋值??左边的，如果左边为null，取所赋值??右边的，双问号操作符意思是取所赋值??左边的，如果左边为null，取所赋值??右边的，</p>\n<p><a href=\"https://blog.csdn.net/zmh458/article/details/78935172\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zmh458/article/details/78935172</a><br>\n<a href=\"https://www.cnblogs.com/lanpingwang/p/6596758.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lanpingwang/p/6596758.html</a><br>\n<a href=\"https://www.cnblogs.com/Inspire-Yi/p/6230567.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Inspire-Yi/p/6230567.html</a></p>\n<p><a href=\"https://www.jianshu.com/p/c82ef6babf8e\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c82ef6babf8e</a></p>\n<p><a href=\"https://www.cnblogs.com/caofangsheng/p/5715876.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/caofangsheng/p/5715876.html</a><br>\n<a href=\"https://blog.csdn.net/beglorious/article/details/39637475\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/beglorious/article/details/39637475</a></p>\n<p><a href=\"https://www.cnblogs.com/servicehot/p/6510199.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/servicehot/p/6510199.html</a></p>\n<p>首先我觉得action的跳转大致可以这样归一下类，跳转到同一控制器内的action和不同控制器内的action、带有参数的action跳转和不带参数的action跳转。</p>\n<p>一、RedirectToAction(“Index”);//一个参数时在本Controller下，不传入参数。</p>\n<p>二、RedirectToAction(ActionName,ControllerName) //可以直接跳到别的Controller.</p>\n<p>三、RedirectToRoute(new {controller=“Home”,action=“Index”});//可跳到其他controller</p>\n<p>四、RedirectToRoute(new {controller=“Home”,action=“Index”， id=param});//可跳到其他controller,带参数。</p>\n<p>五、Response.Redirect(“Index?id=1”);//适用于本controller下的方法名称,可带参数。<br>\n六、return Redirect(“Index”);//适用于本controller下的方法名称。</p>\n<p>七、return View(“Index”); //直接显示对应的页面 不经过执行Controller的方法。<br>\n八、return View(&quot;~/Views/Home/Index.aspx&quot;);//这种方法是写全路径,直接显示页面,不经过Controller方法<br>\n九、return View();//直接显示页面,不经过Controller方法</p>\n<p><a href=\"https://blog.csdn.net/zhensoft163/article/details/7174661?utm_source=blogxgwz1\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zhensoft163/article/details/7174661?utm_source=blogxgwz1</a><br>\n一般情况下我们返回的都是本页面，所以使用return View()就可以解决问题了，</p>\n<p><a href=\"https://www.cnblogs.com/Cwj-XFH/p/5956142.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Cwj-XFH/p/5956142.html</a><br>\n<a href=\"http://xn--ModelASP-3i5qt911ag97a.NET\" target=\"_blank\" rel=\"noopener\">Model验证是ASP.NET</a> MVC中的重要部分，它主要用于判断输入的数据类型及值是否符合我们设定的规则，<a href=\"http://xn--ASP-y28d97a810d83ofj4bmybj3mnv4c.NET\" target=\"_blank\" rel=\"noopener\">这篇文章就介绍下ASP.NET</a> MVC中Model验证的几种方式。</p>\n<p>后台验证<br>\nDataAnnotation<br>\nValidationAttribute<br>\nIValidatableObject<br>\nIDataErrorInfo<br>\n前端验证</p>\n<p>ViewData和ViewBag</p>\n<p><a href=\"https://blog.csdn.net/pasic/article/details/7093802\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/pasic/article/details/7093802</a></p>\n<p><a href=\"https://www.cnblogs.com/webapi/p/9505400.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/webapi/p/9505400.html</a></p>\n<p>系列文章：<br>\n<a href=\"https://blog.csdn.net/ydm19891101/article/details/43338999\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ydm19891101/article/details/43338999</a></p>\n<p>WebForm与MVC的本质区别：请求的url不同</p>\n<p><a href=\"https://blog.csdn.net/liupantao/article/details/78582078?locationNum=3&amp;fps=1\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/liupantao/article/details/78582078?locationNum=3&amp;fps=1</a></p>\n<p>MVC action 返回javascriptResult 需要引入的文件是<br>\n需要引用这个文件 ：   jquery.unobtrusive-ajax.min.js</p>\n<p>同时 用javascrptResult  作为action的返回结果 的话 ，前台必须用ajax.BeginForm</p>\n<p><a href=\"https://www.cnblogs.com/zjf1987/p/ActionResult.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zjf1987/p/ActionResult.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>双问号操作符意思是取所赋值??左边的，如果左边为null，取所赋值??右边的，双问号操作符意思是取所赋值??左边的，如果左边为null，取所赋值??右边的，</p>\n<p><a href=\"https://blog.csdn.net/zmh458/article/details/78935172\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zmh458/article/details/78935172</a><br>\n<a href=\"https://www.cnblogs.com/lanpingwang/p/6596758.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lanpingwang/p/6596758.html</a><br>\n<a href=\"https://www.cnblogs.com/Inspire-Yi/p/6230567.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Inspire-Yi/p/6230567.html</a></p>\n<p><a href=\"https://www.jianshu.com/p/c82ef6babf8e\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c82ef6babf8e</a></p>\n<p><a href=\"https://www.cnblogs.com/caofangsheng/p/5715876.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/caofangsheng/p/5715876.html</a><br>\n<a href=\"https://blog.csdn.net/beglorious/article/details/39637475\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/beglorious/article/details/39637475</a></p>\n<p><a href=\"https://www.cnblogs.com/servicehot/p/6510199.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/servicehot/p/6510199.html</a></p>\n<p>首先我觉得action的跳转大致可以这样归一下类，跳转到同一控制器内的action和不同控制器内的action、带有参数的action跳转和不带参数的action跳转。</p>\n<p>一、RedirectToAction(“Index”);//一个参数时在本Controller下，不传入参数。</p>\n<p>二、RedirectToAction(ActionName,ControllerName) //可以直接跳到别的Controller.</p>\n<p>三、RedirectToRoute(new {controller=“Home”,action=“Index”});//可跳到其他controller</p>\n<p>四、RedirectToRoute(new {controller=“Home”,action=“Index”， id=param});//可跳到其他controller,带参数。</p>\n<p>五、Response.Redirect(“Index?id=1”);//适用于本controller下的方法名称,可带参数。<br>\n六、return Redirect(“Index”);//适用于本controller下的方法名称。</p>\n<p>七、return View(“Index”); //直接显示对应的页面 不经过执行Controller的方法。<br>\n八、return View(&quot;~/Views/Home/Index.aspx&quot;);//这种方法是写全路径,直接显示页面,不经过Controller方法<br>\n九、return View();//直接显示页面,不经过Controller方法</p>\n<p><a href=\"https://blog.csdn.net/zhensoft163/article/details/7174661?utm_source=blogxgwz1\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zhensoft163/article/details/7174661?utm_source=blogxgwz1</a><br>\n一般情况下我们返回的都是本页面，所以使用return View()就可以解决问题了，</p>\n<p><a href=\"https://www.cnblogs.com/Cwj-XFH/p/5956142.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Cwj-XFH/p/5956142.html</a><br>\n<a href=\"http://xn--ModelASP-3i5qt911ag97a.NET\" target=\"_blank\" rel=\"noopener\">Model验证是ASP.NET</a> MVC中的重要部分，它主要用于判断输入的数据类型及值是否符合我们设定的规则，<a href=\"http://xn--ASP-y28d97a810d83ofj4bmybj3mnv4c.NET\" target=\"_blank\" rel=\"noopener\">这篇文章就介绍下ASP.NET</a> MVC中Model验证的几种方式。</p>\n<p>后台验证<br>\nDataAnnotation<br>\nValidationAttribute<br>\nIValidatableObject<br>\nIDataErrorInfo<br>\n前端验证</p>\n<p>ViewData和ViewBag</p>\n<p><a href=\"https://blog.csdn.net/pasic/article/details/7093802\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/pasic/article/details/7093802</a></p>\n<p><a href=\"https://www.cnblogs.com/webapi/p/9505400.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/webapi/p/9505400.html</a></p>\n<p>系列文章：<br>\n<a href=\"https://blog.csdn.net/ydm19891101/article/details/43338999\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ydm19891101/article/details/43338999</a></p>\n<p>WebForm与MVC的本质区别：请求的url不同</p>\n<p><a href=\"https://blog.csdn.net/liupantao/article/details/78582078?locationNum=3&amp;fps=1\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/liupantao/article/details/78582078?locationNum=3&amp;fps=1</a></p>\n<p>MVC action 返回javascriptResult 需要引入的文件是<br>\n需要引用这个文件 ：   jquery.unobtrusive-ajax.min.js</p>\n<p>同时 用javascrptResult  作为action的返回结果 的话 ，前台必须用ajax.BeginForm</p>\n<p><a href=\"https://www.cnblogs.com/zjf1987/p/ActionResult.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zjf1987/p/ActionResult.html</a></p>\n"},{"title":"CommonJS规范&AMD&CMD","copyright":true,"comments":1,"toc":true,"date":"2018-10-26T07:41:00.000Z","password":null,"_content":"\n> 浏览器端的js和服务器端js都主要做了哪些事\n\n服务器端JS | 浏览器端JS\n---------- | ----------\n相同的代码需要多次执行|代码需要从一个服务器端分发到多个客户端执行\nCPU和内存资源是瓶颈|带宽是瓶颈\n加载时从磁盘中加载| 加载时需要通过网络加载\n\n> CommonJS是主要为了JS在==后端的表现制定==的，他是不适合前端的;AMD(异步模块定义)出现了，它就主要==为前端JS的表现制定规范==\n\n> CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。\n\n> AMD规范则是非同步加载模块，允许指定回调函数。\n\n>由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范\n\n[toc]\n\n# CommonJS\n> CommonJS规范: http://javascript.ruanyifeng.com/nodejs/module.html\n\n> CommonJS模块的特点如下:\n\n~~~\n所有代码都运行在模块作用域，不会污染全局作用域。\n模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。\n模块加载的顺序，按照其在代码中出现的顺序\n~~~\n\n> CommonJS是一种规范，NodeJS是这种规范的实现\n\n> JavaScript是一个强大面向对象语言，它有很多快速高效的解释器。官方JavaScript标准定义的API是为了构建基于浏览器的应用程序。然而，并没有定于一个用于更广泛的应用程序的标准库。\n\n> CommonJS API定义很多普通应用程序（主要指非浏览器的应用）使用的API，从而填补了这个空白。它的终极目标是提供一个类似Python，Ruby和Java标准库。这样的话，开发者可以使用CommonJS API编写==应用程序==，然后这些应用可以运行在不同的JavaScript解释器和不同的主机环境中。 \n\nCommonJS定义的模块分为:模块引用(require)；模块定义(exports)；模块标识(module) \n\n## require\n> require命令用于加载文件，后缀名默认为.js\n\n> 每个模块中有一个自由变量require，它是一个方法，这个方法接受一个参数，即模块的唯一ID。\n\n> CommonJS模块的加载机制是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值\n \n> require根据外部模块ID，返回该模块输出的API。如果外部模块被required的时候还没有执行完，require至少应改返回该模块的exports（另一个自由变量）。如果必需的模块不存在，require方法应该抛出一个异常。\n\n> require可以有一个main属性，属性值要么为undefined，要么等于module（另一个自由变量）;可以用来判断模块是直接执行，还是被调用执行。直接执行的时候（node module.js），require.main属性指向模块本身;调用执行的时候（通过require加载该脚本执行），==require.main === module== 返回false\n\n> require可以有一个paths属性，属性值为由路径字符串组成的数组，路径按优先级从高到低的顺序排列\n\n根据参数的不同格式，require命令去不同路径寻找模块文件\n~~~\n* 如果参数字符串以“/”开头，则表示加载的是一个位于绝对路径的模块文\n* 如果参数字符串以“./”开头，则表示加载的是一个位于相对路径的模块文件\n* 如果参数字符串不以“./“或”/“开头，则表示加载的是一个默认提供的核心模块或者一个位于各级node_modules目录的已安装模块\n* 如果参数字符串不以“./“或”/“开头，而且是一个路径如果参数字符串不以“./“或”/“开头，而且是一个路径，比如require('example-module/path/to/file')，则将先找到example-module的位置，然后再以它为参数，找到后续路径。\n* 如果指定的模块文件没有发现，Node会尝试为文件名添加.js、.json、.node后，再去搜索\n* 如果想得到require命令加载的确切文件名，使用require.resolve()方法\n~~~\n\n## exports\n每个模块中还有一个自由变量exports，它是一个对象，==模块对外输出的API就绑定在这个对象上==。而且==exports是模块对外输出API的唯一途径==。Node为每个模块提供一个exports变量，指向module.exports\n\n> 不能直接将exports变量指向一个值，因为这样等于切断了exports与module.exports的联系\n\n## module\nCommonJS规范规定，每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。==加载某个模块，其实是加载该模块的module.exports属性==\n\n> 每个模块中必须有一个自由变量module，它是对象。这个对象有一个id属性，表示该模块的id，同时应该是只读属性。\n\n> module对象可以有一个uri属性，表示这个模块被加载的来源。\n\n每个模块内部，都有一个module对象，代表当前模块。它有以下属性:\n~~~\nmodule.id 模块的识别符，通常是带有绝对路径的模块文件名。\nmodule.filename 模块的文件名，带有绝对路径。\nmodule.loaded 返回一个布尔值，表示模块是否已经完成加载。\nmodule.parent 返回一个对象，表示调用该模块的模块。\nmodule.children 返回一个数组，表示该模块要用到的其他模块。\nmodule.exports 表示模块对外输出的值\n~~~\n\n## 目录的加载规则\n> 通常，我们会把相关的文件会放在一个目录里面，便于组织。这时，最好为该目录设置一个入口文件，让require方法可以通过这个入口文件，加载整个目录\n\n> 在目录中放置一个package.json文件，并且将入口文件写入main字段\n\n> 如果package.json文件没有main字段，或者根本就没有package.json文件，则会加载该目录下的index.js文件或index.node文件\n\n## 模块的缓存\n> 第一次加载某个模块时，Node会缓存该模块。以后再加载该模块，就直接从缓存取出该模块的module.exports属性\n\n> 所有缓存的模块保存在require.cache之中，如果想删除模块的缓存，可以像下面这样写\n~~~\n// 删除指定模块的缓存\ndelete require.cache[moduleName];\n\n// 删除所有模块的缓存\nObject.keys(require.cache).forEach(function(key) {\n  delete require.cache[key];\n})\n~~~\n\n# AMD\n> AMD就只有一个接口：define(id?,dependencies?,factory);\n\n> RequireJS就是实现了AMD规范\n\n# CMD\n> 大名远扬的玉伯写了seajs，就是遵循他提出的CMD规范，与AMD蛮相近的，不过用起来感觉更加方便些，最重要的是中文版","source":"_posts/2018-10-26-CommonJS规范-AMD-CMD.md","raw":"---\ntitle: CommonJS规范&AMD&CMD\ntags:\n  - 前端规范 \ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-26 15:41:00\ncategories: 前端\npassword:\n---\n\n> 浏览器端的js和服务器端js都主要做了哪些事\n\n服务器端JS | 浏览器端JS\n---------- | ----------\n相同的代码需要多次执行|代码需要从一个服务器端分发到多个客户端执行\nCPU和内存资源是瓶颈|带宽是瓶颈\n加载时从磁盘中加载| 加载时需要通过网络加载\n\n> CommonJS是主要为了JS在==后端的表现制定==的，他是不适合前端的;AMD(异步模块定义)出现了，它就主要==为前端JS的表现制定规范==\n\n> CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。\n\n> AMD规范则是非同步加载模块，允许指定回调函数。\n\n>由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范\n\n[toc]\n\n# CommonJS\n> CommonJS规范: http://javascript.ruanyifeng.com/nodejs/module.html\n\n> CommonJS模块的特点如下:\n\n~~~\n所有代码都运行在模块作用域，不会污染全局作用域。\n模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。\n模块加载的顺序，按照其在代码中出现的顺序\n~~~\n\n> CommonJS是一种规范，NodeJS是这种规范的实现\n\n> JavaScript是一个强大面向对象语言，它有很多快速高效的解释器。官方JavaScript标准定义的API是为了构建基于浏览器的应用程序。然而，并没有定于一个用于更广泛的应用程序的标准库。\n\n> CommonJS API定义很多普通应用程序（主要指非浏览器的应用）使用的API，从而填补了这个空白。它的终极目标是提供一个类似Python，Ruby和Java标准库。这样的话，开发者可以使用CommonJS API编写==应用程序==，然后这些应用可以运行在不同的JavaScript解释器和不同的主机环境中。 \n\nCommonJS定义的模块分为:模块引用(require)；模块定义(exports)；模块标识(module) \n\n## require\n> require命令用于加载文件，后缀名默认为.js\n\n> 每个模块中有一个自由变量require，它是一个方法，这个方法接受一个参数，即模块的唯一ID。\n\n> CommonJS模块的加载机制是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值\n \n> require根据外部模块ID，返回该模块输出的API。如果外部模块被required的时候还没有执行完，require至少应改返回该模块的exports（另一个自由变量）。如果必需的模块不存在，require方法应该抛出一个异常。\n\n> require可以有一个main属性，属性值要么为undefined，要么等于module（另一个自由变量）;可以用来判断模块是直接执行，还是被调用执行。直接执行的时候（node module.js），require.main属性指向模块本身;调用执行的时候（通过require加载该脚本执行），==require.main === module== 返回false\n\n> require可以有一个paths属性，属性值为由路径字符串组成的数组，路径按优先级从高到低的顺序排列\n\n根据参数的不同格式，require命令去不同路径寻找模块文件\n~~~\n* 如果参数字符串以“/”开头，则表示加载的是一个位于绝对路径的模块文\n* 如果参数字符串以“./”开头，则表示加载的是一个位于相对路径的模块文件\n* 如果参数字符串不以“./“或”/“开头，则表示加载的是一个默认提供的核心模块或者一个位于各级node_modules目录的已安装模块\n* 如果参数字符串不以“./“或”/“开头，而且是一个路径如果参数字符串不以“./“或”/“开头，而且是一个路径，比如require('example-module/path/to/file')，则将先找到example-module的位置，然后再以它为参数，找到后续路径。\n* 如果指定的模块文件没有发现，Node会尝试为文件名添加.js、.json、.node后，再去搜索\n* 如果想得到require命令加载的确切文件名，使用require.resolve()方法\n~~~\n\n## exports\n每个模块中还有一个自由变量exports，它是一个对象，==模块对外输出的API就绑定在这个对象上==。而且==exports是模块对外输出API的唯一途径==。Node为每个模块提供一个exports变量，指向module.exports\n\n> 不能直接将exports变量指向一个值，因为这样等于切断了exports与module.exports的联系\n\n## module\nCommonJS规范规定，每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。==加载某个模块，其实是加载该模块的module.exports属性==\n\n> 每个模块中必须有一个自由变量module，它是对象。这个对象有一个id属性，表示该模块的id，同时应该是只读属性。\n\n> module对象可以有一个uri属性，表示这个模块被加载的来源。\n\n每个模块内部，都有一个module对象，代表当前模块。它有以下属性:\n~~~\nmodule.id 模块的识别符，通常是带有绝对路径的模块文件名。\nmodule.filename 模块的文件名，带有绝对路径。\nmodule.loaded 返回一个布尔值，表示模块是否已经完成加载。\nmodule.parent 返回一个对象，表示调用该模块的模块。\nmodule.children 返回一个数组，表示该模块要用到的其他模块。\nmodule.exports 表示模块对外输出的值\n~~~\n\n## 目录的加载规则\n> 通常，我们会把相关的文件会放在一个目录里面，便于组织。这时，最好为该目录设置一个入口文件，让require方法可以通过这个入口文件，加载整个目录\n\n> 在目录中放置一个package.json文件，并且将入口文件写入main字段\n\n> 如果package.json文件没有main字段，或者根本就没有package.json文件，则会加载该目录下的index.js文件或index.node文件\n\n## 模块的缓存\n> 第一次加载某个模块时，Node会缓存该模块。以后再加载该模块，就直接从缓存取出该模块的module.exports属性\n\n> 所有缓存的模块保存在require.cache之中，如果想删除模块的缓存，可以像下面这样写\n~~~\n// 删除指定模块的缓存\ndelete require.cache[moduleName];\n\n// 删除所有模块的缓存\nObject.keys(require.cache).forEach(function(key) {\n  delete require.cache[key];\n})\n~~~\n\n# AMD\n> AMD就只有一个接口：define(id?,dependencies?,factory);\n\n> RequireJS就是实现了AMD规范\n\n# CMD\n> 大名远扬的玉伯写了seajs，就是遵循他提出的CMD规范，与AMD蛮相近的，不过用起来感觉更加方便些，最重要的是中文版","slug":"CommonJS规范-AMD-CMD","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrpp000pck8hophkm8u5","content":"<blockquote>\n<p>浏览器端的js和服务器端js都主要做了哪些事</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>服务器端JS</th>\n<th>浏览器端JS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>相同的代码需要多次执行</td>\n<td>代码需要从一个服务器端分发到多个客户端执行</td>\n</tr>\n<tr>\n<td>CPU和内存资源是瓶颈</td>\n<td>带宽是瓶颈</td>\n</tr>\n<tr>\n<td>加载时从磁盘中加载</td>\n<td>加载时需要通过网络加载</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>CommonJS是主要为了JS在==后端的表现制定==的，他是不适合前端的;AMD(异步模块定义)出现了，它就主要==为前端JS的表现制定规范==</p>\n</blockquote>\n<blockquote>\n<p>CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。</p>\n</blockquote>\n<blockquote>\n<p>AMD规范则是非同步加载模块，允许指定回调函数。</p>\n</blockquote>\n<blockquote>\n<p>由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范</p>\n</blockquote>\n<p>[toc]</p>\n<h1 id=\"commonjs\"><a class=\"markdownIt-Anchor\" href=\"#commonjs\"></a> CommonJS</h1>\n<blockquote>\n<p>CommonJS规范: <a href=\"http://javascript.ruanyifeng.com/nodejs/module.html\" target=\"_blank\" rel=\"noopener\">http://javascript.ruanyifeng.com/nodejs/module.html</a></p>\n</blockquote>\n<blockquote>\n<p>CommonJS模块的特点如下:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有代码都运行在模块作用域，不会污染全局作用域。</span><br><span class=\"line\">模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。</span><br><span class=\"line\">模块加载的顺序，按照其在代码中出现的顺序</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>CommonJS是一种规范，NodeJS是这种规范的实现</p>\n</blockquote>\n<blockquote>\n<p>JavaScript是一个强大面向对象语言，它有很多快速高效的解释器。官方JavaScript标准定义的API是为了构建基于浏览器的应用程序。然而，并没有定于一个用于更广泛的应用程序的标准库。</p>\n</blockquote>\n<blockquote>\n<p>CommonJS API定义很多普通应用程序（主要指非浏览器的应用）使用的API，从而填补了这个空白。它的终极目标是提供一个类似Python，Ruby和Java标准库。这样的话，开发者可以使用CommonJS API编写==应用程序==，然后这些应用可以运行在不同的JavaScript解释器和不同的主机环境中。</p>\n</blockquote>\n<p>CommonJS定义的模块分为:模块引用(require)；模块定义(exports)；模块标识(module)</p>\n<h2 id=\"require\"><a class=\"markdownIt-Anchor\" href=\"#require\"></a> require</h2>\n<blockquote>\n<p>require命令用于加载文件，后缀名默认为.js</p>\n</blockquote>\n<blockquote>\n<p>每个模块中有一个自由变量require，它是一个方法，这个方法接受一个参数，即模块的唯一ID。</p>\n</blockquote>\n<blockquote>\n<p>CommonJS模块的加载机制是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值</p>\n</blockquote>\n<blockquote>\n<p>require根据外部模块ID，返回该模块输出的API。如果外部模块被required的时候还没有执行完，require至少应改返回该模块的exports（另一个自由变量）。如果必需的模块不存在，require方法应该抛出一个异常。</p>\n</blockquote>\n<blockquote>\n<p>require可以有一个main属性，属性值要么为undefined，要么等于module（另一个自由变量）;可以用来判断模块是直接执行，还是被调用执行。直接执行的时候（node module.js），require.main属性指向模块本身;调用执行的时候（通过require加载该脚本执行），==require.main === module== 返回false</p>\n</blockquote>\n<blockquote>\n<p>require可以有一个paths属性，属性值为由路径字符串组成的数组，路径按优先级从高到低的顺序排列</p>\n</blockquote>\n<p>根据参数的不同格式，require命令去不同路径寻找模块文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 如果参数字符串以“/”开头，则表示加载的是一个位于绝对路径的模块文</span><br><span class=\"line\">* 如果参数字符串以“./”开头，则表示加载的是一个位于相对路径的模块文件</span><br><span class=\"line\">* 如果参数字符串不以“./“或”/“开头，则表示加载的是一个默认提供的核心模块或者一个位于各级node_modules目录的已安装模块</span><br><span class=\"line\">* 如果参数字符串不以“./“或”/“开头，而且是一个路径如果参数字符串不以“./“或”/“开头，而且是一个路径，比如require(&apos;example-module/path/to/file&apos;)，则将先找到example-module的位置，然后再以它为参数，找到后续路径。</span><br><span class=\"line\">* 如果指定的模块文件没有发现，Node会尝试为文件名添加.js、.json、.node后，再去搜索</span><br><span class=\"line\">* 如果想得到require命令加载的确切文件名，使用require.resolve()方法</span><br></pre></td></tr></table></figure>\n<h2 id=\"exports\"><a class=\"markdownIt-Anchor\" href=\"#exports\"></a> exports</h2>\n<p>每个模块中还有一个自由变量exports，它是一个对象，==模块对外输出的API就绑定在这个对象上==。而且==exports是模块对外输出API的唯一途径==。Node为每个模块提供一个exports变量，指向module.exports</p>\n<blockquote>\n<p>不能直接将exports变量指向一个值，因为这样等于切断了exports与module.exports的联系</p>\n</blockquote>\n<h2 id=\"module\"><a class=\"markdownIt-Anchor\" href=\"#module\"></a> module</h2>\n<p>CommonJS规范规定，每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。==加载某个模块，其实是加载该模块的module.exports属性==</p>\n<blockquote>\n<p>每个模块中必须有一个自由变量module，它是对象。这个对象有一个id属性，表示该模块的id，同时应该是只读属性。</p>\n</blockquote>\n<blockquote>\n<p>module对象可以有一个uri属性，表示这个模块被加载的来源。</p>\n</blockquote>\n<p>每个模块内部，都有一个module对象，代表当前模块。它有以下属性:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.id 模块的识别符，通常是带有绝对路径的模块文件名。</span><br><span class=\"line\">module.filename 模块的文件名，带有绝对路径。</span><br><span class=\"line\">module.loaded 返回一个布尔值，表示模块是否已经完成加载。</span><br><span class=\"line\">module.parent 返回一个对象，表示调用该模块的模块。</span><br><span class=\"line\">module.children 返回一个数组，表示该模块要用到的其他模块。</span><br><span class=\"line\">module.exports 表示模块对外输出的值</span><br></pre></td></tr></table></figure>\n<h2 id=\"目录的加载规则\"><a class=\"markdownIt-Anchor\" href=\"#目录的加载规则\"></a> 目录的加载规则</h2>\n<blockquote>\n<p>通常，我们会把相关的文件会放在一个目录里面，便于组织。这时，最好为该目录设置一个入口文件，让require方法可以通过这个入口文件，加载整个目录</p>\n</blockquote>\n<blockquote>\n<p>在目录中放置一个package.json文件，并且将入口文件写入main字段</p>\n</blockquote>\n<blockquote>\n<p>如果package.json文件没有main字段，或者根本就没有package.json文件，则会加载该目录下的index.js文件或index.node文件</p>\n</blockquote>\n<h2 id=\"模块的缓存\"><a class=\"markdownIt-Anchor\" href=\"#模块的缓存\"></a> 模块的缓存</h2>\n<blockquote>\n<p>第一次加载某个模块时，Node会缓存该模块。以后再加载该模块，就直接从缓存取出该模块的module.exports属性</p>\n</blockquote>\n<blockquote>\n<p>所有缓存的模块保存在require.cache之中，如果想删除模块的缓存，可以像下面这样写</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 删除指定模块的缓存</span><br><span class=\"line\">delete require.cache[moduleName];</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除所有模块的缓存</span><br><span class=\"line\">Object.keys(require.cache).forEach(function(key) &#123;</span><br><span class=\"line\">  delete require.cache[key];</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"amd\"><a class=\"markdownIt-Anchor\" href=\"#amd\"></a> AMD</h1>\n<blockquote>\n<p>AMD就只有一个接口：define(id?,dependencies?,factory);</p>\n</blockquote>\n<blockquote>\n<p>RequireJS就是实现了AMD规范</p>\n</blockquote>\n<h1 id=\"cmd\"><a class=\"markdownIt-Anchor\" href=\"#cmd\"></a> CMD</h1>\n<blockquote>\n<p>大名远扬的玉伯写了seajs，就是遵循他提出的CMD规范，与AMD蛮相近的，不过用起来感觉更加方便些，最重要的是中文版</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>浏览器端的js和服务器端js都主要做了哪些事</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>服务器端JS</th>\n<th>浏览器端JS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>相同的代码需要多次执行</td>\n<td>代码需要从一个服务器端分发到多个客户端执行</td>\n</tr>\n<tr>\n<td>CPU和内存资源是瓶颈</td>\n<td>带宽是瓶颈</td>\n</tr>\n<tr>\n<td>加载时从磁盘中加载</td>\n<td>加载时需要通过网络加载</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>CommonJS是主要为了JS在==后端的表现制定==的，他是不适合前端的;AMD(异步模块定义)出现了，它就主要==为前端JS的表现制定规范==</p>\n</blockquote>\n<blockquote>\n<p>CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。</p>\n</blockquote>\n<blockquote>\n<p>AMD规范则是非同步加载模块，允许指定回调函数。</p>\n</blockquote>\n<blockquote>\n<p>由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范</p>\n</blockquote>\n<p>[toc]</p>\n<h1 id=\"commonjs\"><a class=\"markdownIt-Anchor\" href=\"#commonjs\"></a> CommonJS</h1>\n<blockquote>\n<p>CommonJS规范: <a href=\"http://javascript.ruanyifeng.com/nodejs/module.html\" target=\"_blank\" rel=\"noopener\">http://javascript.ruanyifeng.com/nodejs/module.html</a></p>\n</blockquote>\n<blockquote>\n<p>CommonJS模块的特点如下:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有代码都运行在模块作用域，不会污染全局作用域。</span><br><span class=\"line\">模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。</span><br><span class=\"line\">模块加载的顺序，按照其在代码中出现的顺序</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>CommonJS是一种规范，NodeJS是这种规范的实现</p>\n</blockquote>\n<blockquote>\n<p>JavaScript是一个强大面向对象语言，它有很多快速高效的解释器。官方JavaScript标准定义的API是为了构建基于浏览器的应用程序。然而，并没有定于一个用于更广泛的应用程序的标准库。</p>\n</blockquote>\n<blockquote>\n<p>CommonJS API定义很多普通应用程序（主要指非浏览器的应用）使用的API，从而填补了这个空白。它的终极目标是提供一个类似Python，Ruby和Java标准库。这样的话，开发者可以使用CommonJS API编写==应用程序==，然后这些应用可以运行在不同的JavaScript解释器和不同的主机环境中。</p>\n</blockquote>\n<p>CommonJS定义的模块分为:模块引用(require)；模块定义(exports)；模块标识(module)</p>\n<h2 id=\"require\"><a class=\"markdownIt-Anchor\" href=\"#require\"></a> require</h2>\n<blockquote>\n<p>require命令用于加载文件，后缀名默认为.js</p>\n</blockquote>\n<blockquote>\n<p>每个模块中有一个自由变量require，它是一个方法，这个方法接受一个参数，即模块的唯一ID。</p>\n</blockquote>\n<blockquote>\n<p>CommonJS模块的加载机制是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值</p>\n</blockquote>\n<blockquote>\n<p>require根据外部模块ID，返回该模块输出的API。如果外部模块被required的时候还没有执行完，require至少应改返回该模块的exports（另一个自由变量）。如果必需的模块不存在，require方法应该抛出一个异常。</p>\n</blockquote>\n<blockquote>\n<p>require可以有一个main属性，属性值要么为undefined，要么等于module（另一个自由变量）;可以用来判断模块是直接执行，还是被调用执行。直接执行的时候（node module.js），require.main属性指向模块本身;调用执行的时候（通过require加载该脚本执行），==require.main === module== 返回false</p>\n</blockquote>\n<blockquote>\n<p>require可以有一个paths属性，属性值为由路径字符串组成的数组，路径按优先级从高到低的顺序排列</p>\n</blockquote>\n<p>根据参数的不同格式，require命令去不同路径寻找模块文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 如果参数字符串以“/”开头，则表示加载的是一个位于绝对路径的模块文</span><br><span class=\"line\">* 如果参数字符串以“./”开头，则表示加载的是一个位于相对路径的模块文件</span><br><span class=\"line\">* 如果参数字符串不以“./“或”/“开头，则表示加载的是一个默认提供的核心模块或者一个位于各级node_modules目录的已安装模块</span><br><span class=\"line\">* 如果参数字符串不以“./“或”/“开头，而且是一个路径如果参数字符串不以“./“或”/“开头，而且是一个路径，比如require(&apos;example-module/path/to/file&apos;)，则将先找到example-module的位置，然后再以它为参数，找到后续路径。</span><br><span class=\"line\">* 如果指定的模块文件没有发现，Node会尝试为文件名添加.js、.json、.node后，再去搜索</span><br><span class=\"line\">* 如果想得到require命令加载的确切文件名，使用require.resolve()方法</span><br></pre></td></tr></table></figure>\n<h2 id=\"exports\"><a class=\"markdownIt-Anchor\" href=\"#exports\"></a> exports</h2>\n<p>每个模块中还有一个自由变量exports，它是一个对象，==模块对外输出的API就绑定在这个对象上==。而且==exports是模块对外输出API的唯一途径==。Node为每个模块提供一个exports变量，指向module.exports</p>\n<blockquote>\n<p>不能直接将exports变量指向一个值，因为这样等于切断了exports与module.exports的联系</p>\n</blockquote>\n<h2 id=\"module\"><a class=\"markdownIt-Anchor\" href=\"#module\"></a> module</h2>\n<p>CommonJS规范规定，每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。==加载某个模块，其实是加载该模块的module.exports属性==</p>\n<blockquote>\n<p>每个模块中必须有一个自由变量module，它是对象。这个对象有一个id属性，表示该模块的id，同时应该是只读属性。</p>\n</blockquote>\n<blockquote>\n<p>module对象可以有一个uri属性，表示这个模块被加载的来源。</p>\n</blockquote>\n<p>每个模块内部，都有一个module对象，代表当前模块。它有以下属性:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.id 模块的识别符，通常是带有绝对路径的模块文件名。</span><br><span class=\"line\">module.filename 模块的文件名，带有绝对路径。</span><br><span class=\"line\">module.loaded 返回一个布尔值，表示模块是否已经完成加载。</span><br><span class=\"line\">module.parent 返回一个对象，表示调用该模块的模块。</span><br><span class=\"line\">module.children 返回一个数组，表示该模块要用到的其他模块。</span><br><span class=\"line\">module.exports 表示模块对外输出的值</span><br></pre></td></tr></table></figure>\n<h2 id=\"目录的加载规则\"><a class=\"markdownIt-Anchor\" href=\"#目录的加载规则\"></a> 目录的加载规则</h2>\n<blockquote>\n<p>通常，我们会把相关的文件会放在一个目录里面，便于组织。这时，最好为该目录设置一个入口文件，让require方法可以通过这个入口文件，加载整个目录</p>\n</blockquote>\n<blockquote>\n<p>在目录中放置一个package.json文件，并且将入口文件写入main字段</p>\n</blockquote>\n<blockquote>\n<p>如果package.json文件没有main字段，或者根本就没有package.json文件，则会加载该目录下的index.js文件或index.node文件</p>\n</blockquote>\n<h2 id=\"模块的缓存\"><a class=\"markdownIt-Anchor\" href=\"#模块的缓存\"></a> 模块的缓存</h2>\n<blockquote>\n<p>第一次加载某个模块时，Node会缓存该模块。以后再加载该模块，就直接从缓存取出该模块的module.exports属性</p>\n</blockquote>\n<blockquote>\n<p>所有缓存的模块保存在require.cache之中，如果想删除模块的缓存，可以像下面这样写</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 删除指定模块的缓存</span><br><span class=\"line\">delete require.cache[moduleName];</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除所有模块的缓存</span><br><span class=\"line\">Object.keys(require.cache).forEach(function(key) &#123;</span><br><span class=\"line\">  delete require.cache[key];</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"amd\"><a class=\"markdownIt-Anchor\" href=\"#amd\"></a> AMD</h1>\n<blockquote>\n<p>AMD就只有一个接口：define(id?,dependencies?,factory);</p>\n</blockquote>\n<blockquote>\n<p>RequireJS就是实现了AMD规范</p>\n</blockquote>\n<h1 id=\"cmd\"><a class=\"markdownIt-Anchor\" href=\"#cmd\"></a> CMD</h1>\n<blockquote>\n<p>大名远扬的玉伯写了seajs，就是遵循他提出的CMD规范，与AMD蛮相近的，不过用起来感觉更加方便些，最重要的是中文版</p>\n</blockquote>\n"},{"title":"Jest","copyright":true,"comments":1,"toc":true,"date":"2018-10-26T07:27:45.000Z","password":null,"_content":"\n# 简介\nJest是一个JS的单元测试工具\n\n单元测试可以保证函数或者模块完成我们想要的功能，测试具体功能是否正常\n\n使用Jest需要配置NodeJS环境\n\n# 入门\n1. npm install jest-cli\n2. sum.js\n~~~\nfunction sum(a,b){\n    return a+b;\n}\nmodule.exports=sum;\n~~~\n3. test.js\n~~~\njest.dontMock('../sum');\n\ndescribe('sum',function(){\n    it('adds 1 + 2 to equal 3',function(){\n        var sum = require('../sum');\n        expect(sum(1,2)).toBe(3);\n    });\n});\n~~~","source":"_posts/2018-10-26-Jest.md","raw":"---\ntitle: Jest\ntags:\n  - React\n  - React组件库\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-26 15:27:45\ncategories: React\npassword:\n---\n\n# 简介\nJest是一个JS的单元测试工具\n\n单元测试可以保证函数或者模块完成我们想要的功能，测试具体功能是否正常\n\n使用Jest需要配置NodeJS环境\n\n# 入门\n1. npm install jest-cli\n2. sum.js\n~~~\nfunction sum(a,b){\n    return a+b;\n}\nmodule.exports=sum;\n~~~\n3. test.js\n~~~\njest.dontMock('../sum');\n\ndescribe('sum',function(){\n    it('adds 1 + 2 to equal 3',function(){\n        var sum = require('../sum');\n        expect(sum(1,2)).toBe(3);\n    });\n});\n~~~","slug":"Jest","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrpu000sck8hlt8lxwx1","content":"<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<p>Jest是一个JS的单元测试工具</p>\n<p>单元测试可以保证函数或者模块完成我们想要的功能，测试具体功能是否正常</p>\n<p>使用Jest需要配置NodeJS环境</p>\n<h1 id=\"入门\"><a class=\"markdownIt-Anchor\" href=\"#入门\"></a> 入门</h1>\n<ol>\n<li>npm install jest-cli</li>\n<li>sum.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(a,b)&#123;</span><br><span class=\"line\">    return a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports=sum;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jest.dontMock(&apos;../sum&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(&apos;sum&apos;,function()&#123;</span><br><span class=\"line\">    it(&apos;adds 1 + 2 to equal 3&apos;,function()&#123;</span><br><span class=\"line\">        var sum = require(&apos;../sum&apos;);</span><br><span class=\"line\">        expect(sum(1,2)).toBe(3);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<p>Jest是一个JS的单元测试工具</p>\n<p>单元测试可以保证函数或者模块完成我们想要的功能，测试具体功能是否正常</p>\n<p>使用Jest需要配置NodeJS环境</p>\n<h1 id=\"入门\"><a class=\"markdownIt-Anchor\" href=\"#入门\"></a> 入门</h1>\n<ol>\n<li>npm install jest-cli</li>\n<li>sum.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(a,b)&#123;</span><br><span class=\"line\">    return a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports=sum;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jest.dontMock(&apos;../sum&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(&apos;sum&apos;,function()&#123;</span><br><span class=\"line\">    it(&apos;adds 1 + 2 to equal 3&apos;,function()&#123;</span><br><span class=\"line\">        var sum = require(&apos;../sum&apos;);</span><br><span class=\"line\">        expect(sum(1,2)).toBe(3);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"ECMAScript规范","copyright":true,"comments":1,"toc":true,"date":"2018-10-26T08:04:30.000Z","password":null,"_content":"> ECMAScript 6（简称ES6）是JavaScript语言的下一代标准，于2015年6月正式发布，也称ECMAScript 2015。\n\n~~~\n参考资料\n《ECMAScript 6 入门》： http://es6.ruanyifeng.com/\n~~~\n\nECMA是标准，js是实现\n\n[toc]\n\n### 历史\n* 1996    ES1.0   js稳定，Netscapte将js提交给ECMA组织，ES正式出现\n* 1998  ES2.0   ES2.0正式发布\n* 1999  ES3.0   ES3被浏览器广泛支持\n* 2007  ES4.0   ES4过于激进，被废除了\n* 2008  ES3.1   4.0退化为严重缩水版3.1，代号Harmony（和谐）\n* 2009  ES5.0   ES5正式发布了，公布了JS.next，即后来的ES6.0\n* 2011  ES5.1   ES5.1成为了ISO国际标准\n* 2013.3  ES6.0   制定草案\n* 2013.12   ES6.0   ES6.0草案发布\n* 2015.6    ES6.0   ES6.0预计发布正式版，同时JS.next指向ES7.0\n\n### 兼容性\n> 目前ES5、ES6支持还可以，凑合；ES5、ES6逐渐沦为后台语言\n\n> 在浏览器中使用需要用到编译工具，babel／traceur（由google出的编译器，把ES6语法编译成ES5）\n\n### 使用的三种方式\n1. 网页内直接使用\n~~~\n<script src=\"traceur.js\"></script>\n<script src=\"bootstrap.js\"></script>\n<script type=\"module\">\n    //此出写ES6代码\n</script>\n~~~\n2. 直接在线编译（主要用于测试） \n* http://babeljs.io/repl/\n* https://google.github.io/traceur-compiler/demo/repl.html\n3. 直接在node中使用\n* 直接用，需添加‘use strict’\n~~~ \n//test.js\n'use strict'\nlet a=2;\nconsole.log(a);\n~~~\nnode test.js\n* node --harmony_desctructuring test.js \n\n### 新增功能\n####  定义变量 let \n* let定义的变量只能在代码块中使用，具备块级作用域；var具备函数级作用域；\n* 块级作用域其实就是匿名函数立即调用\n* 变量不能重复定义\n* 可用于封闭空间;封闭空间可解决i问题\n以前：\n    (function(i){\n        var a=12; \n    })(i);\n现在：\n    {\n        let  a=12;\n    }\n#### 定义常量 const\n定义后则不能修改\n\n#### 字符串连接\n==反单引号==：==``==,内容模版,==${变量名}填充模版==\n#### 解构赋值\n\n* var [a,b,c]=[12,5,101];解析结构，给a、b、c都赋值；\n* json格式（通过名称匹配，与顺序无关）也支持\n* ==模式匹配==：var [a,[b,c],d] =[12,[3,2],101],左侧的样子需要和右侧一样\n* 可==以给默认值==。var {time=12,date} ={data=123}\n    \n#### 复制数组\n数组赋值为引用赋值，复制以前用for循环🔥 Array.from()函数，现在使用==超引用'...'==, var arr2 = [...arr1]; 在函数中通过 ...args 接收多个参数\n#### 循环 \n以前是for或for in，现在：for of，支持数组、json、map\n~~~\n//i表示数组或者json的值，for in中i是下标，for of中表示key+value，实质是jsonObj.entrys(),类似的还有jsonObj.keys()、jsonObj.values()\nfor(var i of arr){\n    console.log(i);\n}\n~~~\n#### map操作  \nget()\\set()\\delete()\n#### 箭头函数  => \n**注意事项**\n* this问题  //this指向了window对象\n* arguments不能使用，箭头函数没有自己的 arguments\n~~~\nfunction foo() { \n  var f = (...args) => args[0]; \n  return f(2); \n}\n\nfoo(1); // 2\n~~~\n\n更多：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\n\n#### 对象语法简洁化\n~~~\n//以前\nvar person={\n    name:'abc',\n    age:100,\n    showName:function(){\n        alert(this.name);       //this有问题\n    }\n}\n\n//ES6\nvar name='abc';\nvar age =100;\nvar person={\n    name,\n    age,\n    showName(){\n        alert(this.name);\n    }\n}\n~~~\n\n#### 面向对象\n~~~\n//以前面向对象\nfunction Person(name,age){  //类和构造函数一体\n    this.name = name;\n    this.age = age;\n}\nPerson.prototype.showName=function(){\n    return this.name;\n}\nvar p1 = new Person('abc',100);\nalert(p1.name);\n~~~\n\n~~~\n//ES6面向对象\nclass Person{\n    constructor(name='defalut',age=0){  //此处可以设置默认值，这是函数的功能，即：函数参数可以给默认值\n        this.name = name;\n        this.age = age;\n    }\n    showName(){\n        return this.name;\n    }\n}\n\nvar p1 = new Person('abc',100);\nalert(p1.name);     \nalert(p1.showName());\n~~~\n\n继承\n~~~\n//以前  子类.prototype = new 父类();\nfunction Worker(name,age){\n    Person.apply(this,arguments);\n}\nWorker.prototype=new Person();\n\n//ES6\nclass Woker extends Person{\n    constructor(){\n        super();    //调用父级构造\n    }\n}\n~~~\n\n#### ES5:  this.bind();\n\n#### 模块化\n> 当前使用模块化必须引入traceur和bootstrap，type必须写成module\n\n~~~\n//定义\nexport default {a,b}\n//引用\nimport modA from './a.js';\n//使用\nvar sum = modA.a + modA.b\n~~~\n\n#### Promise\n> 本身为一个对象，用来传递异步操作的数据\n\n> 整体是链式操作\n\n~~~\npending(等待、处理中)  ---> Resolve（完成）   \n                     ---> Reject  (拒绝)\n~~~\n使用\n~~~\nvar p1 = new Promise(function(resolve,reject){\n    if(异步处理成功了)\n        resolve(成功数据)\n    else\n        reject(失败原因)\n});\n~~~\n包含方法如下：\n~~~\n所有方法都支持链式编程\n*  then(成功(resolve数据),失败（reject数据）)  //此方法可以防止异步编程括号深度太多的的问题\n*  catch（function（e）{}）；    // 用来捕获错误\n*  all[p1,p2,p3....]  //用于将多个promise对象组合／包装成一个全新的promise对象,数组中的Promise又一个错误则按错误流程走，所有都成功则按成功流程走\n*  Promise.race([p1,p2....]).then(function(value){}); //返回最先执行的Promise的结果\n*  Promise.reject()         //生成错误的Promise\n*  Promise.resolve()        //生成成功的Promise\n~~~\n\n#### Generator+yield\n> Generator:生成器，是一个函数，可以遍历\n \n* Generator函数名字前有*\n* Generator函数内部使用yield语句\n~~~\n//普通函数\nfunction show(){\n    \n}\n//generator函数\nfunction* show(){\n    yield “Hello”；\n    yield \"World\";\n}\n//generator函数\n*show(){\n    yield “Hello”；\n    yield \"World\";\n}\n\nvar res=show();\nconsole.log(res.next());  //{value:\"Hello\",done:false}\nconsole.log(res.next());  //{value:\"World\",done:false}\nconsole.log(res.next());  //{value:\"undefined\",done:true}\n~~~ \n* Generator函数调用后的对象有next方法\n* next方法每次返回一个value和done结果，value位yield后面的值，done代表是否遍历结束\n* yield语句本身没有返回值或每次返回undefined\n* next可以带参数，所带参数给了上一个yield\n* for ...of循环支持Generator函数\n~~~\nfor (let v of show()){\n        document.write(v);\n}\n~~~\n\n#### 展开运算符\n 扩展语法允许一个表达式在期望多个参数（用于函数调用）或多个元素（用于数组文本）或多个变量（用于解构赋值）的位置扩展\n1. 用于函数调用\n~~~\nmyFunction(...iterableObj);\n~~~\n2. 用于数组字面量\n~~~\n[...iterableObj, 4, 5, 6]\n~~~\n\nECMA-262文档下载：https://chetaofeng.github.io/pub-images/Ecma-262.pdf","source":"_posts/2018-10-26-ECMAScript规范.md","raw":"---\ntitle: ECMAScript规范\ntags:\n  - 前端规范 \ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-26 16:04:30\ncategories: 前端\npassword:\n---\n> ECMAScript 6（简称ES6）是JavaScript语言的下一代标准，于2015年6月正式发布，也称ECMAScript 2015。\n\n~~~\n参考资料\n《ECMAScript 6 入门》： http://es6.ruanyifeng.com/\n~~~\n\nECMA是标准，js是实现\n\n[toc]\n\n### 历史\n* 1996    ES1.0   js稳定，Netscapte将js提交给ECMA组织，ES正式出现\n* 1998  ES2.0   ES2.0正式发布\n* 1999  ES3.0   ES3被浏览器广泛支持\n* 2007  ES4.0   ES4过于激进，被废除了\n* 2008  ES3.1   4.0退化为严重缩水版3.1，代号Harmony（和谐）\n* 2009  ES5.0   ES5正式发布了，公布了JS.next，即后来的ES6.0\n* 2011  ES5.1   ES5.1成为了ISO国际标准\n* 2013.3  ES6.0   制定草案\n* 2013.12   ES6.0   ES6.0草案发布\n* 2015.6    ES6.0   ES6.0预计发布正式版，同时JS.next指向ES7.0\n\n### 兼容性\n> 目前ES5、ES6支持还可以，凑合；ES5、ES6逐渐沦为后台语言\n\n> 在浏览器中使用需要用到编译工具，babel／traceur（由google出的编译器，把ES6语法编译成ES5）\n\n### 使用的三种方式\n1. 网页内直接使用\n~~~\n<script src=\"traceur.js\"></script>\n<script src=\"bootstrap.js\"></script>\n<script type=\"module\">\n    //此出写ES6代码\n</script>\n~~~\n2. 直接在线编译（主要用于测试） \n* http://babeljs.io/repl/\n* https://google.github.io/traceur-compiler/demo/repl.html\n3. 直接在node中使用\n* 直接用，需添加‘use strict’\n~~~ \n//test.js\n'use strict'\nlet a=2;\nconsole.log(a);\n~~~\nnode test.js\n* node --harmony_desctructuring test.js \n\n### 新增功能\n####  定义变量 let \n* let定义的变量只能在代码块中使用，具备块级作用域；var具备函数级作用域；\n* 块级作用域其实就是匿名函数立即调用\n* 变量不能重复定义\n* 可用于封闭空间;封闭空间可解决i问题\n以前：\n    (function(i){\n        var a=12; \n    })(i);\n现在：\n    {\n        let  a=12;\n    }\n#### 定义常量 const\n定义后则不能修改\n\n#### 字符串连接\n==反单引号==：==``==,内容模版,==${变量名}填充模版==\n#### 解构赋值\n\n* var [a,b,c]=[12,5,101];解析结构，给a、b、c都赋值；\n* json格式（通过名称匹配，与顺序无关）也支持\n* ==模式匹配==：var [a,[b,c],d] =[12,[3,2],101],左侧的样子需要和右侧一样\n* 可==以给默认值==。var {time=12,date} ={data=123}\n    \n#### 复制数组\n数组赋值为引用赋值，复制以前用for循环🔥 Array.from()函数，现在使用==超引用'...'==, var arr2 = [...arr1]; 在函数中通过 ...args 接收多个参数\n#### 循环 \n以前是for或for in，现在：for of，支持数组、json、map\n~~~\n//i表示数组或者json的值，for in中i是下标，for of中表示key+value，实质是jsonObj.entrys(),类似的还有jsonObj.keys()、jsonObj.values()\nfor(var i of arr){\n    console.log(i);\n}\n~~~\n#### map操作  \nget()\\set()\\delete()\n#### 箭头函数  => \n**注意事项**\n* this问题  //this指向了window对象\n* arguments不能使用，箭头函数没有自己的 arguments\n~~~\nfunction foo() { \n  var f = (...args) => args[0]; \n  return f(2); \n}\n\nfoo(1); // 2\n~~~\n\n更多：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\n\n#### 对象语法简洁化\n~~~\n//以前\nvar person={\n    name:'abc',\n    age:100,\n    showName:function(){\n        alert(this.name);       //this有问题\n    }\n}\n\n//ES6\nvar name='abc';\nvar age =100;\nvar person={\n    name,\n    age,\n    showName(){\n        alert(this.name);\n    }\n}\n~~~\n\n#### 面向对象\n~~~\n//以前面向对象\nfunction Person(name,age){  //类和构造函数一体\n    this.name = name;\n    this.age = age;\n}\nPerson.prototype.showName=function(){\n    return this.name;\n}\nvar p1 = new Person('abc',100);\nalert(p1.name);\n~~~\n\n~~~\n//ES6面向对象\nclass Person{\n    constructor(name='defalut',age=0){  //此处可以设置默认值，这是函数的功能，即：函数参数可以给默认值\n        this.name = name;\n        this.age = age;\n    }\n    showName(){\n        return this.name;\n    }\n}\n\nvar p1 = new Person('abc',100);\nalert(p1.name);     \nalert(p1.showName());\n~~~\n\n继承\n~~~\n//以前  子类.prototype = new 父类();\nfunction Worker(name,age){\n    Person.apply(this,arguments);\n}\nWorker.prototype=new Person();\n\n//ES6\nclass Woker extends Person{\n    constructor(){\n        super();    //调用父级构造\n    }\n}\n~~~\n\n#### ES5:  this.bind();\n\n#### 模块化\n> 当前使用模块化必须引入traceur和bootstrap，type必须写成module\n\n~~~\n//定义\nexport default {a,b}\n//引用\nimport modA from './a.js';\n//使用\nvar sum = modA.a + modA.b\n~~~\n\n#### Promise\n> 本身为一个对象，用来传递异步操作的数据\n\n> 整体是链式操作\n\n~~~\npending(等待、处理中)  ---> Resolve（完成）   \n                     ---> Reject  (拒绝)\n~~~\n使用\n~~~\nvar p1 = new Promise(function(resolve,reject){\n    if(异步处理成功了)\n        resolve(成功数据)\n    else\n        reject(失败原因)\n});\n~~~\n包含方法如下：\n~~~\n所有方法都支持链式编程\n*  then(成功(resolve数据),失败（reject数据）)  //此方法可以防止异步编程括号深度太多的的问题\n*  catch（function（e）{}）；    // 用来捕获错误\n*  all[p1,p2,p3....]  //用于将多个promise对象组合／包装成一个全新的promise对象,数组中的Promise又一个错误则按错误流程走，所有都成功则按成功流程走\n*  Promise.race([p1,p2....]).then(function(value){}); //返回最先执行的Promise的结果\n*  Promise.reject()         //生成错误的Promise\n*  Promise.resolve()        //生成成功的Promise\n~~~\n\n#### Generator+yield\n> Generator:生成器，是一个函数，可以遍历\n \n* Generator函数名字前有*\n* Generator函数内部使用yield语句\n~~~\n//普通函数\nfunction show(){\n    \n}\n//generator函数\nfunction* show(){\n    yield “Hello”；\n    yield \"World\";\n}\n//generator函数\n*show(){\n    yield “Hello”；\n    yield \"World\";\n}\n\nvar res=show();\nconsole.log(res.next());  //{value:\"Hello\",done:false}\nconsole.log(res.next());  //{value:\"World\",done:false}\nconsole.log(res.next());  //{value:\"undefined\",done:true}\n~~~ \n* Generator函数调用后的对象有next方法\n* next方法每次返回一个value和done结果，value位yield后面的值，done代表是否遍历结束\n* yield语句本身没有返回值或每次返回undefined\n* next可以带参数，所带参数给了上一个yield\n* for ...of循环支持Generator函数\n~~~\nfor (let v of show()){\n        document.write(v);\n}\n~~~\n\n#### 展开运算符\n 扩展语法允许一个表达式在期望多个参数（用于函数调用）或多个元素（用于数组文本）或多个变量（用于解构赋值）的位置扩展\n1. 用于函数调用\n~~~\nmyFunction(...iterableObj);\n~~~\n2. 用于数组字面量\n~~~\n[...iterableObj, 4, 5, 6]\n~~~\n\nECMA-262文档下载：https://chetaofeng.github.io/pub-images/Ecma-262.pdf","slug":"ECMAScript规范","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrq1000vck8heiznousp","content":"<blockquote>\n<p>ECMAScript 6（简称ES6）是JavaScript语言的下一代标准，于2015年6月正式发布，也称ECMAScript 2015。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参考资料</span><br><span class=\"line\">《ECMAScript 6 入门》： http://es6.ruanyifeng.com/</span><br></pre></td></tr></table></figure>\n<p>ECMA是标准，js是实现</p>\n<p>[toc]</p>\n<h3 id=\"历史\"><a class=\"markdownIt-Anchor\" href=\"#历史\"></a> 历史</h3>\n<ul>\n<li>1996    ES1.0   js稳定，Netscapte将js提交给ECMA组织，ES正式出现</li>\n<li>1998  ES2.0   ES2.0正式发布</li>\n<li>1999  ES3.0   ES3被浏览器广泛支持</li>\n<li>2007  ES4.0   ES4过于激进，被废除了</li>\n<li>2008  ES3.1   4.0退化为严重缩水版3.1，代号Harmony（和谐）</li>\n<li>2009  ES5.0   ES5正式发布了，公布了JS.next，即后来的ES6.0</li>\n<li>2011  ES5.1   ES5.1成为了ISO国际标准</li>\n<li>2013.3  ES6.0   制定草案</li>\n<li>2013.12   ES6.0   ES6.0草案发布</li>\n<li>2015.6    ES6.0   ES6.0预计发布正式版，同时JS.next指向ES7.0</li>\n</ul>\n<h3 id=\"兼容性\"><a class=\"markdownIt-Anchor\" href=\"#兼容性\"></a> 兼容性</h3>\n<blockquote>\n<p>目前ES5、ES6支持还可以，凑合；ES5、ES6逐渐沦为后台语言</p>\n</blockquote>\n<blockquote>\n<p>在浏览器中使用需要用到编译工具，babel／traceur（由google出的编译器，把ES6语法编译成ES5）</p>\n</blockquote>\n<h3 id=\"使用的三种方式\"><a class=\"markdownIt-Anchor\" href=\"#使用的三种方式\"></a> 使用的三种方式</h3>\n<ol>\n<li>网页内直接使用</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;traceur.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;bootstrap.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;module&quot;&gt;</span><br><span class=\"line\">    //此出写ES6代码</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>直接在线编译（主要用于测试）</li>\n</ol>\n<ul>\n<li><a href=\"http://babeljs.io/repl/\" target=\"_blank\" rel=\"noopener\">http://babeljs.io/repl/</a></li>\n<li><a href=\"https://google.github.io/traceur-compiler/demo/repl.html\" target=\"_blank\" rel=\"noopener\">https://google.github.io/traceur-compiler/demo/repl.html</a></li>\n</ul>\n<ol start=\"3\">\n<li>直接在node中使用</li>\n</ol>\n<ul>\n<li>直接用，需添加‘use strict’</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//test.js</span><br><span class=\"line\">&apos;use strict&apos;</span><br><span class=\"line\">let a=2;</span><br><span class=\"line\">console.log(a);</span><br></pre></td></tr></table></figure>\n<p>node test.js</p>\n<ul>\n<li>node --harmony_desctructuring test.js</li>\n</ul>\n<h3 id=\"新增功能\"><a class=\"markdownIt-Anchor\" href=\"#新增功能\"></a> 新增功能</h3>\n<h4 id=\"定义变量-let\"><a class=\"markdownIt-Anchor\" href=\"#定义变量-let\"></a> 定义变量 let</h4>\n<ul>\n<li>let定义的变量只能在代码块中使用，具备块级作用域；var具备函数级作用域；</li>\n<li>块级作用域其实就是匿名函数立即调用</li>\n<li>变量不能重复定义</li>\n<li>可用于封闭空间;封闭空间可解决i问题<br>\n以前：<br>\n(function(i){<br>\nvar a=12;<br>\n})(i);<br>\n现在：<br>\n{<br>\nlet  a=12;<br>\n}</li>\n</ul>\n<h4 id=\"定义常量-const\"><a class=\"markdownIt-Anchor\" href=\"#定义常量-const\"></a> 定义常量 const</h4>\n<p>定义后则不能修改</p>\n<h4 id=\"字符串连接\"><a class=\"markdownIt-Anchor\" href=\"#字符串连接\"></a> 字符串连接</h4>\n<p>==反单引号==：==``==,内容模版,==${变量名}填充模版==</p>\n<h4 id=\"解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#解构赋值\"></a> 解构赋值</h4>\n<ul>\n<li>var [a,b,c]=[12,5,101];解析结构，给a、b、c都赋值；</li>\n<li>json格式（通过名称匹配，与顺序无关）也支持</li>\n<li>==模式匹配==：var [a,[b,c],d] =[12,[3,2],101],左侧的样子需要和右侧一样</li>\n<li>可==以给默认值==。var {time=12,date} ={data=123}</li>\n</ul>\n<h4 id=\"复制数组\"><a class=\"markdownIt-Anchor\" href=\"#复制数组\"></a> 复制数组</h4>\n<p>数组赋值为引用赋值，复制以前用for循环🔥 Array.from()函数，现在使用==超引用’…’==, var arr2 = […arr1]; 在函数中通过 …args 接收多个参数</p>\n<h4 id=\"循环\"><a class=\"markdownIt-Anchor\" href=\"#循环\"></a> 循环</h4>\n<p>以前是for或for in，现在：for of，支持数组、json、map</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//i表示数组或者json的值，for in中i是下标，for of中表示key+value，实质是jsonObj.entrys(),类似的还有jsonObj.keys()、jsonObj.values()</span><br><span class=\"line\">for(var i of arr)&#123;</span><br><span class=\"line\">    console.log(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"map操作\"><a class=\"markdownIt-Anchor\" href=\"#map操作\"></a> map操作</h4>\n<p>get()\\set()\\delete()</p>\n<h4 id=\"箭头函数\"><a class=\"markdownIt-Anchor\" href=\"#箭头函数\"></a> 箭头函数  =&gt;</h4>\n<p><strong>注意事项</strong></p>\n<ul>\n<li>this问题  //this指向了window对象</li>\n<li>arguments不能使用，箭头函数没有自己的 arguments</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123; </span><br><span class=\"line\">  var f = (...args) =&gt; args[0]; </span><br><span class=\"line\">  return f(2); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(1); // 2</span><br></pre></td></tr></table></figure>\n<p>更多：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions</a></p>\n<h4 id=\"对象语法简洁化\"><a class=\"markdownIt-Anchor\" href=\"#对象语法简洁化\"></a> 对象语法简洁化</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//以前</span><br><span class=\"line\">var person=&#123;</span><br><span class=\"line\">    name:&apos;abc&apos;,</span><br><span class=\"line\">    age:100,</span><br><span class=\"line\">    showName:function()&#123;</span><br><span class=\"line\">        alert(this.name);       //this有问题</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//ES6</span><br><span class=\"line\">var name=&apos;abc&apos;;</span><br><span class=\"line\">var age =100;</span><br><span class=\"line\">var person=&#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    showName()&#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"面向对象\"><a class=\"markdownIt-Anchor\" href=\"#面向对象\"></a> 面向对象</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//以前面向对象</span><br><span class=\"line\">function Person(name,age)&#123;  //类和构造函数一体</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.showName=function()&#123;</span><br><span class=\"line\">    return this.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var p1 = new Person(&apos;abc&apos;,100);</span><br><span class=\"line\">alert(p1.name);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//ES6面向对象</span><br><span class=\"line\">class Person&#123;</span><br><span class=\"line\">    constructor(name=&apos;defalut&apos;,age=0)&#123;  //此处可以设置默认值，这是函数的功能，即：函数参数可以给默认值</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    showName()&#123;</span><br><span class=\"line\">        return this.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var p1 = new Person(&apos;abc&apos;,100);</span><br><span class=\"line\">alert(p1.name);     </span><br><span class=\"line\">alert(p1.showName());</span><br></pre></td></tr></table></figure>\n<p>继承</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//以前  子类.prototype = new 父类();</span><br><span class=\"line\">function Worker(name,age)&#123;</span><br><span class=\"line\">    Person.apply(this,arguments);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Worker.prototype=new Person();</span><br><span class=\"line\"></span><br><span class=\"line\">//ES6</span><br><span class=\"line\">class Woker extends Person&#123;</span><br><span class=\"line\">    constructor()&#123;</span><br><span class=\"line\">        super();    //调用父级构造</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"es5-thisbind\"><a class=\"markdownIt-Anchor\" href=\"#es5-thisbind\"></a> ES5:  this.bind();</h4>\n<h4 id=\"模块化\"><a class=\"markdownIt-Anchor\" href=\"#模块化\"></a> 模块化</h4>\n<blockquote>\n<p>当前使用模块化必须引入traceur和bootstrap，type必须写成module</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义</span><br><span class=\"line\">export default &#123;a,b&#125;</span><br><span class=\"line\">//引用</span><br><span class=\"line\">import modA from &apos;./a.js&apos;;</span><br><span class=\"line\">//使用</span><br><span class=\"line\">var sum = modA.a + modA.b</span><br></pre></td></tr></table></figure>\n<h4 id=\"promise\"><a class=\"markdownIt-Anchor\" href=\"#promise\"></a> Promise</h4>\n<blockquote>\n<p>本身为一个对象，用来传递异步操作的数据</p>\n</blockquote>\n<blockquote>\n<p>整体是链式操作</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pending(等待、处理中)  ---&gt; Resolve（完成）   </span><br><span class=\"line\">                     ---&gt; Reject  (拒绝)</span><br></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p1 = new Promise(function(resolve,reject)&#123;</span><br><span class=\"line\">    if(异步处理成功了)</span><br><span class=\"line\">        resolve(成功数据)</span><br><span class=\"line\">    else</span><br><span class=\"line\">        reject(失败原因)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>包含方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有方法都支持链式编程</span><br><span class=\"line\">*  then(成功(resolve数据),失败（reject数据）)  //此方法可以防止异步编程括号深度太多的的问题</span><br><span class=\"line\">*  catch（function（e）&#123;&#125;）；    // 用来捕获错误</span><br><span class=\"line\">*  all[p1,p2,p3....]  //用于将多个promise对象组合／包装成一个全新的promise对象,数组中的Promise又一个错误则按错误流程走，所有都成功则按成功流程走</span><br><span class=\"line\">*  Promise.race([p1,p2....]).then(function(value)&#123;&#125;); //返回最先执行的Promise的结果</span><br><span class=\"line\">*  Promise.reject()         //生成错误的Promise</span><br><span class=\"line\">*  Promise.resolve()        //生成成功的Promise</span><br></pre></td></tr></table></figure>\n<h4 id=\"generatoryield\"><a class=\"markdownIt-Anchor\" href=\"#generatoryield\"></a> Generator+yield</h4>\n<blockquote>\n<p>Generator:生成器，是一个函数，可以遍历</p>\n</blockquote>\n<ul>\n<li>Generator函数名字前有*</li>\n<li>Generator函数内部使用yield语句</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//普通函数</span><br><span class=\"line\">function show()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//generator函数</span><br><span class=\"line\">function* show()&#123;</span><br><span class=\"line\">    yield “Hello”；</span><br><span class=\"line\">    yield &quot;World&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//generator函数</span><br><span class=\"line\">*show()&#123;</span><br><span class=\"line\">    yield “Hello”；</span><br><span class=\"line\">    yield &quot;World&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var res=show();</span><br><span class=\"line\">console.log(res.next());  //&#123;value:&quot;Hello&quot;,done:false&#125;</span><br><span class=\"line\">console.log(res.next());  //&#123;value:&quot;World&quot;,done:false&#125;</span><br><span class=\"line\">console.log(res.next());  //&#123;value:&quot;undefined&quot;,done:true&#125;</span><br><span class=\"line\">~~~ </span><br><span class=\"line\">* Generator函数调用后的对象有next方法</span><br><span class=\"line\">* next方法每次返回一个value和done结果，value位yield后面的值，done代表是否遍历结束</span><br><span class=\"line\">* yield语句本身没有返回值或每次返回undefined</span><br><span class=\"line\">* next可以带参数，所带参数给了上一个yield</span><br><span class=\"line\">* for ...of循环支持Generator函数</span><br></pre></td></tr></table></figure>\n<p>for (let v of show()){<br>\ndocument.write(v);<br>\n}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 展开运算符</span><br><span class=\"line\"> 扩展语法允许一个表达式在期望多个参数（用于函数调用）或多个元素（用于数组文本）或多个变量（用于解构赋值）的位置扩展</span><br><span class=\"line\">1. 用于函数调用</span><br></pre></td></tr></table></figure>\n<p>myFunction(…iterableObj);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2. 用于数组字面量</span><br></pre></td></tr></table></figure>\n<p>[…iterableObj, 4, 5, 6]</p>\n<pre class=\"highlight\"><code class=\"\">\nECMA-262文档下载：https://chetaofeng.github.io/pub-images/Ecma-262.pdf</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>ECMAScript 6（简称ES6）是JavaScript语言的下一代标准，于2015年6月正式发布，也称ECMAScript 2015。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参考资料</span><br><span class=\"line\">《ECMAScript 6 入门》： http://es6.ruanyifeng.com/</span><br></pre></td></tr></table></figure>\n<p>ECMA是标准，js是实现</p>\n<p>[toc]</p>\n<h3 id=\"历史\"><a class=\"markdownIt-Anchor\" href=\"#历史\"></a> 历史</h3>\n<ul>\n<li>1996    ES1.0   js稳定，Netscapte将js提交给ECMA组织，ES正式出现</li>\n<li>1998  ES2.0   ES2.0正式发布</li>\n<li>1999  ES3.0   ES3被浏览器广泛支持</li>\n<li>2007  ES4.0   ES4过于激进，被废除了</li>\n<li>2008  ES3.1   4.0退化为严重缩水版3.1，代号Harmony（和谐）</li>\n<li>2009  ES5.0   ES5正式发布了，公布了JS.next，即后来的ES6.0</li>\n<li>2011  ES5.1   ES5.1成为了ISO国际标准</li>\n<li>2013.3  ES6.0   制定草案</li>\n<li>2013.12   ES6.0   ES6.0草案发布</li>\n<li>2015.6    ES6.0   ES6.0预计发布正式版，同时JS.next指向ES7.0</li>\n</ul>\n<h3 id=\"兼容性\"><a class=\"markdownIt-Anchor\" href=\"#兼容性\"></a> 兼容性</h3>\n<blockquote>\n<p>目前ES5、ES6支持还可以，凑合；ES5、ES6逐渐沦为后台语言</p>\n</blockquote>\n<blockquote>\n<p>在浏览器中使用需要用到编译工具，babel／traceur（由google出的编译器，把ES6语法编译成ES5）</p>\n</blockquote>\n<h3 id=\"使用的三种方式\"><a class=\"markdownIt-Anchor\" href=\"#使用的三种方式\"></a> 使用的三种方式</h3>\n<ol>\n<li>网页内直接使用</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;traceur.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;bootstrap.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;module&quot;&gt;</span><br><span class=\"line\">    //此出写ES6代码</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>直接在线编译（主要用于测试）</li>\n</ol>\n<ul>\n<li><a href=\"http://babeljs.io/repl/\" target=\"_blank\" rel=\"noopener\">http://babeljs.io/repl/</a></li>\n<li><a href=\"https://google.github.io/traceur-compiler/demo/repl.html\" target=\"_blank\" rel=\"noopener\">https://google.github.io/traceur-compiler/demo/repl.html</a></li>\n</ul>\n<ol start=\"3\">\n<li>直接在node中使用</li>\n</ol>\n<ul>\n<li>直接用，需添加‘use strict’</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//test.js</span><br><span class=\"line\">&apos;use strict&apos;</span><br><span class=\"line\">let a=2;</span><br><span class=\"line\">console.log(a);</span><br></pre></td></tr></table></figure>\n<p>node test.js</p>\n<ul>\n<li>node --harmony_desctructuring test.js</li>\n</ul>\n<h3 id=\"新增功能\"><a class=\"markdownIt-Anchor\" href=\"#新增功能\"></a> 新增功能</h3>\n<h4 id=\"定义变量-let\"><a class=\"markdownIt-Anchor\" href=\"#定义变量-let\"></a> 定义变量 let</h4>\n<ul>\n<li>let定义的变量只能在代码块中使用，具备块级作用域；var具备函数级作用域；</li>\n<li>块级作用域其实就是匿名函数立即调用</li>\n<li>变量不能重复定义</li>\n<li>可用于封闭空间;封闭空间可解决i问题<br>\n以前：<br>\n(function(i){<br>\nvar a=12;<br>\n})(i);<br>\n现在：<br>\n{<br>\nlet  a=12;<br>\n}</li>\n</ul>\n<h4 id=\"定义常量-const\"><a class=\"markdownIt-Anchor\" href=\"#定义常量-const\"></a> 定义常量 const</h4>\n<p>定义后则不能修改</p>\n<h4 id=\"字符串连接\"><a class=\"markdownIt-Anchor\" href=\"#字符串连接\"></a> 字符串连接</h4>\n<p>==反单引号==：==``==,内容模版,==${变量名}填充模版==</p>\n<h4 id=\"解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#解构赋值\"></a> 解构赋值</h4>\n<ul>\n<li>var [a,b,c]=[12,5,101];解析结构，给a、b、c都赋值；</li>\n<li>json格式（通过名称匹配，与顺序无关）也支持</li>\n<li>==模式匹配==：var [a,[b,c],d] =[12,[3,2],101],左侧的样子需要和右侧一样</li>\n<li>可==以给默认值==。var {time=12,date} ={data=123}</li>\n</ul>\n<h4 id=\"复制数组\"><a class=\"markdownIt-Anchor\" href=\"#复制数组\"></a> 复制数组</h4>\n<p>数组赋值为引用赋值，复制以前用for循环🔥 Array.from()函数，现在使用==超引用’…’==, var arr2 = […arr1]; 在函数中通过 …args 接收多个参数</p>\n<h4 id=\"循环\"><a class=\"markdownIt-Anchor\" href=\"#循环\"></a> 循环</h4>\n<p>以前是for或for in，现在：for of，支持数组、json、map</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//i表示数组或者json的值，for in中i是下标，for of中表示key+value，实质是jsonObj.entrys(),类似的还有jsonObj.keys()、jsonObj.values()</span><br><span class=\"line\">for(var i of arr)&#123;</span><br><span class=\"line\">    console.log(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"map操作\"><a class=\"markdownIt-Anchor\" href=\"#map操作\"></a> map操作</h4>\n<p>get()\\set()\\delete()</p>\n<h4 id=\"箭头函数\"><a class=\"markdownIt-Anchor\" href=\"#箭头函数\"></a> 箭头函数  =&gt;</h4>\n<p><strong>注意事项</strong></p>\n<ul>\n<li>this问题  //this指向了window对象</li>\n<li>arguments不能使用，箭头函数没有自己的 arguments</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123; </span><br><span class=\"line\">  var f = (...args) =&gt; args[0]; </span><br><span class=\"line\">  return f(2); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(1); // 2</span><br></pre></td></tr></table></figure>\n<p>更多：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions</a></p>\n<h4 id=\"对象语法简洁化\"><a class=\"markdownIt-Anchor\" href=\"#对象语法简洁化\"></a> 对象语法简洁化</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//以前</span><br><span class=\"line\">var person=&#123;</span><br><span class=\"line\">    name:&apos;abc&apos;,</span><br><span class=\"line\">    age:100,</span><br><span class=\"line\">    showName:function()&#123;</span><br><span class=\"line\">        alert(this.name);       //this有问题</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//ES6</span><br><span class=\"line\">var name=&apos;abc&apos;;</span><br><span class=\"line\">var age =100;</span><br><span class=\"line\">var person=&#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    showName()&#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"面向对象\"><a class=\"markdownIt-Anchor\" href=\"#面向对象\"></a> 面向对象</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//以前面向对象</span><br><span class=\"line\">function Person(name,age)&#123;  //类和构造函数一体</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.showName=function()&#123;</span><br><span class=\"line\">    return this.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var p1 = new Person(&apos;abc&apos;,100);</span><br><span class=\"line\">alert(p1.name);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//ES6面向对象</span><br><span class=\"line\">class Person&#123;</span><br><span class=\"line\">    constructor(name=&apos;defalut&apos;,age=0)&#123;  //此处可以设置默认值，这是函数的功能，即：函数参数可以给默认值</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    showName()&#123;</span><br><span class=\"line\">        return this.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var p1 = new Person(&apos;abc&apos;,100);</span><br><span class=\"line\">alert(p1.name);     </span><br><span class=\"line\">alert(p1.showName());</span><br></pre></td></tr></table></figure>\n<p>继承</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//以前  子类.prototype = new 父类();</span><br><span class=\"line\">function Worker(name,age)&#123;</span><br><span class=\"line\">    Person.apply(this,arguments);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Worker.prototype=new Person();</span><br><span class=\"line\"></span><br><span class=\"line\">//ES6</span><br><span class=\"line\">class Woker extends Person&#123;</span><br><span class=\"line\">    constructor()&#123;</span><br><span class=\"line\">        super();    //调用父级构造</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"es5-thisbind\"><a class=\"markdownIt-Anchor\" href=\"#es5-thisbind\"></a> ES5:  this.bind();</h4>\n<h4 id=\"模块化\"><a class=\"markdownIt-Anchor\" href=\"#模块化\"></a> 模块化</h4>\n<blockquote>\n<p>当前使用模块化必须引入traceur和bootstrap，type必须写成module</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义</span><br><span class=\"line\">export default &#123;a,b&#125;</span><br><span class=\"line\">//引用</span><br><span class=\"line\">import modA from &apos;./a.js&apos;;</span><br><span class=\"line\">//使用</span><br><span class=\"line\">var sum = modA.a + modA.b</span><br></pre></td></tr></table></figure>\n<h4 id=\"promise\"><a class=\"markdownIt-Anchor\" href=\"#promise\"></a> Promise</h4>\n<blockquote>\n<p>本身为一个对象，用来传递异步操作的数据</p>\n</blockquote>\n<blockquote>\n<p>整体是链式操作</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pending(等待、处理中)  ---&gt; Resolve（完成）   </span><br><span class=\"line\">                     ---&gt; Reject  (拒绝)</span><br></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p1 = new Promise(function(resolve,reject)&#123;</span><br><span class=\"line\">    if(异步处理成功了)</span><br><span class=\"line\">        resolve(成功数据)</span><br><span class=\"line\">    else</span><br><span class=\"line\">        reject(失败原因)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>包含方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有方法都支持链式编程</span><br><span class=\"line\">*  then(成功(resolve数据),失败（reject数据）)  //此方法可以防止异步编程括号深度太多的的问题</span><br><span class=\"line\">*  catch（function（e）&#123;&#125;）；    // 用来捕获错误</span><br><span class=\"line\">*  all[p1,p2,p3....]  //用于将多个promise对象组合／包装成一个全新的promise对象,数组中的Promise又一个错误则按错误流程走，所有都成功则按成功流程走</span><br><span class=\"line\">*  Promise.race([p1,p2....]).then(function(value)&#123;&#125;); //返回最先执行的Promise的结果</span><br><span class=\"line\">*  Promise.reject()         //生成错误的Promise</span><br><span class=\"line\">*  Promise.resolve()        //生成成功的Promise</span><br></pre></td></tr></table></figure>\n<h4 id=\"generatoryield\"><a class=\"markdownIt-Anchor\" href=\"#generatoryield\"></a> Generator+yield</h4>\n<blockquote>\n<p>Generator:生成器，是一个函数，可以遍历</p>\n</blockquote>\n<ul>\n<li>Generator函数名字前有*</li>\n<li>Generator函数内部使用yield语句</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//普通函数</span><br><span class=\"line\">function show()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//generator函数</span><br><span class=\"line\">function* show()&#123;</span><br><span class=\"line\">    yield “Hello”；</span><br><span class=\"line\">    yield &quot;World&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//generator函数</span><br><span class=\"line\">*show()&#123;</span><br><span class=\"line\">    yield “Hello”；</span><br><span class=\"line\">    yield &quot;World&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var res=show();</span><br><span class=\"line\">console.log(res.next());  //&#123;value:&quot;Hello&quot;,done:false&#125;</span><br><span class=\"line\">console.log(res.next());  //&#123;value:&quot;World&quot;,done:false&#125;</span><br><span class=\"line\">console.log(res.next());  //&#123;value:&quot;undefined&quot;,done:true&#125;</span><br><span class=\"line\">~~~ </span><br><span class=\"line\">* Generator函数调用后的对象有next方法</span><br><span class=\"line\">* next方法每次返回一个value和done结果，value位yield后面的值，done代表是否遍历结束</span><br><span class=\"line\">* yield语句本身没有返回值或每次返回undefined</span><br><span class=\"line\">* next可以带参数，所带参数给了上一个yield</span><br><span class=\"line\">* for ...of循环支持Generator函数</span><br></pre></td></tr></table></figure>\n<p>for (let v of show()){<br>\ndocument.write(v);<br>\n}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 展开运算符</span><br><span class=\"line\"> 扩展语法允许一个表达式在期望多个参数（用于函数调用）或多个元素（用于数组文本）或多个变量（用于解构赋值）的位置扩展</span><br><span class=\"line\">1. 用于函数调用</span><br></pre></td></tr></table></figure>\n<p>myFunction(…iterableObj);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2. 用于数组字面量</span><br></pre></td></tr></table></figure>\n<p>[…iterableObj, 4, 5, 6]</p>\n<pre class=\"highlight\"><code class=\"\">\nECMA-262文档下载：https://chetaofeng.github.io/pub-images/Ecma-262.pdf</code></pre>\n"},{"title":"React Router","copyright":true,"comments":1,"toc":true,"date":"2018-10-26T07:18:27.000Z","password":null,"_content":"https://reacttraining.com/react-router/\n\n# 概述\nReact Router 4.0 （以下简称 RR4）\n\nRR4 本次采用单代码仓库模型架构（monorepo），这意味者这个仓库里面有若干相互独立的包，分别是：\n~~~\nreact-router React Router 核心\nreact-router-dom 用于 DOM 绑定的 React Router\nreact-router-native 用于 React Native 的 React Router\nreact-router-redux React Router 和 Redux 的集成\nreact-router-config 静态路由配置的小助手\n~~~\n\n> 它是官方维护的，事实上也是唯一可选的路由库。\n\n# react-router 还是 react-router-dom\n1. 在 React 的使用中，我们一般要引入两个包，react 和 react-dom\n2. react-router 和 react-router-dom 两个只要引用一个就行了，不同之处就是后者比前者多出了 <Link> <BrowserRouter> 这样的 DOM 类组件\n\n\n# 学习\n* （阮一峰）http://www.ruanyifeng.com/blog/2016/05/react_router.html\n* （gitbook）http://react-guide.github.io/react-router-cn/docs/API.html","source":"_posts/2018-10-26-React-Router.md","raw":"---\ntitle: React Router\ntags:\n  - React\n  - React-Router\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-26 15:18:27\ncategories: React\npassword:\n---\nhttps://reacttraining.com/react-router/\n\n# 概述\nReact Router 4.0 （以下简称 RR4）\n\nRR4 本次采用单代码仓库模型架构（monorepo），这意味者这个仓库里面有若干相互独立的包，分别是：\n~~~\nreact-router React Router 核心\nreact-router-dom 用于 DOM 绑定的 React Router\nreact-router-native 用于 React Native 的 React Router\nreact-router-redux React Router 和 Redux 的集成\nreact-router-config 静态路由配置的小助手\n~~~\n\n> 它是官方维护的，事实上也是唯一可选的路由库。\n\n# react-router 还是 react-router-dom\n1. 在 React 的使用中，我们一般要引入两个包，react 和 react-dom\n2. react-router 和 react-router-dom 两个只要引用一个就行了，不同之处就是后者比前者多出了 <Link> <BrowserRouter> 这样的 DOM 类组件\n\n\n# 学习\n* （阮一峰）http://www.ruanyifeng.com/blog/2016/05/react_router.html\n* （gitbook）http://react-guide.github.io/react-router-cn/docs/API.html","slug":"React-Router","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrq4000wck8h143fk8b4","content":"<p><a href=\"https://reacttraining.com/react-router/\" target=\"_blank\" rel=\"noopener\">https://reacttraining.com/react-router/</a></p>\n<h1 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\"></a> 概述</h1>\n<p>React Router 4.0 （以下简称 RR4）</p>\n<p>RR4 本次采用单代码仓库模型架构（monorepo），这意味者这个仓库里面有若干相互独立的包，分别是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-router React Router 核心</span><br><span class=\"line\">react-router-dom 用于 DOM 绑定的 React Router</span><br><span class=\"line\">react-router-native 用于 React Native 的 React Router</span><br><span class=\"line\">react-router-redux React Router 和 Redux 的集成</span><br><span class=\"line\">react-router-config 静态路由配置的小助手</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>它是官方维护的，事实上也是唯一可选的路由库。</p>\n</blockquote>\n<h1 id=\"react-router-还是-react-router-dom\"><a class=\"markdownIt-Anchor\" href=\"#react-router-还是-react-router-dom\"></a> react-router 还是 react-router-dom</h1>\n<ol>\n<li>在 React 的使用中，我们一般要引入两个包，react 和 react-dom</li>\n<li>react-router 和 react-router-dom 两个只要引用一个就行了，不同之处就是后者比前者多出了 <link> <browserrouter> 这样的 DOM 类组件</browserrouter></li>\n</ol>\n<h1 id=\"学习\"><a class=\"markdownIt-Anchor\" href=\"#学习\"></a> 学习</h1>\n<ul>\n<li>（阮一峰）<a href=\"http://www.ruanyifeng.com/blog/2016/05/react_router.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/05/react_router.html</a></li>\n<li>（gitbook）<a href=\"http://react-guide.github.io/react-router-cn/docs/API.html\" target=\"_blank\" rel=\"noopener\">http://react-guide.github.io/react-router-cn/docs/API.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://reacttraining.com/react-router/\" target=\"_blank\" rel=\"noopener\">https://reacttraining.com/react-router/</a></p>\n<h1 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\"></a> 概述</h1>\n<p>React Router 4.0 （以下简称 RR4）</p>\n<p>RR4 本次采用单代码仓库模型架构（monorepo），这意味者这个仓库里面有若干相互独立的包，分别是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-router React Router 核心</span><br><span class=\"line\">react-router-dom 用于 DOM 绑定的 React Router</span><br><span class=\"line\">react-router-native 用于 React Native 的 React Router</span><br><span class=\"line\">react-router-redux React Router 和 Redux 的集成</span><br><span class=\"line\">react-router-config 静态路由配置的小助手</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>它是官方维护的，事实上也是唯一可选的路由库。</p>\n</blockquote>\n<h1 id=\"react-router-还是-react-router-dom\"><a class=\"markdownIt-Anchor\" href=\"#react-router-还是-react-router-dom\"></a> react-router 还是 react-router-dom</h1>\n<ol>\n<li>在 React 的使用中，我们一般要引入两个包，react 和 react-dom</li>\n<li>react-router 和 react-router-dom 两个只要引用一个就行了，不同之处就是后者比前者多出了 <link> <browserrouter> 这样的 DOM 类组件</browserrouter></li>\n</ol>\n<h1 id=\"学习\"><a class=\"markdownIt-Anchor\" href=\"#学习\"></a> 学习</h1>\n<ul>\n<li>（阮一峰）<a href=\"http://www.ruanyifeng.com/blog/2016/05/react_router.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/05/react_router.html</a></li>\n<li>（gitbook）<a href=\"http://react-guide.github.io/react-router-cn/docs/API.html\" target=\"_blank\" rel=\"noopener\">http://react-guide.github.io/react-router-cn/docs/API.html</a></li>\n</ul>\n"},{"title":"React相关需学习","copyright":true,"comments":1,"toc":true,"date":"2018-10-26T07:28:57.000Z","password":null,"_content":"\n# ImmutableJS简介\nImmutableJS是FaceBook开发的一个JS库，能够在JS种实现不可变对象\n\n不可变对象可以大大提高对象的比较性能，用于状态和属性判断非常有效\n\n实际上，提高比较性能的代价是降低修改性能，只不过收益更大\n\n# Flux简介\nFlux不是一个具体的框架，而是Facebook提出的一种代码架构\n\nReact只是一个视图库，Fulx是在React基础上对于前端整体的组织方案\n\nFulx目的是保证逻辑清晰、数据流向清晰、依赖关系清晰","source":"_posts/2018-10-26-React相关需学习.md","raw":"---\ntitle: React相关需学习\ntags:\n  - React \ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-26 15:28:57\ncategories: React\npassword:\n---\n\n# ImmutableJS简介\nImmutableJS是FaceBook开发的一个JS库，能够在JS种实现不可变对象\n\n不可变对象可以大大提高对象的比较性能，用于状态和属性判断非常有效\n\n实际上，提高比较性能的代价是降低修改性能，只不过收益更大\n\n# Flux简介\nFlux不是一个具体的框架，而是Facebook提出的一种代码架构\n\nReact只是一个视图库，Fulx是在React基础上对于前端整体的组织方案\n\nFulx目的是保证逻辑清晰、数据流向清晰、依赖关系清晰","slug":"React相关需学习","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrq50011ck8hmt4q0ie3","content":"<h1 id=\"immutablejs简介\"><a class=\"markdownIt-Anchor\" href=\"#immutablejs简介\"></a> ImmutableJS简介</h1>\n<p>ImmutableJS是FaceBook开发的一个JS库，能够在JS种实现不可变对象</p>\n<p>不可变对象可以大大提高对象的比较性能，用于状态和属性判断非常有效</p>\n<p>实际上，提高比较性能的代价是降低修改性能，只不过收益更大</p>\n<h1 id=\"flux简介\"><a class=\"markdownIt-Anchor\" href=\"#flux简介\"></a> Flux简介</h1>\n<p>Flux不是一个具体的框架，而是Facebook提出的一种代码架构</p>\n<p>React只是一个视图库，Fulx是在React基础上对于前端整体的组织方案</p>\n<p>Fulx目的是保证逻辑清晰、数据流向清晰、依赖关系清晰</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"immutablejs简介\"><a class=\"markdownIt-Anchor\" href=\"#immutablejs简介\"></a> ImmutableJS简介</h1>\n<p>ImmutableJS是FaceBook开发的一个JS库，能够在JS种实现不可变对象</p>\n<p>不可变对象可以大大提高对象的比较性能，用于状态和属性判断非常有效</p>\n<p>实际上，提高比较性能的代价是降低修改性能，只不过收益更大</p>\n<h1 id=\"flux简介\"><a class=\"markdownIt-Anchor\" href=\"#flux简介\"></a> Flux简介</h1>\n<p>Flux不是一个具体的框架，而是Facebook提出的一种代码架构</p>\n<p>React只是一个视图库，Fulx是在React基础上对于前端整体的组织方案</p>\n<p>Fulx目的是保证逻辑清晰、数据流向清晰、依赖关系清晰</p>\n"},{"title":"react-router-redux","copyright":true,"comments":1,"toc":true,"date":"2018-10-26T07:24:49.000Z","password":null,"_content":"\n# 概述\n> 用Redux去管理你的应用状态（state），使用React Router去管理路由，但是，这两个库不能协同工作，react-router-redux库可以协调这两个库\n\n> react-router-redux允许你使用React Router库中的api，使用Redux库像平常一样去管理应用的状态state。 本库只是简单的加强了React Router库中history这个实例，以允许将history中接受到的变化反应到stae中去。\n\n# 原理示例\n![image](/pub-images/react-router-redux示例.png)\n现在，你进行的所有页面导航和App导航，加强版的history会首先将新的路径通过Redux store传递，然后再通过React Router去更新组件树","source":"_posts/2018-10-26-react-router-redux.md","raw":"---\ntitle: react-router-redux\ntags:\n  - React\n  - React组件\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-26 15:24:49\ncategories: React\npassword:\n---\n\n# 概述\n> 用Redux去管理你的应用状态（state），使用React Router去管理路由，但是，这两个库不能协同工作，react-router-redux库可以协调这两个库\n\n> react-router-redux允许你使用React Router库中的api，使用Redux库像平常一样去管理应用的状态state。 本库只是简单的加强了React Router库中history这个实例，以允许将history中接受到的变化反应到stae中去。\n\n# 原理示例\n![image](/pub-images/react-router-redux示例.png)\n现在，你进行的所有页面导航和App导航，加强版的history会首先将新的路径通过Redux store传递，然后再通过React Router去更新组件树","slug":"react-router-redux","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrq60013ck8ha2g53ha6","content":"<h1 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\"></a> 概述</h1>\n<blockquote>\n<p>用Redux去管理你的应用状态（state），使用React Router去管理路由，但是，这两个库不能协同工作，react-router-redux库可以协调这两个库</p>\n</blockquote>\n<blockquote>\n<p>react-router-redux允许你使用React Router库中的api，使用Redux库像平常一样去管理应用的状态state。 本库只是简单的加强了React Router库中history这个实例，以允许将history中接受到的变化反应到stae中去。</p>\n</blockquote>\n<h1 id=\"原理示例\"><a class=\"markdownIt-Anchor\" href=\"#原理示例\"></a> 原理示例</h1>\n<p><img src=\"/pub-images/react-router-redux%E7%A4%BA%E4%BE%8B.png\" alt=\"image\"><br>\n现在，你进行的所有页面导航和App导航，加强版的history会首先将新的路径通过Redux store传递，然后再通过React Router去更新组件树</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\"></a> 概述</h1>\n<blockquote>\n<p>用Redux去管理你的应用状态（state），使用React Router去管理路由，但是，这两个库不能协同工作，react-router-redux库可以协调这两个库</p>\n</blockquote>\n<blockquote>\n<p>react-router-redux允许你使用React Router库中的api，使用Redux库像平常一样去管理应用的状态state。 本库只是简单的加强了React Router库中history这个实例，以允许将history中接受到的变化反应到stae中去。</p>\n</blockquote>\n<h1 id=\"原理示例\"><a class=\"markdownIt-Anchor\" href=\"#原理示例\"></a> 原理示例</h1>\n<p><img src=\"/pub-images/react-router-redux%E7%A4%BA%E4%BE%8B.png\" alt=\"image\"><br>\n现在，你进行的所有页面导航和App导航，加强版的history会首先将新的路径通过Redux store传递，然后再通过React Router去更新组件树</p>\n"},{"title":"middleware","copyright":true,"comments":1,"toc":true,"date":"2018-10-26T07:32:09.000Z","password":null,"_content":"\nhttps://zhuanlan.zhihu.com/p/20597452\n\n# 简介\n* middleware 提供了一个分类处理 action 的机会，在 middleware 中你可以检阅每一个流过的 action，挑选出特定类型的 action 进行相应操作，给你一次改变 action 的机会\n* redux 的 middleware 是为了增强 dispatch 而出现的\n* redux 提供了 applyMiddleware 这个 api 来加载 middleware\n\n![image](/pub-images/redux-middleware1.png)\n![image](/pub-images/redux-middleware2.png)\n\n# 四步理解 middleware 机制\n![image](/pub-images/middleware机制示例.png)\n\n~~~\nvar middlewareAPI = {\n  getState: store.getState,\n  dispatch: (action) => dispatch(action)\n};\nchain = middlewares.map(middleware => middleware(middlewareAPI));\n~~~\n\n## 函数式编程思想设计 middleware\nmiddleware 的设计有点特殊，是一个层层包裹的匿名函数，这其实是函数式编程中的柯里化 curry，一种使用匿名单参数函数来实现多参数函数的方法。applyMiddleware 会对 logger 这个 middleware 进行层层调用，动态地对 store 和 next 参数赋值\n\n柯里化的 middleware 结构好处在于：\n1. 易串联，柯里化函数具有延迟执行的特性，通过不断柯里化形成的 middleware 可以累积参数，配合组合（ compose，函数式编程的概念，Step. 2 中会介绍）的方式，很容易形成 pipeline 来处理数据流\n2. 共享store，在 applyMiddleware 执行过程中，store 还是旧的，但是因为闭包的存在，applyMiddleware 完成后，所有的 middlewares 内部拿到的 store 是最新且相同的\n\n## 给 middleware 分发 store\n创建一个普通的 store 通过如下方式：\n~~~\n//applyMiddleware 函数陆续获得了三个参数\n//第一个是 middlewares 数组，[mid1, mid2, mid3, ...]\n//第二个 next 是 Redux 原生的 createStore\n//最后一个是 reducer\nlet newStore = applyMiddleware(mid1, mid2, mid3, ...)(createStore)(reducer, null);\n~~~\n\n\n## 组合串联 middlewares\n~~~\ndispatch = compose(...chain)(store.dispatch); \n~~~\ncompose 是函数式编程中的组合，compose 将 chain 中的所有匿名函数，[f1, f2, ... , fx, ..., fn]，组装成一个新的函数，即新的 dispatch，当新 dispatch 执行时，[f1, f2, ... , fx, ..., fn]，从右到左依次执行（ 所以顺序很重要）\n\n## 在 middleware 中调用 dispatch\n在middleware 中调用 store.dispatch() 和在其他任何地方调用效果是一样的，而在 middleware 中调用 next()，效果是进入下一个 middleware","source":"_posts/2018-10-26-middleware.md","raw":"---\ntitle: middleware\ntags:\n  - React \ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-26 15:32:09\ncategories: React\npassword:\n---\n\nhttps://zhuanlan.zhihu.com/p/20597452\n\n# 简介\n* middleware 提供了一个分类处理 action 的机会，在 middleware 中你可以检阅每一个流过的 action，挑选出特定类型的 action 进行相应操作，给你一次改变 action 的机会\n* redux 的 middleware 是为了增强 dispatch 而出现的\n* redux 提供了 applyMiddleware 这个 api 来加载 middleware\n\n![image](/pub-images/redux-middleware1.png)\n![image](/pub-images/redux-middleware2.png)\n\n# 四步理解 middleware 机制\n![image](/pub-images/middleware机制示例.png)\n\n~~~\nvar middlewareAPI = {\n  getState: store.getState,\n  dispatch: (action) => dispatch(action)\n};\nchain = middlewares.map(middleware => middleware(middlewareAPI));\n~~~\n\n## 函数式编程思想设计 middleware\nmiddleware 的设计有点特殊，是一个层层包裹的匿名函数，这其实是函数式编程中的柯里化 curry，一种使用匿名单参数函数来实现多参数函数的方法。applyMiddleware 会对 logger 这个 middleware 进行层层调用，动态地对 store 和 next 参数赋值\n\n柯里化的 middleware 结构好处在于：\n1. 易串联，柯里化函数具有延迟执行的特性，通过不断柯里化形成的 middleware 可以累积参数，配合组合（ compose，函数式编程的概念，Step. 2 中会介绍）的方式，很容易形成 pipeline 来处理数据流\n2. 共享store，在 applyMiddleware 执行过程中，store 还是旧的，但是因为闭包的存在，applyMiddleware 完成后，所有的 middlewares 内部拿到的 store 是最新且相同的\n\n## 给 middleware 分发 store\n创建一个普通的 store 通过如下方式：\n~~~\n//applyMiddleware 函数陆续获得了三个参数\n//第一个是 middlewares 数组，[mid1, mid2, mid3, ...]\n//第二个 next 是 Redux 原生的 createStore\n//最后一个是 reducer\nlet newStore = applyMiddleware(mid1, mid2, mid3, ...)(createStore)(reducer, null);\n~~~\n\n\n## 组合串联 middlewares\n~~~\ndispatch = compose(...chain)(store.dispatch); \n~~~\ncompose 是函数式编程中的组合，compose 将 chain 中的所有匿名函数，[f1, f2, ... , fx, ..., fn]，组装成一个新的函数，即新的 dispatch，当新 dispatch 执行时，[f1, f2, ... , fx, ..., fn]，从右到左依次执行（ 所以顺序很重要）\n\n## 在 middleware 中调用 dispatch\n在middleware 中调用 store.dispatch() 和在其他任何地方调用效果是一样的，而在 middleware 中调用 next()，效果是进入下一个 middleware","slug":"middleware","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrq80017ck8h2gkutufy","content":"<p><a href=\"https://zhuanlan.zhihu.com/p/20597452\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/20597452</a></p>\n<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<ul>\n<li>middleware 提供了一个分类处理 action 的机会，在 middleware 中你可以检阅每一个流过的 action，挑选出特定类型的 action 进行相应操作，给你一次改变 action 的机会</li>\n<li>redux 的 middleware 是为了增强 dispatch 而出现的</li>\n<li>redux 提供了 applyMiddleware 这个 api 来加载 middleware</li>\n</ul>\n<p><img src=\"/pub-images/redux-middleware1.png\" alt=\"image\"><br>\n<img src=\"/pub-images/redux-middleware2.png\" alt=\"image\"></p>\n<h1 id=\"四步理解-middleware-机制\"><a class=\"markdownIt-Anchor\" href=\"#四步理解-middleware-机制\"></a> 四步理解 middleware 机制</h1>\n<p><img src=\"/pub-images/middleware%E6%9C%BA%E5%88%B6%E7%A4%BA%E4%BE%8B.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var middlewareAPI = &#123;</span><br><span class=\"line\">  getState: store.getState,</span><br><span class=\"line\">  dispatch: (action) =&gt; dispatch(action)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">chain = middlewares.map(middleware =&gt; middleware(middlewareAPI));</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数式编程思想设计-middleware\"><a class=\"markdownIt-Anchor\" href=\"#函数式编程思想设计-middleware\"></a> 函数式编程思想设计 middleware</h2>\n<p>middleware 的设计有点特殊，是一个层层包裹的匿名函数，这其实是函数式编程中的柯里化 curry，一种使用匿名单参数函数来实现多参数函数的方法。applyMiddleware 会对 logger 这个 middleware 进行层层调用，动态地对 store 和 next 参数赋值</p>\n<p>柯里化的 middleware 结构好处在于：</p>\n<ol>\n<li>易串联，柯里化函数具有延迟执行的特性，通过不断柯里化形成的 middleware 可以累积参数，配合组合（ compose，函数式编程的概念，Step. 2 中会介绍）的方式，很容易形成 pipeline 来处理数据流</li>\n<li>共享store，在 applyMiddleware 执行过程中，store 还是旧的，但是因为闭包的存在，applyMiddleware 完成后，所有的 middlewares 内部拿到的 store 是最新且相同的</li>\n</ol>\n<h2 id=\"给-middleware-分发-store\"><a class=\"markdownIt-Anchor\" href=\"#给-middleware-分发-store\"></a> 给 middleware 分发 store</h2>\n<p>创建一个普通的 store 通过如下方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//applyMiddleware 函数陆续获得了三个参数</span><br><span class=\"line\">//第一个是 middlewares 数组，[mid1, mid2, mid3, ...]</span><br><span class=\"line\">//第二个 next 是 Redux 原生的 createStore</span><br><span class=\"line\">//最后一个是 reducer</span><br><span class=\"line\">let newStore = applyMiddleware(mid1, mid2, mid3, ...)(createStore)(reducer, null);</span><br></pre></td></tr></table></figure>\n<h2 id=\"组合串联-middlewares\"><a class=\"markdownIt-Anchor\" href=\"#组合串联-middlewares\"></a> 组合串联 middlewares</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch = compose(...chain)(store.dispatch);</span><br></pre></td></tr></table></figure>\n<p>compose 是函数式编程中的组合，compose 将 chain 中的所有匿名函数，[f1, f2, … , fx, …, fn]，组装成一个新的函数，即新的 dispatch，当新 dispatch 执行时，[f1, f2, … , fx, …, fn]，从右到左依次执行（ 所以顺序很重要）</p>\n<h2 id=\"在-middleware-中调用-dispatch\"><a class=\"markdownIt-Anchor\" href=\"#在-middleware-中调用-dispatch\"></a> 在 middleware 中调用 dispatch</h2>\n<p>在middleware 中调用 store.dispatch() 和在其他任何地方调用效果是一样的，而在 middleware 中调用 next()，效果是进入下一个 middleware</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://zhuanlan.zhihu.com/p/20597452\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/20597452</a></p>\n<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<ul>\n<li>middleware 提供了一个分类处理 action 的机会，在 middleware 中你可以检阅每一个流过的 action，挑选出特定类型的 action 进行相应操作，给你一次改变 action 的机会</li>\n<li>redux 的 middleware 是为了增强 dispatch 而出现的</li>\n<li>redux 提供了 applyMiddleware 这个 api 来加载 middleware</li>\n</ul>\n<p><img src=\"/pub-images/redux-middleware1.png\" alt=\"image\"><br>\n<img src=\"/pub-images/redux-middleware2.png\" alt=\"image\"></p>\n<h1 id=\"四步理解-middleware-机制\"><a class=\"markdownIt-Anchor\" href=\"#四步理解-middleware-机制\"></a> 四步理解 middleware 机制</h1>\n<p><img src=\"/pub-images/middleware%E6%9C%BA%E5%88%B6%E7%A4%BA%E4%BE%8B.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var middlewareAPI = &#123;</span><br><span class=\"line\">  getState: store.getState,</span><br><span class=\"line\">  dispatch: (action) =&gt; dispatch(action)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">chain = middlewares.map(middleware =&gt; middleware(middlewareAPI));</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数式编程思想设计-middleware\"><a class=\"markdownIt-Anchor\" href=\"#函数式编程思想设计-middleware\"></a> 函数式编程思想设计 middleware</h2>\n<p>middleware 的设计有点特殊，是一个层层包裹的匿名函数，这其实是函数式编程中的柯里化 curry，一种使用匿名单参数函数来实现多参数函数的方法。applyMiddleware 会对 logger 这个 middleware 进行层层调用，动态地对 store 和 next 参数赋值</p>\n<p>柯里化的 middleware 结构好处在于：</p>\n<ol>\n<li>易串联，柯里化函数具有延迟执行的特性，通过不断柯里化形成的 middleware 可以累积参数，配合组合（ compose，函数式编程的概念，Step. 2 中会介绍）的方式，很容易形成 pipeline 来处理数据流</li>\n<li>共享store，在 applyMiddleware 执行过程中，store 还是旧的，但是因为闭包的存在，applyMiddleware 完成后，所有的 middlewares 内部拿到的 store 是最新且相同的</li>\n</ol>\n<h2 id=\"给-middleware-分发-store\"><a class=\"markdownIt-Anchor\" href=\"#给-middleware-分发-store\"></a> 给 middleware 分发 store</h2>\n<p>创建一个普通的 store 通过如下方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//applyMiddleware 函数陆续获得了三个参数</span><br><span class=\"line\">//第一个是 middlewares 数组，[mid1, mid2, mid3, ...]</span><br><span class=\"line\">//第二个 next 是 Redux 原生的 createStore</span><br><span class=\"line\">//最后一个是 reducer</span><br><span class=\"line\">let newStore = applyMiddleware(mid1, mid2, mid3, ...)(createStore)(reducer, null);</span><br></pre></td></tr></table></figure>\n<h2 id=\"组合串联-middlewares\"><a class=\"markdownIt-Anchor\" href=\"#组合串联-middlewares\"></a> 组合串联 middlewares</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch = compose(...chain)(store.dispatch);</span><br></pre></td></tr></table></figure>\n<p>compose 是函数式编程中的组合，compose 将 chain 中的所有匿名函数，[f1, f2, … , fx, …, fn]，组装成一个新的函数，即新的 dispatch，当新 dispatch 执行时，[f1, f2, … , fx, …, fn]，从右到左依次执行（ 所以顺序很重要）</p>\n<h2 id=\"在-middleware-中调用-dispatch\"><a class=\"markdownIt-Anchor\" href=\"#在-middleware-中调用-dispatch\"></a> 在 middleware 中调用 dispatch</h2>\n<p>在middleware 中调用 store.dispatch() 和在其他任何地方调用效果是一样的，而在 middleware 中调用 next()，效果是进入下一个 middleware</p>\n"},{"title":"NuGet","copyright":true,"comments":1,"toc":true,"date":"2018-11-02T02:44:02.000Z","password":null,"_content":"\n\nhttps://www.cnblogs.com/nizhenghua/p/6422078.html","source":"_posts/2018-11-02-NuGet.md","raw":"---\ntitle: NuGet\ntags:\n  - C# \ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-11-02 10:44:02\ncategories: C#\npassword:\n---\n\n\nhttps://www.cnblogs.com/nizhenghua/p/6422078.html","slug":"NuGet","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrq90018ck8hu026gufq","content":"<p><a href=\"https://www.cnblogs.com/nizhenghua/p/6422078.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/nizhenghua/p/6422078.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.cnblogs.com/nizhenghua/p/6422078.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/nizhenghua/p/6422078.html</a></p>\n"},{"title":"redux-thunk","copyright":true,"comments":1,"toc":true,"date":"2018-10-26T07:30:47.000Z","password":null,"_content":"# 简介\n* redux-thunk 是一个比较流行的 redux 异步 action 中间件，比如 action 中有 setTimeout 或者通过  fetch 通用远程 API 这些场景，那么久应该使用 redux-thunk 了\n* redux-thunk 帮助你统一了异步和同步 action 的调用方式，把异步过程放在 action 级别解决，对 component 没有影响\n* redux-thunk中间件可以让action创建函数先不返回一个action对象，而是返回一个函数，函数传递两个参数(dispatch,getState),在函数体内进行业务逻辑的封装\n~~~\nfunction add() {\n    return {\n        type: 'ADD',\n    }\n}\n\nfunction addIfOdd() {\n    return (dispatch, getState) => {\n        const currentValue = getState();\n        if (currentValue % 2 == 0) {\n            return false;\n        }\n        //分发一个任务\n        dispatch(add())\n    }\n}\n~~~\n\n# 使用方式\n1. 安装:npm install redux-thunk --save-dev\n2. 导入thunk： import thunk from 'redux-thunk'\n3. 导入中间件: import {createStore,applyMiddleware} from 'redux'\n4. 创建store：let store = createStore(reducer函数，applyMiddleware(thunk))\n5. 激活redux-thunk中间件，只需要在createStore中加入applyMiddleware(thunk)就可以","source":"_posts/2018-10-26-redux-thunk.md","raw":"---\ntitle: redux-thunk\ntags:\n  - React\n  - redux组件库\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-26 15:30:47\ncategories: React\npassword:\n---\n# 简介\n* redux-thunk 是一个比较流行的 redux 异步 action 中间件，比如 action 中有 setTimeout 或者通过  fetch 通用远程 API 这些场景，那么久应该使用 redux-thunk 了\n* redux-thunk 帮助你统一了异步和同步 action 的调用方式，把异步过程放在 action 级别解决，对 component 没有影响\n* redux-thunk中间件可以让action创建函数先不返回一个action对象，而是返回一个函数，函数传递两个参数(dispatch,getState),在函数体内进行业务逻辑的封装\n~~~\nfunction add() {\n    return {\n        type: 'ADD',\n    }\n}\n\nfunction addIfOdd() {\n    return (dispatch, getState) => {\n        const currentValue = getState();\n        if (currentValue % 2 == 0) {\n            return false;\n        }\n        //分发一个任务\n        dispatch(add())\n    }\n}\n~~~\n\n# 使用方式\n1. 安装:npm install redux-thunk --save-dev\n2. 导入thunk： import thunk from 'redux-thunk'\n3. 导入中间件: import {createStore,applyMiddleware} from 'redux'\n4. 创建store：let store = createStore(reducer函数，applyMiddleware(thunk))\n5. 激活redux-thunk中间件，只需要在createStore中加入applyMiddleware(thunk)就可以","slug":"redux-thunk","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrqa001bck8ht0wqu6rr","content":"<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<ul>\n<li>redux-thunk 是一个比较流行的 redux 异步 action 中间件，比如 action 中有 setTimeout 或者通过  fetch 通用远程 API 这些场景，那么久应该使用 redux-thunk 了</li>\n<li>redux-thunk 帮助你统一了异步和同步 action 的调用方式，把异步过程放在 action 级别解决，对 component 没有影响</li>\n<li>redux-thunk中间件可以让action创建函数先不返回一个action对象，而是返回一个函数，函数传递两个参数(dispatch,getState),在函数体内进行业务逻辑的封装</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        type: &apos;ADD&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function addIfOdd() &#123;</span><br><span class=\"line\">    return (dispatch, getState) =&gt; &#123;</span><br><span class=\"line\">        const currentValue = getState();</span><br><span class=\"line\">        if (currentValue % 2 == 0) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //分发一个任务</span><br><span class=\"line\">        dispatch(add())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用方式\"><a class=\"markdownIt-Anchor\" href=\"#使用方式\"></a> 使用方式</h1>\n<ol>\n<li>安装:npm install redux-thunk --save-dev</li>\n<li>导入thunk： import thunk from ‘redux-thunk’</li>\n<li>导入中间件: import {createStore,applyMiddleware} from ‘redux’</li>\n<li>创建store：let store = createStore(reducer函数，applyMiddleware(thunk))</li>\n<li>激活redux-thunk中间件，只需要在createStore中加入applyMiddleware(thunk)就可以</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<ul>\n<li>redux-thunk 是一个比较流行的 redux 异步 action 中间件，比如 action 中有 setTimeout 或者通过  fetch 通用远程 API 这些场景，那么久应该使用 redux-thunk 了</li>\n<li>redux-thunk 帮助你统一了异步和同步 action 的调用方式，把异步过程放在 action 级别解决，对 component 没有影响</li>\n<li>redux-thunk中间件可以让action创建函数先不返回一个action对象，而是返回一个函数，函数传递两个参数(dispatch,getState),在函数体内进行业务逻辑的封装</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        type: &apos;ADD&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function addIfOdd() &#123;</span><br><span class=\"line\">    return (dispatch, getState) =&gt; &#123;</span><br><span class=\"line\">        const currentValue = getState();</span><br><span class=\"line\">        if (currentValue % 2 == 0) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //分发一个任务</span><br><span class=\"line\">        dispatch(add())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用方式\"><a class=\"markdownIt-Anchor\" href=\"#使用方式\"></a> 使用方式</h1>\n<ol>\n<li>安装:npm install redux-thunk --save-dev</li>\n<li>导入thunk： import thunk from ‘redux-thunk’</li>\n<li>导入中间件: import {createStore,applyMiddleware} from ‘redux’</li>\n<li>创建store：let store = createStore(reducer函数，applyMiddleware(thunk))</li>\n<li>激活redux-thunk中间件，只需要在createStore中加入applyMiddleware(thunk)就可以</li>\n</ol>\n"},{"title":"Kotlin","copyright":true,"comments":1,"toc":true,"date":"2018-11-26T13:25:33.000Z","password":null,"_content":"\nhttp://kotlinlang.org/\nhttps://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt\n\nKotlin作者Andrey\nKotlin是一种在 Java 虚拟机上运行的静态类型编程语言,被称之为 Android 世界的Swift,由 JetBrains 设计开发并开源\nKotlin是一种运行在Java虚拟机、Android、浏览器上的静态语言 \nKotlin可以编译成Java字节码，也可以编译成 JavaScript，方便在没有 JVM 的设备上运行。\nAndroid官方语言；100%兼容Java；Kotlin-js前端开发；Kotlin-jvm服务端开发；Kotlin-native本地执行程序；Kotlin是一门全栈语言\n\n千里之行，始于Hello World\n\n\nKotlin不存在拆箱装箱问题;Kotlin不可隐式转换类型 \nvar tmp:[类型]=[变量值]\n\nBoolean类型\nNumber数据类型：Byte，Short，Int，Long，Float，Double\nChar数据类型：Char\nString数据类型：String         字符串a==b 比较内容；a===b比较应用  字符串模版$args1  ${args1+args2},引号中$引用变量 ，多行\n    var a:String ...\n        a1\n        a2\n    ...\n\nKotlin中 Any 等于 Java中 Object，是顶级类\n\n空类型：任意类型都有可空和不可空两种状态，？表示可为空，!!表示强制认定nullable不可为空\nfun main(args:Array<String>){\n    var name:String = getName() ?: return\n    println(name)\n\n    var tmp:String? = \"Hello Kotlin\"\n    println(tmp)\n    println(tmp!!.length)\n}\n\nfun getName():String?{\n    return null\n}\n \n智能类型转换\nJava方式的：var sub:Subclass = parent as Subclass   //类似于Java方式，转换异常则会抛异常\n安全类型转换：var sub:Subclass? = parent as? Subclass   //如果转换失败，则返回null，不抛异常\n\nif(parent is Subclass)\n\n\nimport com.test as test\n\n区间Range:一个数学上的概念，表示范围；是ClosedRange的子类，IntRange最常用；i in 0..1024 判断i是否在区间内\nvar range:IntRange = 0..1024    //[0,1024]\nvar range:IntRange = 0 until 1024    //[0,1024) == [0,1023]\n\nclassName::java.class.name\nclassName::java.class.simpleName\n\n数组: val array:Array<> = arrayOf(...)\n为了避免不必要的拆箱和装箱，基本类型的数组是定制的\nval arrayOfInt:IntArray = intArrayOf(1,2,4)\nval arrayOfChar:CharArray = charArrayOf('H','e','y')\nval arrayOfString: Array<String> = arrayOf(\"Hello\",\"Kotlin\")\nval arrayOfOther:Array<Other> = arrayOf(Other(1),Other(2))\n\n常量：val，常量因为赋值了，编译器可以推导出来类型，所以类型可以不用写，变量：var\n\nExternal Tools\nTools->Kotlin->Show Kotlin Bytecode\n\n函数：Kotlin中没有申明返回值的默认返回值是Unit\nkotlinc安装，使用和javac一样\n变量函数\nvar int2Long = fun(x:Int):Long{\n    return x.toLong()\n} \nint2Long(123)\nfun sum(arg1:Int,arg2:Int) = arg1+arg2\nLambda表达式调用使用()或者invoke(),如：sum(1,2) 或 sum.invoke(1,2)\nLambda表达式--匿名函数\n\nvar = {arg1:Int,arg2:Int -> arg1+arg2}\n\narrayOfString.forEach { println(it) }   //如果字面函数只有一个参数,可以省略该参数声明,并用“it”代替\narrayOfString.forEach(::println)\n\nLambda表达式中的return\nhttps://www.jianshu.com/p/92cd94cba709?utm_source=oschina-app\n\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\nindexes.forEach {\n    if (it > 5) {\n        return@forEach\n    }\n    println(it)\n}\n\nindexes.forEach label@ {\n    if (it > 5) {\n        return @label\n    }\n    println(it)\n}\n\n函数参数调用时最后一个Lambda可以移出去\n函数参数只有一个Lambda，调用时小括号可以省略\nLambda有一个参数，可默认为it\n入参、返回值与形参一致的函数可以用函数引用的方式作为实参传入\n\n类成员方法和成员变量\nclass B\nclass A{\n\tvar b=0;\n    lateinit var c:String \n    val d:B by lazy{\n        B()\n    }\n}\n属性初始化\n1. 尽量在构造方法中完成\n2. 无法在构造方法中完成的，尝试降级为局部变量\n3. var用lateinit延迟初始化，val用lazy\n4. 可空类型慎用null直接初始化\n\n\n中缀表达式：只有一个参数，且用infix修饰的函数\nclass Book {infix fun on(placeString:String){...}}\nBook() on \"My Desk\" //使用方式\n分支表达式：\nval mode=if(args.isNotEmpty() && args[0] ==1){\n    0\n}else{\n    1    \n}\n\n异常捕捉\ntry ..catch ..finally中的执行完之后，再返回结果，可通过var获取返回值\n\n具名参数：sum(arg1=2,arg0=3)  //参数就可以不按照顺序传递了\n变长参数：如main方法中的args\nfun test(vararg  args:String){}\n默认参数：给出参数默认值\n\n导出可执行程序\n\nkotlin应用场景：\n\nkotlin-android\n\n\n","source":"_posts/2018-11-26-Kotlin.md","raw":"---\ntitle: Kotlin\ntags:\n  - Kotlin入门 \ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-11-26 21:25:33\ncategories: Kotlin\npassword:\n---\n\nhttp://kotlinlang.org/\nhttps://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt\n\nKotlin作者Andrey\nKotlin是一种在 Java 虚拟机上运行的静态类型编程语言,被称之为 Android 世界的Swift,由 JetBrains 设计开发并开源\nKotlin是一种运行在Java虚拟机、Android、浏览器上的静态语言 \nKotlin可以编译成Java字节码，也可以编译成 JavaScript，方便在没有 JVM 的设备上运行。\nAndroid官方语言；100%兼容Java；Kotlin-js前端开发；Kotlin-jvm服务端开发；Kotlin-native本地执行程序；Kotlin是一门全栈语言\n\n千里之行，始于Hello World\n\n\nKotlin不存在拆箱装箱问题;Kotlin不可隐式转换类型 \nvar tmp:[类型]=[变量值]\n\nBoolean类型\nNumber数据类型：Byte，Short，Int，Long，Float，Double\nChar数据类型：Char\nString数据类型：String         字符串a==b 比较内容；a===b比较应用  字符串模版$args1  ${args1+args2},引号中$引用变量 ，多行\n    var a:String ...\n        a1\n        a2\n    ...\n\nKotlin中 Any 等于 Java中 Object，是顶级类\n\n空类型：任意类型都有可空和不可空两种状态，？表示可为空，!!表示强制认定nullable不可为空\nfun main(args:Array<String>){\n    var name:String = getName() ?: return\n    println(name)\n\n    var tmp:String? = \"Hello Kotlin\"\n    println(tmp)\n    println(tmp!!.length)\n}\n\nfun getName():String?{\n    return null\n}\n \n智能类型转换\nJava方式的：var sub:Subclass = parent as Subclass   //类似于Java方式，转换异常则会抛异常\n安全类型转换：var sub:Subclass? = parent as? Subclass   //如果转换失败，则返回null，不抛异常\n\nif(parent is Subclass)\n\n\nimport com.test as test\n\n区间Range:一个数学上的概念，表示范围；是ClosedRange的子类，IntRange最常用；i in 0..1024 判断i是否在区间内\nvar range:IntRange = 0..1024    //[0,1024]\nvar range:IntRange = 0 until 1024    //[0,1024) == [0,1023]\n\nclassName::java.class.name\nclassName::java.class.simpleName\n\n数组: val array:Array<> = arrayOf(...)\n为了避免不必要的拆箱和装箱，基本类型的数组是定制的\nval arrayOfInt:IntArray = intArrayOf(1,2,4)\nval arrayOfChar:CharArray = charArrayOf('H','e','y')\nval arrayOfString: Array<String> = arrayOf(\"Hello\",\"Kotlin\")\nval arrayOfOther:Array<Other> = arrayOf(Other(1),Other(2))\n\n常量：val，常量因为赋值了，编译器可以推导出来类型，所以类型可以不用写，变量：var\n\nExternal Tools\nTools->Kotlin->Show Kotlin Bytecode\n\n函数：Kotlin中没有申明返回值的默认返回值是Unit\nkotlinc安装，使用和javac一样\n变量函数\nvar int2Long = fun(x:Int):Long{\n    return x.toLong()\n} \nint2Long(123)\nfun sum(arg1:Int,arg2:Int) = arg1+arg2\nLambda表达式调用使用()或者invoke(),如：sum(1,2) 或 sum.invoke(1,2)\nLambda表达式--匿名函数\n\nvar = {arg1:Int,arg2:Int -> arg1+arg2}\n\narrayOfString.forEach { println(it) }   //如果字面函数只有一个参数,可以省略该参数声明,并用“it”代替\narrayOfString.forEach(::println)\n\nLambda表达式中的return\nhttps://www.jianshu.com/p/92cd94cba709?utm_source=oschina-app\n\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\nindexes.forEach {\n    if (it > 5) {\n        return@forEach\n    }\n    println(it)\n}\n\nindexes.forEach label@ {\n    if (it > 5) {\n        return @label\n    }\n    println(it)\n}\n\n函数参数调用时最后一个Lambda可以移出去\n函数参数只有一个Lambda，调用时小括号可以省略\nLambda有一个参数，可默认为it\n入参、返回值与形参一致的函数可以用函数引用的方式作为实参传入\n\n类成员方法和成员变量\nclass B\nclass A{\n\tvar b=0;\n    lateinit var c:String \n    val d:B by lazy{\n        B()\n    }\n}\n属性初始化\n1. 尽量在构造方法中完成\n2. 无法在构造方法中完成的，尝试降级为局部变量\n3. var用lateinit延迟初始化，val用lazy\n4. 可空类型慎用null直接初始化\n\n\n中缀表达式：只有一个参数，且用infix修饰的函数\nclass Book {infix fun on(placeString:String){...}}\nBook() on \"My Desk\" //使用方式\n分支表达式：\nval mode=if(args.isNotEmpty() && args[0] ==1){\n    0\n}else{\n    1    \n}\n\n异常捕捉\ntry ..catch ..finally中的执行完之后，再返回结果，可通过var获取返回值\n\n具名参数：sum(arg1=2,arg0=3)  //参数就可以不按照顺序传递了\n变长参数：如main方法中的args\nfun test(vararg  args:String){}\n默认参数：给出参数默认值\n\n导出可执行程序\n\nkotlin应用场景：\n\nkotlin-android\n\n\n","slug":"Kotlin","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrqb001eck8h1ea2cnwh","content":"<p><a href=\"http://kotlinlang.org/\" target=\"_blank\" rel=\"noopener\">http://kotlinlang.org/</a><br>\n<a href=\"https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt\" target=\"_blank\" rel=\"noopener\">https://try.kotlinlang.org/#/Examples/Hello, world!/Simplest version/Simplest version.kt</a></p>\n<p>Kotlin作者Andrey<br>\nKotlin是一种在 Java 虚拟机上运行的静态类型编程语言,被称之为 Android 世界的Swift,由 JetBrains 设计开发并开源<br>\nKotlin是一种运行在Java虚拟机、Android、浏览器上的静态语言<br>\nKotlin可以编译成Java字节码，也可以编译成 JavaScript，方便在没有 JVM 的设备上运行。<br>\nAndroid官方语言；100%兼容Java；Kotlin-js前端开发；Kotlin-jvm服务端开发；Kotlin-native本地执行程序；Kotlin是一门全栈语言</p>\n<p>千里之行，始于Hello World</p>\n<p>Kotlin不存在拆箱装箱问题;Kotlin不可隐式转换类型<br>\nvar tmp:[类型]=[变量值]</p>\n<p>Boolean类型<br>\nNumber数据类型：Byte，Short，Int，Long，Float，Double<br>\nChar数据类型：Char<br>\nString数据类型：String         字符串a==b 比较内容；a===b比较应用  字符串模版$args1  <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi>a</mi><mi>r</mi><mi>g</mi><mi>s</mi><mn>1</mn><mo>+</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi>s</mi><mn>2</mn></mrow><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">引</mi><mi mathvariant=\"normal\">号</mi><mi mathvariant=\"normal\">中</mi></mrow><annotation encoding=\"application/x-tex\">{args1+args2},引号中</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">s</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">s</span><span class=\"mord\">2</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">引</span><span class=\"mord cjk_fallback\">号</span><span class=\"mord cjk_fallback\">中</span></span></span></span>引用变量 ，多行<br>\nvar a:String …<br>\na1<br>\na2<br>\n…</p>\n<p>Kotlin中 Any 等于 Java中 Object，是顶级类</p>\n<p>空类型：任意类型都有可空和不可空两种状态，？表示可为空，!!表示强制认定nullable不可为空<br>\nfun main(args:Array<string>){<br>\nvar name:String = getName() ?: return<br>\nprintln(name)</string></p>\n<pre><code>var tmp:String? = &quot;Hello Kotlin&quot;\nprintln(tmp)\nprintln(tmp!!.length)\n</code></pre>\n<p>}</p>\n<p>fun getName():String?{<br>\nreturn null<br>\n}</p>\n<p>智能类型转换<br>\nJava方式的：var sub:Subclass = parent as Subclass   //类似于Java方式，转换异常则会抛异常<br>\n安全类型转换：var sub:Subclass? = parent as? Subclass   //如果转换失败，则返回null，不抛异常</p>\n<p>if(parent is Subclass)</p>\n<p>import com.test as test</p>\n<p>区间Range:一个数学上的概念，表示范围；是ClosedRange的子类，IntRange最常用；i in 0…1024 判断i是否在区间内<br>\nvar range:IntRange = 0…1024    //[0,1024]<br>\nvar range:IntRange = 0 until 1024    //[0,1024) == [0,1023]</p>\n<p>className::java.class.name<br>\nclassName::java.class.simpleName</p>\n<p>数组: val array:Array&lt;&gt; = arrayOf(…)<br>\n为了避免不必要的拆箱和装箱，基本类型的数组是定制的<br>\nval arrayOfInt:IntArray = intArrayOf(1,2,4)<br>\nval arrayOfChar:CharArray = charArrayOf(‘H’,‘e’,‘y’)<br>\nval arrayOfString: Array<string> = arrayOf(“Hello”,“Kotlin”)<br>\nval arrayOfOther:Array<other> = arrayOf(Other(1),Other(2))</other></string></p>\n<p>常量：val，常量因为赋值了，编译器可以推导出来类型，所以类型可以不用写，变量：var</p>\n<p>External Tools<br>\nTools-&gt;Kotlin-&gt;Show Kotlin Bytecode</p>\n<p>函数：Kotlin中没有申明返回值的默认返回值是Unit<br>\nkotlinc安装，使用和javac一样<br>\n变量函数<br>\nvar int2Long = fun(x:Int):Long{<br>\nreturn x.toLong()<br>\n}<br>\nint2Long(123)<br>\nfun sum(arg1:Int,arg2:Int) = arg1+arg2<br>\nLambda表达式调用使用()或者invoke(),如：sum(1,2) 或 sum.invoke(1,2)<br>\nLambda表达式–匿名函数</p>\n<p>var = {arg1:Int,arg2:Int -&gt; arg1+arg2}</p>\n<p>arrayOfString.forEach { println(it) }   //如果字面函数只有一个参数,可以省略该参数声明,并用“it”代替<br>\narrayOfString.forEach(::println)</p>\n<p>Lambda表达式中的return<br>\n<a href=\"https://www.jianshu.com/p/92cd94cba709?utm_source=oschina-app\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/92cd94cba709?utm_source=oschina-app</a></p>\n<p>public inline fun <t> Array<out t=\"\">.forEach(action: (T) -&gt; Unit): Unit {<br>\nfor (element in this) action(element)<br>\n}</out></t></p>\n<p>indexes.forEach {<br>\nif (it &gt; 5) {<br>\nreturn@forEach<br>\n}<br>\nprintln(it)<br>\n}</p>\n<p>indexes.forEach label@ {<br>\nif (it &gt; 5) {<br>\nreturn @label<br>\n}<br>\nprintln(it)<br>\n}</p>\n<p>函数参数调用时最后一个Lambda可以移出去<br>\n函数参数只有一个Lambda，调用时小括号可以省略<br>\nLambda有一个参数，可默认为it<br>\n入参、返回值与形参一致的函数可以用函数引用的方式作为实参传入</p>\n<p>类成员方法和成员变量<br>\nclass B<br>\nclass A{<br>\nvar b=0;<br>\nlateinit var c:String<br>\nval d:B by lazy{<br>\nB()<br>\n}<br>\n}<br>\n属性初始化</p>\n<ol>\n<li>尽量在构造方法中完成</li>\n<li>无法在构造方法中完成的，尝试降级为局部变量</li>\n<li>var用lateinit延迟初始化，val用lazy</li>\n<li>可空类型慎用null直接初始化</li>\n</ol>\n<p>中缀表达式：只有一个参数，且用infix修饰的函数<br>\nclass Book {infix fun on(placeString:String){…}}<br>\nBook() on “My Desk” //使用方式<br>\n分支表达式：<br>\nval mode=if(args.isNotEmpty() &amp;&amp; args[0] ==1){<br>\n0<br>\n}else{<br>\n1<br>\n}</p>\n<p>异常捕捉<br>\ntry …catch …finally中的执行完之后，再返回结果，可通过var获取返回值</p>\n<p>具名参数：sum(arg1=2,arg0=3)  //参数就可以不按照顺序传递了<br>\n变长参数：如main方法中的args<br>\nfun test(vararg  args:String){}<br>\n默认参数：给出参数默认值</p>\n<p>导出可执行程序</p>\n<p>kotlin应用场景：</p>\n<p>kotlin-android</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://kotlinlang.org/\" target=\"_blank\" rel=\"noopener\">http://kotlinlang.org/</a><br>\n<a href=\"https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt\" target=\"_blank\" rel=\"noopener\">https://try.kotlinlang.org/#/Examples/Hello, world!/Simplest version/Simplest version.kt</a></p>\n<p>Kotlin作者Andrey<br>\nKotlin是一种在 Java 虚拟机上运行的静态类型编程语言,被称之为 Android 世界的Swift,由 JetBrains 设计开发并开源<br>\nKotlin是一种运行在Java虚拟机、Android、浏览器上的静态语言<br>\nKotlin可以编译成Java字节码，也可以编译成 JavaScript，方便在没有 JVM 的设备上运行。<br>\nAndroid官方语言；100%兼容Java；Kotlin-js前端开发；Kotlin-jvm服务端开发；Kotlin-native本地执行程序；Kotlin是一门全栈语言</p>\n<p>千里之行，始于Hello World</p>\n<p>Kotlin不存在拆箱装箱问题;Kotlin不可隐式转换类型<br>\nvar tmp:[类型]=[变量值]</p>\n<p>Boolean类型<br>\nNumber数据类型：Byte，Short，Int，Long，Float，Double<br>\nChar数据类型：Char<br>\nString数据类型：String         字符串a==b 比较内容；a===b比较应用  字符串模版$args1  <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi>a</mi><mi>r</mi><mi>g</mi><mi>s</mi><mn>1</mn><mo>+</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi>s</mi><mn>2</mn></mrow><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">引</mi><mi mathvariant=\"normal\">号</mi><mi mathvariant=\"normal\">中</mi></mrow><annotation encoding=\"application/x-tex\">{args1+args2},引号中</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">s</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">s</span><span class=\"mord\">2</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">引</span><span class=\"mord cjk_fallback\">号</span><span class=\"mord cjk_fallback\">中</span></span></span></span>引用变量 ，多行<br>\nvar a:String …<br>\na1<br>\na2<br>\n…</p>\n<p>Kotlin中 Any 等于 Java中 Object，是顶级类</p>\n<p>空类型：任意类型都有可空和不可空两种状态，？表示可为空，!!表示强制认定nullable不可为空<br>\nfun main(args:Array<string>){<br>\nvar name:String = getName() ?: return<br>\nprintln(name)</string></p>\n<pre><code>var tmp:String? = &quot;Hello Kotlin&quot;\nprintln(tmp)\nprintln(tmp!!.length)\n</code></pre>\n<p>}</p>\n<p>fun getName():String?{<br>\nreturn null<br>\n}</p>\n<p>智能类型转换<br>\nJava方式的：var sub:Subclass = parent as Subclass   //类似于Java方式，转换异常则会抛异常<br>\n安全类型转换：var sub:Subclass? = parent as? Subclass   //如果转换失败，则返回null，不抛异常</p>\n<p>if(parent is Subclass)</p>\n<p>import com.test as test</p>\n<p>区间Range:一个数学上的概念，表示范围；是ClosedRange的子类，IntRange最常用；i in 0…1024 判断i是否在区间内<br>\nvar range:IntRange = 0…1024    //[0,1024]<br>\nvar range:IntRange = 0 until 1024    //[0,1024) == [0,1023]</p>\n<p>className::java.class.name<br>\nclassName::java.class.simpleName</p>\n<p>数组: val array:Array&lt;&gt; = arrayOf(…)<br>\n为了避免不必要的拆箱和装箱，基本类型的数组是定制的<br>\nval arrayOfInt:IntArray = intArrayOf(1,2,4)<br>\nval arrayOfChar:CharArray = charArrayOf(‘H’,‘e’,‘y’)<br>\nval arrayOfString: Array<string> = arrayOf(“Hello”,“Kotlin”)<br>\nval arrayOfOther:Array<other> = arrayOf(Other(1),Other(2))</other></string></p>\n<p>常量：val，常量因为赋值了，编译器可以推导出来类型，所以类型可以不用写，变量：var</p>\n<p>External Tools<br>\nTools-&gt;Kotlin-&gt;Show Kotlin Bytecode</p>\n<p>函数：Kotlin中没有申明返回值的默认返回值是Unit<br>\nkotlinc安装，使用和javac一样<br>\n变量函数<br>\nvar int2Long = fun(x:Int):Long{<br>\nreturn x.toLong()<br>\n}<br>\nint2Long(123)<br>\nfun sum(arg1:Int,arg2:Int) = arg1+arg2<br>\nLambda表达式调用使用()或者invoke(),如：sum(1,2) 或 sum.invoke(1,2)<br>\nLambda表达式–匿名函数</p>\n<p>var = {arg1:Int,arg2:Int -&gt; arg1+arg2}</p>\n<p>arrayOfString.forEach { println(it) }   //如果字面函数只有一个参数,可以省略该参数声明,并用“it”代替<br>\narrayOfString.forEach(::println)</p>\n<p>Lambda表达式中的return<br>\n<a href=\"https://www.jianshu.com/p/92cd94cba709?utm_source=oschina-app\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/92cd94cba709?utm_source=oschina-app</a></p>\n<p>public inline fun <t> Array<out t=\"\">.forEach(action: (T) -&gt; Unit): Unit {<br>\nfor (element in this) action(element)<br>\n}</out></t></p>\n<p>indexes.forEach {<br>\nif (it &gt; 5) {<br>\nreturn@forEach<br>\n}<br>\nprintln(it)<br>\n}</p>\n<p>indexes.forEach label@ {<br>\nif (it &gt; 5) {<br>\nreturn @label<br>\n}<br>\nprintln(it)<br>\n}</p>\n<p>函数参数调用时最后一个Lambda可以移出去<br>\n函数参数只有一个Lambda，调用时小括号可以省略<br>\nLambda有一个参数，可默认为it<br>\n入参、返回值与形参一致的函数可以用函数引用的方式作为实参传入</p>\n<p>类成员方法和成员变量<br>\nclass B<br>\nclass A{<br>\nvar b=0;<br>\nlateinit var c:String<br>\nval d:B by lazy{<br>\nB()<br>\n}<br>\n}<br>\n属性初始化</p>\n<ol>\n<li>尽量在构造方法中完成</li>\n<li>无法在构造方法中完成的，尝试降级为局部变量</li>\n<li>var用lateinit延迟初始化，val用lazy</li>\n<li>可空类型慎用null直接初始化</li>\n</ol>\n<p>中缀表达式：只有一个参数，且用infix修饰的函数<br>\nclass Book {infix fun on(placeString:String){…}}<br>\nBook() on “My Desk” //使用方式<br>\n分支表达式：<br>\nval mode=if(args.isNotEmpty() &amp;&amp; args[0] ==1){<br>\n0<br>\n}else{<br>\n1<br>\n}</p>\n<p>异常捕捉<br>\ntry …catch …finally中的执行完之后，再返回结果，可通过var获取返回值</p>\n<p>具名参数：sum(arg1=2,arg0=3)  //参数就可以不按照顺序传递了<br>\n变长参数：如main方法中的args<br>\nfun test(vararg  args:String){}<br>\n默认参数：给出参数默认值</p>\n<p>导出可执行程序</p>\n<p>kotlin应用场景：</p>\n<p>kotlin-android</p>\n"},{"title":"SpringBoot","copyright":true,"comments":1,"toc":true,"date":"2018-11-26T06:41:51.000Z","password":null,"_content":"\nhttp://spring.io/\n\nhttps://www.imooc.com/video/16358\n\n英文文档：https://docs.spring.io/spring-boot/docs/current/reference/\n\nSpring Framework是一种JavaEE的框架\nSpring Boot是一种快速构建的Spring应用\nSpring Cloud是构建SpringBoot的分布式应用\n\nSpringBoot2.0\n编程语言：Java 8+，Kotlin，底层框架：SpringFramework 5.0.X,支持Web Flux\n\nWeb Flux  \n1. 支持函数编程，Java 8 Lambda\n2. 响应式编程,Reactive Streams\n3. 异步编程，Servlet3.1和Asyc NIO\n\nInteliJ中配置Java和Maven\n\n构建项目：\n图形化方式\n1 http://start.spring.io/ ，输入选择Reactive Web\n2 导入项目\n命令行方式（Maven）\nmvn archetype:generate -DinteractiveMode=false -DgroupId=com.test -DartifactId=first-app-by-maven -Dversion=1.0.0-SNAPSHOT\n添加\n <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.5.9.RELEASE</version>\n    <relativePath/>\n</parent>\n    \n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n\n取消Junit的版本，需要4.1.2以上，取掉之后spring-boot-starter-parent继承版本\n\n\n\n----\n父Module的packaging设置为pom \n\n\n打包方式\nJar包方式 \nWar包方式\n指定Main-class方式\n\n<plugin>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-maven-plugin</artifactId>\n  <version>1.5.4.RELEASE</version>\n  <configuration>\n    <mainClass>${start-class}</mainClass>\n    <layout>ZIP</layout>\n  </configuration>\n  <executions>\n    <execution>\n      <goals>\n        <goal>repackage</goal>\n      </goals>\n    </execution>\n  </executions>\n</plugin> \n\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html\n\njar包形式\nmvn -Dmaven.test.skip -U clean package\njava -jar [jar名称.jar]\n\n\nwar包形式，需要有webapp->WEB-INF->web.xml\njava -jar [war名称.war]\n\n\n运行模式\nIDEA方式\nJar／War方式\nMaven插件方式：\nmvn srping-boot:run//需要在Main方法module，使用前，需要在父Module mvn -Dmaven.test.skip -U clean install\nhttps://blog.csdn.net/taiyangdao/article/details/75303181\n\nConcurrentHashMap  http://www.importnew.com/28263.html  https://www.cnblogs.com/heyonggang/p/9112731.html\nAtomicInteger https://www.cnblogs.com/sharkli/p/5623524.html\n好的习惯，实体都实现toString()方法 \n\nFlux & Mono\nFlux：0到N个对象的集合\nMono：0到1个对象的集合\nReactive中的Flux和Mono是异步处理的，都是Publisher\n\n\nhttps://www.imooc.com/learn/1058\n组件自动装配：规约大于配置，专注核心业务\n外部化部署：一次构建、按需调配，到处运行\n嵌入式容器：内置容器、无需部署、独立运行\nSpringBoot Starter:简化依赖、按需装配、自我包含\nProduction-Ready：一站式运维、生态无缝整合\n\nJava 能长盛不衰，主要是命好。每当人们觉得 Java 不行了的时候，总会有英雄横刀救美。\n最初 Java 开发出来不知道有什么用的时候，发现可以用 Applet 在网页上做动画。后来企业级软件开发时代 JavaEE 大行其道，开源社区 Spring 桃李满天下。\n等到了移动时代，人们觉得 Java 要完蛋了，Google 拍马救市，收购并开放了 Android 平台，当家语言就是 Java，于是 Java 再次焕发勃勃生机。\n目前大数据领域，Java 同样是当仁不让的好手。\n\n现在 Spring Framework 那套东西使用了十几年，正当大家被长达几千行的 ApplicationContext 配置文件折磨的死去活来的时候，Spring Boot 诞生了。什么是 Spring Boot？用来简化 Spring 应用程序开发的。\n\n换句话说就是，当你觉得 Java 不好用的时候，我做了个轻量级的 S，让你好好用 Java。等你觉的 S 也不够轻了，我做了个 SB，让你觉得 S 还是挺轻的。\n\n\nhttps://www.imooc.com/video/16783\nSrpingBoot为微服务框架，与Spring4一起诞生\n\n\nhttps://docs.spring.io/spring-boot/docs/2.1.2.RELEASE/reference/htmlsingle/\n","source":"_posts/2018-11-26-SpringBoot.md","raw":"---\ntitle: SpringBoot\ntags:\n  - Spring\n  - Spring Boot\n  - JavaWeb\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-11-26 14:41:51\ncategories: Spring\npassword:\n---\n\nhttp://spring.io/\n\nhttps://www.imooc.com/video/16358\n\n英文文档：https://docs.spring.io/spring-boot/docs/current/reference/\n\nSpring Framework是一种JavaEE的框架\nSpring Boot是一种快速构建的Spring应用\nSpring Cloud是构建SpringBoot的分布式应用\n\nSpringBoot2.0\n编程语言：Java 8+，Kotlin，底层框架：SpringFramework 5.0.X,支持Web Flux\n\nWeb Flux  \n1. 支持函数编程，Java 8 Lambda\n2. 响应式编程,Reactive Streams\n3. 异步编程，Servlet3.1和Asyc NIO\n\nInteliJ中配置Java和Maven\n\n构建项目：\n图形化方式\n1 http://start.spring.io/ ，输入选择Reactive Web\n2 导入项目\n命令行方式（Maven）\nmvn archetype:generate -DinteractiveMode=false -DgroupId=com.test -DartifactId=first-app-by-maven -Dversion=1.0.0-SNAPSHOT\n添加\n <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.5.9.RELEASE</version>\n    <relativePath/>\n</parent>\n    \n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n\n取消Junit的版本，需要4.1.2以上，取掉之后spring-boot-starter-parent继承版本\n\n\n\n----\n父Module的packaging设置为pom \n\n\n打包方式\nJar包方式 \nWar包方式\n指定Main-class方式\n\n<plugin>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-maven-plugin</artifactId>\n  <version>1.5.4.RELEASE</version>\n  <configuration>\n    <mainClass>${start-class}</mainClass>\n    <layout>ZIP</layout>\n  </configuration>\n  <executions>\n    <execution>\n      <goals>\n        <goal>repackage</goal>\n      </goals>\n    </execution>\n  </executions>\n</plugin> \n\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html\n\njar包形式\nmvn -Dmaven.test.skip -U clean package\njava -jar [jar名称.jar]\n\n\nwar包形式，需要有webapp->WEB-INF->web.xml\njava -jar [war名称.war]\n\n\n运行模式\nIDEA方式\nJar／War方式\nMaven插件方式：\nmvn srping-boot:run//需要在Main方法module，使用前，需要在父Module mvn -Dmaven.test.skip -U clean install\nhttps://blog.csdn.net/taiyangdao/article/details/75303181\n\nConcurrentHashMap  http://www.importnew.com/28263.html  https://www.cnblogs.com/heyonggang/p/9112731.html\nAtomicInteger https://www.cnblogs.com/sharkli/p/5623524.html\n好的习惯，实体都实现toString()方法 \n\nFlux & Mono\nFlux：0到N个对象的集合\nMono：0到1个对象的集合\nReactive中的Flux和Mono是异步处理的，都是Publisher\n\n\nhttps://www.imooc.com/learn/1058\n组件自动装配：规约大于配置，专注核心业务\n外部化部署：一次构建、按需调配，到处运行\n嵌入式容器：内置容器、无需部署、独立运行\nSpringBoot Starter:简化依赖、按需装配、自我包含\nProduction-Ready：一站式运维、生态无缝整合\n\nJava 能长盛不衰，主要是命好。每当人们觉得 Java 不行了的时候，总会有英雄横刀救美。\n最初 Java 开发出来不知道有什么用的时候，发现可以用 Applet 在网页上做动画。后来企业级软件开发时代 JavaEE 大行其道，开源社区 Spring 桃李满天下。\n等到了移动时代，人们觉得 Java 要完蛋了，Google 拍马救市，收购并开放了 Android 平台，当家语言就是 Java，于是 Java 再次焕发勃勃生机。\n目前大数据领域，Java 同样是当仁不让的好手。\n\n现在 Spring Framework 那套东西使用了十几年，正当大家被长达几千行的 ApplicationContext 配置文件折磨的死去活来的时候，Spring Boot 诞生了。什么是 Spring Boot？用来简化 Spring 应用程序开发的。\n\n换句话说就是，当你觉得 Java 不好用的时候，我做了个轻量级的 S，让你好好用 Java。等你觉的 S 也不够轻了，我做了个 SB，让你觉得 S 还是挺轻的。\n\n\nhttps://www.imooc.com/video/16783\nSrpingBoot为微服务框架，与Spring4一起诞生\n\n\nhttps://docs.spring.io/spring-boot/docs/2.1.2.RELEASE/reference/htmlsingle/\n","slug":"SpringBoot","published":1,"updated":"2019-01-17T02:19:53.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrqc001hck8hqgwb822u","content":"<p><a href=\"http://spring.io/\" target=\"_blank\" rel=\"noopener\">http://spring.io/</a></p>\n<p><a href=\"https://www.imooc.com/video/16358\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/video/16358</a></p>\n<p>英文文档：<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-boot/docs/current/reference/</a></p>\n<p>Spring Framework是一种JavaEE的框架<br>\nSpring Boot是一种快速构建的Spring应用<br>\nSpring Cloud是构建SpringBoot的分布式应用</p>\n<p>SpringBoot2.0<br>\n编程语言：Java 8+，Kotlin，底层框架：SpringFramework 5.0.X,支持Web Flux</p>\n<p>Web Flux</p>\n<ol>\n<li>支持函数编程，Java 8 Lambda</li>\n<li>响应式编程,Reactive Streams</li>\n<li>异步编程，Servlet3.1和Asyc NIO</li>\n</ol>\n<p>InteliJ中配置Java和Maven</p>\n<p>构建项目：<br>\n图形化方式<br>\n1 <a href=\"http://start.spring.io/\" target=\"_blank\" rel=\"noopener\">http://start.spring.io/</a> ，输入选择Reactive Web<br>\n2 导入项目<br>\n命令行方式（Maven）<br>\nmvn archetype:generate -DinteractiveMode=false -DgroupId=com.test -DartifactId=first-app-by-maven -Dversion=1.0.0-SNAPSHOT<br>\n添加<br>\n<parent><br>\n<groupid>org.springframework.boot</groupid><br>\n<artifactid>spring-boot-starter-parent</artifactid><br>\n<version>1.5.9.RELEASE</version><br>\n<relativepath><br>\n</relativepath></parent></p>\n<dependencies>\n    <dependency>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-web</artifactid>\n    </dependency>\n</dependencies>\n<p>取消Junit的版本，需要4.1.2以上，取掉之后spring-boot-starter-parent继承版本</p>\n<hr>\n<p>父Module的packaging设置为pom</p>\n<p>打包方式<br>\nJar包方式<br>\nWar包方式<br>\n指定Main-class方式</p>\n<plugin>\n  <groupid>org.springframework.boot</groupid>\n  <artifactid>spring-boot-maven-plugin</artifactid>\n  <version>1.5.4.RELEASE</version>\n  <configuration>\n    <mainclass>${start-class}</mainclass>\n    <layout>ZIP</layout>\n  </configuration>\n  <executions>\n    <execution>\n      <goals>\n        <goal>repackage</goal>\n      </goals>\n    </execution>\n  </executions>\n</plugin> \n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html</a></p>\n<p>jar包形式<br>\nmvn -Dmaven.test.skip -U clean package<br>\njava -jar [jar名称.jar]</p>\n<p>war包形式，需要有webapp-&gt;WEB-INF-&gt;web.xml<br>\njava -jar [war名称.war]</p>\n<p>运行模式<br>\nIDEA方式<br>\nJar／War方式<br>\nMaven插件方式：<br>\nmvn srping-boot:run//需要在Main方法module，使用前，需要在父Module mvn -Dmaven.test.skip -U clean install<br>\n<a href=\"https://blog.csdn.net/taiyangdao/article/details/75303181\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/taiyangdao/article/details/75303181</a></p>\n<p>ConcurrentHashMap  <a href=\"http://www.importnew.com/28263.html\" target=\"_blank\" rel=\"noopener\">http://www.importnew.com/28263.html</a>  <a href=\"https://www.cnblogs.com/heyonggang/p/9112731.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/heyonggang/p/9112731.html</a><br>\nAtomicInteger <a href=\"https://www.cnblogs.com/sharkli/p/5623524.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/sharkli/p/5623524.html</a><br>\n好的习惯，实体都实现toString()方法</p>\n<p>Flux &amp; Mono<br>\nFlux：0到N个对象的集合<br>\nMono：0到1个对象的集合<br>\nReactive中的Flux和Mono是异步处理的，都是Publisher</p>\n<p><a href=\"https://www.imooc.com/learn/1058\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/learn/1058</a><br>\n组件自动装配：规约大于配置，专注核心业务<br>\n外部化部署：一次构建、按需调配，到处运行<br>\n嵌入式容器：内置容器、无需部署、独立运行<br>\nSpringBoot Starter:简化依赖、按需装配、自我包含<br>\nProduction-Ready：一站式运维、生态无缝整合</p>\n<p>Java 能长盛不衰，主要是命好。每当人们觉得 Java 不行了的时候，总会有英雄横刀救美。<br>\n最初 Java 开发出来不知道有什么用的时候，发现可以用 Applet 在网页上做动画。后来企业级软件开发时代 JavaEE 大行其道，开源社区 Spring 桃李满天下。<br>\n等到了移动时代，人们觉得 Java 要完蛋了，Google 拍马救市，收购并开放了 Android 平台，当家语言就是 Java，于是 Java 再次焕发勃勃生机。<br>\n目前大数据领域，Java 同样是当仁不让的好手。</p>\n<p>现在 Spring Framework 那套东西使用了十几年，正当大家被长达几千行的 ApplicationContext 配置文件折磨的死去活来的时候，Spring Boot 诞生了。什么是 Spring Boot？用来简化 Spring 应用程序开发的。</p>\n<p>换句话说就是，当你觉得 Java 不好用的时候，我做了个轻量级的 S，让你好好用 Java。等你觉的 S 也不够轻了，我做了个 SB，让你觉得 S 还是挺轻的。</p>\n<p><a href=\"https://www.imooc.com/video/16783\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/video/16783</a><br>\nSrpingBoot为微服务框架，与Spring4一起诞生</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.1.2.RELEASE/reference/htmlsingle/\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-boot/docs/2.1.2.RELEASE/reference/htmlsingle/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://spring.io/\" target=\"_blank\" rel=\"noopener\">http://spring.io/</a></p>\n<p><a href=\"https://www.imooc.com/video/16358\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/video/16358</a></p>\n<p>英文文档：<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-boot/docs/current/reference/</a></p>\n<p>Spring Framework是一种JavaEE的框架<br>\nSpring Boot是一种快速构建的Spring应用<br>\nSpring Cloud是构建SpringBoot的分布式应用</p>\n<p>SpringBoot2.0<br>\n编程语言：Java 8+，Kotlin，底层框架：SpringFramework 5.0.X,支持Web Flux</p>\n<p>Web Flux</p>\n<ol>\n<li>支持函数编程，Java 8 Lambda</li>\n<li>响应式编程,Reactive Streams</li>\n<li>异步编程，Servlet3.1和Asyc NIO</li>\n</ol>\n<p>InteliJ中配置Java和Maven</p>\n<p>构建项目：<br>\n图形化方式<br>\n1 <a href=\"http://start.spring.io/\" target=\"_blank\" rel=\"noopener\">http://start.spring.io/</a> ，输入选择Reactive Web<br>\n2 导入项目<br>\n命令行方式（Maven）<br>\nmvn archetype:generate -DinteractiveMode=false -DgroupId=com.test -DartifactId=first-app-by-maven -Dversion=1.0.0-SNAPSHOT<br>\n添加<br>\n<parent><br>\n<groupid>org.springframework.boot</groupid><br>\n<artifactid>spring-boot-starter-parent</artifactid><br>\n<version>1.5.9.RELEASE</version><br>\n<relativepath><br>\n</relativepath></parent></p>\n<dependencies>\n    <dependency>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-web</artifactid>\n    </dependency>\n</dependencies>\n<p>取消Junit的版本，需要4.1.2以上，取掉之后spring-boot-starter-parent继承版本</p>\n<hr>\n<p>父Module的packaging设置为pom</p>\n<p>打包方式<br>\nJar包方式<br>\nWar包方式<br>\n指定Main-class方式</p>\n<plugin>\n  <groupid>org.springframework.boot</groupid>\n  <artifactid>spring-boot-maven-plugin</artifactid>\n  <version>1.5.4.RELEASE</version>\n  <configuration>\n    <mainclass>${start-class}</mainclass>\n    <layout>ZIP</layout>\n  </configuration>\n  <executions>\n    <execution>\n      <goals>\n        <goal>repackage</goal>\n      </goals>\n    </execution>\n  </executions>\n</plugin> \n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html</a></p>\n<p>jar包形式<br>\nmvn -Dmaven.test.skip -U clean package<br>\njava -jar [jar名称.jar]</p>\n<p>war包形式，需要有webapp-&gt;WEB-INF-&gt;web.xml<br>\njava -jar [war名称.war]</p>\n<p>运行模式<br>\nIDEA方式<br>\nJar／War方式<br>\nMaven插件方式：<br>\nmvn srping-boot:run//需要在Main方法module，使用前，需要在父Module mvn -Dmaven.test.skip -U clean install<br>\n<a href=\"https://blog.csdn.net/taiyangdao/article/details/75303181\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/taiyangdao/article/details/75303181</a></p>\n<p>ConcurrentHashMap  <a href=\"http://www.importnew.com/28263.html\" target=\"_blank\" rel=\"noopener\">http://www.importnew.com/28263.html</a>  <a href=\"https://www.cnblogs.com/heyonggang/p/9112731.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/heyonggang/p/9112731.html</a><br>\nAtomicInteger <a href=\"https://www.cnblogs.com/sharkli/p/5623524.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/sharkli/p/5623524.html</a><br>\n好的习惯，实体都实现toString()方法</p>\n<p>Flux &amp; Mono<br>\nFlux：0到N个对象的集合<br>\nMono：0到1个对象的集合<br>\nReactive中的Flux和Mono是异步处理的，都是Publisher</p>\n<p><a href=\"https://www.imooc.com/learn/1058\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/learn/1058</a><br>\n组件自动装配：规约大于配置，专注核心业务<br>\n外部化部署：一次构建、按需调配，到处运行<br>\n嵌入式容器：内置容器、无需部署、独立运行<br>\nSpringBoot Starter:简化依赖、按需装配、自我包含<br>\nProduction-Ready：一站式运维、生态无缝整合</p>\n<p>Java 能长盛不衰，主要是命好。每当人们觉得 Java 不行了的时候，总会有英雄横刀救美。<br>\n最初 Java 开发出来不知道有什么用的时候，发现可以用 Applet 在网页上做动画。后来企业级软件开发时代 JavaEE 大行其道，开源社区 Spring 桃李满天下。<br>\n等到了移动时代，人们觉得 Java 要完蛋了，Google 拍马救市，收购并开放了 Android 平台，当家语言就是 Java，于是 Java 再次焕发勃勃生机。<br>\n目前大数据领域，Java 同样是当仁不让的好手。</p>\n<p>现在 Spring Framework 那套东西使用了十几年，正当大家被长达几千行的 ApplicationContext 配置文件折磨的死去活来的时候，Spring Boot 诞生了。什么是 Spring Boot？用来简化 Spring 应用程序开发的。</p>\n<p>换句话说就是，当你觉得 Java 不好用的时候，我做了个轻量级的 S，让你好好用 Java。等你觉的 S 也不够轻了，我做了个 SB，让你觉得 S 还是挺轻的。</p>\n<p><a href=\"https://www.imooc.com/video/16783\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/video/16783</a><br>\nSrpingBoot为微服务框架，与Spring4一起诞生</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.1.2.RELEASE/reference/htmlsingle/\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-boot/docs/2.1.2.RELEASE/reference/htmlsingle/</a></p>\n"},{"title":"MyBatis","copyright":true,"comments":1,"toc":true,"date":"2018-12-10T05:43:24.000Z","password":null,"_content":"\nJava持久化框架 瞬态+持久态\n\niBatis-MyBatis\napache-google-github\n\nSQL语句与代码分离；面向配置编程；良好支持复杂数据映射；动态SQL\n\nhttps://github.com/mybatis/mybatis-3\nhttp://www.mybatis.org/mybatis-3/zh/index.html\n\n日志配置\nhttps://www.cnblogs.com/zhaozihan/p/6371133.html\n\nMyBatisg工作流程\n1. 读取配置文件\n2. 生成SqlSessionFactory,表示和数据库的连接，一般是程序级的生命周期\n3. 简历SqlSession\n4. 调用MyBatist提供的API\n5. 查询Map配置\n6. 返回结果\n7. 关闭SqlSession\n~~~\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n  <environments default=\"development\">\n    <environment id=\"development\">\n      <transactionManager type=\"JDBC\"/>\n      <dataSource type=\"POOLED\">\n        <property name=\"driver\" value=\"${driver}\"/>\n        <property name=\"url\" value=\"${url}\"/>\n        <property name=\"username\" value=\"${username}\"/>\n        <property name=\"password\" value=\"${password}\"/>\n      </dataSource>\n    </environment>\n  </environments>\n  <mappers>\n    <mapper resource=\"org/mybatis/example/BlogMapper.xml\"/>\n  </mappers>\n</configuration>\n~~~\n\nmap文件引用\n1.相对路径 2.绝对路径 3.包路径 \n\nMyBatis配置文件：基本配置文件+映射配置文件\n\ntypeAliases标记定义别名，需要environments标记之前\n\nmap文件方式+注解方式（接口方式）\n\nmappers里面3种写法：resource／class／package \n\nSelect配置属性说明\n两者只能有一个成立\nresultType\nresultMap解决复杂查询时的映射问题，如属性为对象 \n\nparameterType封装hashmap，key既是key也是sql形参\nparameterType封装对象如User，对象参数自动匹配属性，如果对象属性和列名不一样用别名\n\n返回多上记录时MyBatis自动封装成List\n\n事务处理：\nMyBatis事务处理由两种方式处理：JDBC+MANAGED\n\n每张表单独的一个配置文件，方便管理\n\n\nMyBatis自动id返回，\n~~~\none.setUserName(\"123\");\nsession.insert(\"insertOne\",one);\nSystem.out.println(one.id);  //可以正常获取id\n~~~\n\n\n高级查询\n关联查询\n    联合查询：association\n    构造查询：POJO添加构造函数，同时确保要有默认构造函数，防止构造函数重新后找不到默认构造函数\n    子查询：所有联合查询，都可以通过子查询替换，但是他让查询成了N+1次的查询\n    \n    子查询和联合查询的区别：\n    联合查询一次查询占用资源大，子查询N+1次查询占用资源可大可小，MyBatis中子查询可能速度比联合查询速度高如果开启了懒加载的话\n    懒加载的使用：配置要在配置别名之前\n集合查询：Collection标记，适用于查询的对象还有一个集合引用的事后 \n鉴别器：discriminator标记\n    javaType属性：\n    Column属性：\n    Case子标记：\n    \n MyBatis动态SQL：动态生成SQL\n \n \n \n \n https://www.aliyun.com/jiaocheng/811373.html\n \n https://www.jikexueyuan.com/course/oracledb/1-0-0-0/\n ","source":"_posts/2018-12-10-MyBatis.md","raw":"---\ntitle: MyBatis\ntags:\n  - MyBatis\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-12-10 13:43:24\ncategories: Java\npassword:\n---\n\nJava持久化框架 瞬态+持久态\n\niBatis-MyBatis\napache-google-github\n\nSQL语句与代码分离；面向配置编程；良好支持复杂数据映射；动态SQL\n\nhttps://github.com/mybatis/mybatis-3\nhttp://www.mybatis.org/mybatis-3/zh/index.html\n\n日志配置\nhttps://www.cnblogs.com/zhaozihan/p/6371133.html\n\nMyBatisg工作流程\n1. 读取配置文件\n2. 生成SqlSessionFactory,表示和数据库的连接，一般是程序级的生命周期\n3. 简历SqlSession\n4. 调用MyBatist提供的API\n5. 查询Map配置\n6. 返回结果\n7. 关闭SqlSession\n~~~\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n  <environments default=\"development\">\n    <environment id=\"development\">\n      <transactionManager type=\"JDBC\"/>\n      <dataSource type=\"POOLED\">\n        <property name=\"driver\" value=\"${driver}\"/>\n        <property name=\"url\" value=\"${url}\"/>\n        <property name=\"username\" value=\"${username}\"/>\n        <property name=\"password\" value=\"${password}\"/>\n      </dataSource>\n    </environment>\n  </environments>\n  <mappers>\n    <mapper resource=\"org/mybatis/example/BlogMapper.xml\"/>\n  </mappers>\n</configuration>\n~~~\n\nmap文件引用\n1.相对路径 2.绝对路径 3.包路径 \n\nMyBatis配置文件：基本配置文件+映射配置文件\n\ntypeAliases标记定义别名，需要environments标记之前\n\nmap文件方式+注解方式（接口方式）\n\nmappers里面3种写法：resource／class／package \n\nSelect配置属性说明\n两者只能有一个成立\nresultType\nresultMap解决复杂查询时的映射问题，如属性为对象 \n\nparameterType封装hashmap，key既是key也是sql形参\nparameterType封装对象如User，对象参数自动匹配属性，如果对象属性和列名不一样用别名\n\n返回多上记录时MyBatis自动封装成List\n\n事务处理：\nMyBatis事务处理由两种方式处理：JDBC+MANAGED\n\n每张表单独的一个配置文件，方便管理\n\n\nMyBatis自动id返回，\n~~~\none.setUserName(\"123\");\nsession.insert(\"insertOne\",one);\nSystem.out.println(one.id);  //可以正常获取id\n~~~\n\n\n高级查询\n关联查询\n    联合查询：association\n    构造查询：POJO添加构造函数，同时确保要有默认构造函数，防止构造函数重新后找不到默认构造函数\n    子查询：所有联合查询，都可以通过子查询替换，但是他让查询成了N+1次的查询\n    \n    子查询和联合查询的区别：\n    联合查询一次查询占用资源大，子查询N+1次查询占用资源可大可小，MyBatis中子查询可能速度比联合查询速度高如果开启了懒加载的话\n    懒加载的使用：配置要在配置别名之前\n集合查询：Collection标记，适用于查询的对象还有一个集合引用的事后 \n鉴别器：discriminator标记\n    javaType属性：\n    Column属性：\n    Case子标记：\n    \n MyBatis动态SQL：动态生成SQL\n \n \n \n \n https://www.aliyun.com/jiaocheng/811373.html\n \n https://www.jikexueyuan.com/course/oracledb/1-0-0-0/\n ","slug":"MyBatis","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrqd001lck8hqxcadm8a","content":"<p>Java持久化框架 瞬态+持久态</p>\n<p>iBatis-MyBatis<br>\napache-google-github</p>\n<p>SQL语句与代码分离；面向配置编程；良好支持复杂数据映射；动态SQL</p>\n<p><a href=\"https://github.com/mybatis/mybatis-3\" target=\"_blank\" rel=\"noopener\">https://github.com/mybatis/mybatis-3</a><br>\n<a href=\"http://www.mybatis.org/mybatis-3/zh/index.html\" target=\"_blank\" rel=\"noopener\">http://www.mybatis.org/mybatis-3/zh/index.html</a></p>\n<p>日志配置<br>\n<a href=\"https://www.cnblogs.com/zhaozihan/p/6371133.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhaozihan/p/6371133.html</a></p>\n<p>MyBatisg工作流程</p>\n<ol>\n<li>读取配置文件</li>\n<li>生成SqlSessionFactory,表示和数据库的连接，一般是程序级的生命周期</li>\n<li>简历SqlSession</li>\n<li>调用MyBatist提供的API</li>\n<li>查询Map配置</li>\n<li>返回结果</li>\n<li>关闭SqlSession</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class=\"line\">  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;environments default=&quot;development&quot;&gt;</span><br><span class=\"line\">    &lt;environment id=&quot;development&quot;&gt;</span><br><span class=\"line\">      &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class=\"line\">      &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class=\"line\">      &lt;/dataSource&gt;</span><br><span class=\"line\">    &lt;/environment&gt;</span><br><span class=\"line\">  &lt;/environments&gt;</span><br><span class=\"line\">  &lt;mappers&gt;</span><br><span class=\"line\">    &lt;mapper resource=&quot;org/mybatis/example/BlogMapper.xml&quot;/&gt;</span><br><span class=\"line\">  &lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<p>map文件引用<br>\n1.相对路径 2.绝对路径 3.包路径</p>\n<p>MyBatis配置文件：基本配置文件+映射配置文件</p>\n<p>typeAliases标记定义别名，需要environments标记之前</p>\n<p>map文件方式+注解方式（接口方式）</p>\n<p>mappers里面3种写法：resource／class／package</p>\n<p>Select配置属性说明<br>\n两者只能有一个成立<br>\nresultType<br>\nresultMap解决复杂查询时的映射问题，如属性为对象</p>\n<p>parameterType封装hashmap，key既是key也是sql形参<br>\nparameterType封装对象如User，对象参数自动匹配属性，如果对象属性和列名不一样用别名</p>\n<p>返回多上记录时MyBatis自动封装成List</p>\n<p>事务处理：<br>\nMyBatis事务处理由两种方式处理：JDBC+MANAGED</p>\n<p>每张表单独的一个配置文件，方便管理</p>\n<p>MyBatis自动id返回，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">one.setUserName(&quot;123&quot;);</span><br><span class=\"line\">session.insert(&quot;insertOne&quot;,one);</span><br><span class=\"line\">System.out.println(one.id);  //可以正常获取id</span><br></pre></td></tr></table></figure>\n<p>高级查询<br>\n关联查询<br>\n联合查询：association<br>\n构造查询：POJO添加构造函数，同时确保要有默认构造函数，防止构造函数重新后找不到默认构造函数<br>\n子查询：所有联合查询，都可以通过子查询替换，但是他让查询成了N+1次的查询</p>\n<pre><code>子查询和联合查询的区别：\n联合查询一次查询占用资源大，子查询N+1次查询占用资源可大可小，MyBatis中子查询可能速度比联合查询速度高如果开启了懒加载的话\n懒加载的使用：配置要在配置别名之前\n</code></pre>\n<p>集合查询：Collection标记，适用于查询的对象还有一个集合引用的事后<br>\n鉴别器：discriminator标记<br>\njavaType属性：<br>\nColumn属性：<br>\nCase子标记：</p>\n<p>MyBatis动态SQL：动态生成SQL</p>\n<p><a href=\"https://www.aliyun.com/jiaocheng/811373.html\" target=\"_blank\" rel=\"noopener\">https://www.aliyun.com/jiaocheng/811373.html</a></p>\n<p><a href=\"https://www.jikexueyuan.com/course/oracledb/1-0-0-0/\" target=\"_blank\" rel=\"noopener\">https://www.jikexueyuan.com/course/oracledb/1-0-0-0/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Java持久化框架 瞬态+持久态</p>\n<p>iBatis-MyBatis<br>\napache-google-github</p>\n<p>SQL语句与代码分离；面向配置编程；良好支持复杂数据映射；动态SQL</p>\n<p><a href=\"https://github.com/mybatis/mybatis-3\" target=\"_blank\" rel=\"noopener\">https://github.com/mybatis/mybatis-3</a><br>\n<a href=\"http://www.mybatis.org/mybatis-3/zh/index.html\" target=\"_blank\" rel=\"noopener\">http://www.mybatis.org/mybatis-3/zh/index.html</a></p>\n<p>日志配置<br>\n<a href=\"https://www.cnblogs.com/zhaozihan/p/6371133.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhaozihan/p/6371133.html</a></p>\n<p>MyBatisg工作流程</p>\n<ol>\n<li>读取配置文件</li>\n<li>生成SqlSessionFactory,表示和数据库的连接，一般是程序级的生命周期</li>\n<li>简历SqlSession</li>\n<li>调用MyBatist提供的API</li>\n<li>查询Map配置</li>\n<li>返回结果</li>\n<li>关闭SqlSession</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class=\"line\">  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;environments default=&quot;development&quot;&gt;</span><br><span class=\"line\">    &lt;environment id=&quot;development&quot;&gt;</span><br><span class=\"line\">      &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class=\"line\">      &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class=\"line\">      &lt;/dataSource&gt;</span><br><span class=\"line\">    &lt;/environment&gt;</span><br><span class=\"line\">  &lt;/environments&gt;</span><br><span class=\"line\">  &lt;mappers&gt;</span><br><span class=\"line\">    &lt;mapper resource=&quot;org/mybatis/example/BlogMapper.xml&quot;/&gt;</span><br><span class=\"line\">  &lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<p>map文件引用<br>\n1.相对路径 2.绝对路径 3.包路径</p>\n<p>MyBatis配置文件：基本配置文件+映射配置文件</p>\n<p>typeAliases标记定义别名，需要environments标记之前</p>\n<p>map文件方式+注解方式（接口方式）</p>\n<p>mappers里面3种写法：resource／class／package</p>\n<p>Select配置属性说明<br>\n两者只能有一个成立<br>\nresultType<br>\nresultMap解决复杂查询时的映射问题，如属性为对象</p>\n<p>parameterType封装hashmap，key既是key也是sql形参<br>\nparameterType封装对象如User，对象参数自动匹配属性，如果对象属性和列名不一样用别名</p>\n<p>返回多上记录时MyBatis自动封装成List</p>\n<p>事务处理：<br>\nMyBatis事务处理由两种方式处理：JDBC+MANAGED</p>\n<p>每张表单独的一个配置文件，方便管理</p>\n<p>MyBatis自动id返回，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">one.setUserName(&quot;123&quot;);</span><br><span class=\"line\">session.insert(&quot;insertOne&quot;,one);</span><br><span class=\"line\">System.out.println(one.id);  //可以正常获取id</span><br></pre></td></tr></table></figure>\n<p>高级查询<br>\n关联查询<br>\n联合查询：association<br>\n构造查询：POJO添加构造函数，同时确保要有默认构造函数，防止构造函数重新后找不到默认构造函数<br>\n子查询：所有联合查询，都可以通过子查询替换，但是他让查询成了N+1次的查询</p>\n<pre><code>子查询和联合查询的区别：\n联合查询一次查询占用资源大，子查询N+1次查询占用资源可大可小，MyBatis中子查询可能速度比联合查询速度高如果开启了懒加载的话\n懒加载的使用：配置要在配置别名之前\n</code></pre>\n<p>集合查询：Collection标记，适用于查询的对象还有一个集合引用的事后<br>\n鉴别器：discriminator标记<br>\njavaType属性：<br>\nColumn属性：<br>\nCase子标记：</p>\n<p>MyBatis动态SQL：动态生成SQL</p>\n<p><a href=\"https://www.aliyun.com/jiaocheng/811373.html\" target=\"_blank\" rel=\"noopener\">https://www.aliyun.com/jiaocheng/811373.html</a></p>\n<p><a href=\"https://www.jikexueyuan.com/course/oracledb/1-0-0-0/\" target=\"_blank\" rel=\"noopener\">https://www.jikexueyuan.com/course/oracledb/1-0-0-0/</a></p>\n"},{"title":"Java并发编程","copyright":true,"comments":1,"toc":true,"date":"2019-01-02T07:52:38.000Z","password":null,"_content":"ExecutorService   Semaphore\n\n并发实现一个计数器：引入问题\n\n\n并发与高并发：\n\n\nJava内存模型-写一篇文章\nJava内存模型：Java Memory Model（JMM）\n\nCPU包括运算逻辑部件、寄存器部件和控制部件等。寄存器在CPU上\n\nJava堆：Heap运行时数据区，有垃圾回收来负责，可以动态分配大小，生存期也不必提前告诉编译器，是在运行时动态分配内存的，由于需要动态分配，所以速度比栈慢\nJava栈：Stack速度仅次于寄存器，数据可以共享，缺点是栈中的数据的大小及生存期必须是确定的， \n\n线程之间操作必须通过主内存\n\nhttps://www.cnblogs.com/zhehan54/p/6130030.html\n实现并发的方式有多种：比如多进程、多线程、IO多路复用。\n进程是资源（CPU、内存等）分配的基本单位\n\n\n\n自定义注解\n\nhttps://blog.csdn.net/motui/article/details/79012846\n\n线程安全性-原子性\ncompareAndSwapXXX：当前值和底层值对比，如果一样则执行，如果不一样，则重新获取再比较\n\nAtomicLong  LongAdder\n\n\nhttps://blog.csdn.net/jesonjoke/article/list/1\n\nhttp://www.cnblogs.com/hongten/p/hongten_oracle_plsql.html\n\n\nhttps://me.csdn.net/jesonjoke\n\n","source":"_posts/2019-01-02-Java并发编程.md","raw":"---\ntitle: Java并发编程\ntags:\n  - Java\ncopyright: true\ncomments: true\ntoc: true\ndate: 2019-01-02 15:52:38\ncategories:\npassword:\n---\nExecutorService   Semaphore\n\n并发实现一个计数器：引入问题\n\n\n并发与高并发：\n\n\nJava内存模型-写一篇文章\nJava内存模型：Java Memory Model（JMM）\n\nCPU包括运算逻辑部件、寄存器部件和控制部件等。寄存器在CPU上\n\nJava堆：Heap运行时数据区，有垃圾回收来负责，可以动态分配大小，生存期也不必提前告诉编译器，是在运行时动态分配内存的，由于需要动态分配，所以速度比栈慢\nJava栈：Stack速度仅次于寄存器，数据可以共享，缺点是栈中的数据的大小及生存期必须是确定的， \n\n线程之间操作必须通过主内存\n\nhttps://www.cnblogs.com/zhehan54/p/6130030.html\n实现并发的方式有多种：比如多进程、多线程、IO多路复用。\n进程是资源（CPU、内存等）分配的基本单位\n\n\n\n自定义注解\n\nhttps://blog.csdn.net/motui/article/details/79012846\n\n线程安全性-原子性\ncompareAndSwapXXX：当前值和底层值对比，如果一样则执行，如果不一样，则重新获取再比较\n\nAtomicLong  LongAdder\n\n\nhttps://blog.csdn.net/jesonjoke/article/list/1\n\nhttp://www.cnblogs.com/hongten/p/hongten_oracle_plsql.html\n\n\nhttps://me.csdn.net/jesonjoke\n\n","slug":"Java并发编程","published":1,"updated":"2019-01-22T09:06:14.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrqf001mck8hifp5nuh4","content":"<p>ExecutorService   Semaphore</p>\n<p>并发实现一个计数器：引入问题</p>\n<p>并发与高并发：</p>\n<p>Java内存模型-写一篇文章<br>\nJava内存模型：Java Memory Model（JMM）</p>\n<p>CPU包括运算逻辑部件、寄存器部件和控制部件等。寄存器在CPU上</p>\n<p>Java堆：Heap运行时数据区，有垃圾回收来负责，可以动态分配大小，生存期也不必提前告诉编译器，是在运行时动态分配内存的，由于需要动态分配，所以速度比栈慢<br>\nJava栈：Stack速度仅次于寄存器，数据可以共享，缺点是栈中的数据的大小及生存期必须是确定的，</p>\n<p>线程之间操作必须通过主内存</p>\n<p><a href=\"https://www.cnblogs.com/zhehan54/p/6130030.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhehan54/p/6130030.html</a><br>\n实现并发的方式有多种：比如多进程、多线程、IO多路复用。<br>\n进程是资源（CPU、内存等）分配的基本单位</p>\n<p>自定义注解</p>\n<p><a href=\"https://blog.csdn.net/motui/article/details/79012846\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/motui/article/details/79012846</a></p>\n<p>线程安全性-原子性<br>\ncompareAndSwapXXX：当前值和底层值对比，如果一样则执行，如果不一样，则重新获取再比较</p>\n<p>AtomicLong  LongAdder</p>\n<p><a href=\"https://blog.csdn.net/jesonjoke/article/list/1\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jesonjoke/article/list/1</a></p>\n<p><a href=\"http://www.cnblogs.com/hongten/p/hongten_oracle_plsql.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/hongten/p/hongten_oracle_plsql.html</a></p>\n<p><a href=\"https://me.csdn.net/jesonjoke\" target=\"_blank\" rel=\"noopener\">https://me.csdn.net/jesonjoke</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>ExecutorService   Semaphore</p>\n<p>并发实现一个计数器：引入问题</p>\n<p>并发与高并发：</p>\n<p>Java内存模型-写一篇文章<br>\nJava内存模型：Java Memory Model（JMM）</p>\n<p>CPU包括运算逻辑部件、寄存器部件和控制部件等。寄存器在CPU上</p>\n<p>Java堆：Heap运行时数据区，有垃圾回收来负责，可以动态分配大小，生存期也不必提前告诉编译器，是在运行时动态分配内存的，由于需要动态分配，所以速度比栈慢<br>\nJava栈：Stack速度仅次于寄存器，数据可以共享，缺点是栈中的数据的大小及生存期必须是确定的，</p>\n<p>线程之间操作必须通过主内存</p>\n<p><a href=\"https://www.cnblogs.com/zhehan54/p/6130030.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhehan54/p/6130030.html</a><br>\n实现并发的方式有多种：比如多进程、多线程、IO多路复用。<br>\n进程是资源（CPU、内存等）分配的基本单位</p>\n<p>自定义注解</p>\n<p><a href=\"https://blog.csdn.net/motui/article/details/79012846\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/motui/article/details/79012846</a></p>\n<p>线程安全性-原子性<br>\ncompareAndSwapXXX：当前值和底层值对比，如果一样则执行，如果不一样，则重新获取再比较</p>\n<p>AtomicLong  LongAdder</p>\n<p><a href=\"https://blog.csdn.net/jesonjoke/article/list/1\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jesonjoke/article/list/1</a></p>\n<p><a href=\"http://www.cnblogs.com/hongten/p/hongten_oracle_plsql.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/hongten/p/hongten_oracle_plsql.html</a></p>\n<p><a href=\"https://me.csdn.net/jesonjoke\" target=\"_blank\" rel=\"noopener\">https://me.csdn.net/jesonjoke</a></p>\n"},{"title":"aa","copyright":true,"comments":1,"toc":true,"date":"2018-12-19T07:29:55.000Z","password":null,"_content":"  \n\nhttps://www.cnblogs.com/god--love-you/p/6133390.html\n\nspringboot\nhttps://blog.csdn.net/forezp/column/info/15397/1\nhttps://blog.csdn.net/vbirdbest/article/category/7490600/3\n\n\nhttps://github.com/lenve/vhr\n\nnetty\nhttps://waylau.com/netty-4-user-guide/\n\nhttps://github.com/doocs/advanced-java\n\n\nhttps://blog.csdn.net/qq_38765404/article/details/78615572\n\nhttp://www.cnblogs.com/felixzh/p/5869212.html\n\n\n\noracle\nhttps://www.cnblogs.com/kane1990/p/OracleNetManager.html\nhttps://blog.csdn.net/u011179993/article/details/51554324\nhttps://www.cnblogs.com/yadongliang/p/5840203.html\nhttp://blog.51cto.com/mazongfei/2126876\nhttps://blog.csdn.net/weixin_37480339/article/details/81017214\nhttps://blog.csdn.net/wangjialiang/article/details/7867791\n\nhttp://blog.sina.com.cn/s/blog_13689d7d40102y3d3.html\n\n\n","source":"_posts/2018-12-19-aa.md","raw":"---\ntitle: aa\ntags:\n  - null\n  - null\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-12-19 15:29:55\ncategories:\npassword:\n---\n  \n\nhttps://www.cnblogs.com/god--love-you/p/6133390.html\n\nspringboot\nhttps://blog.csdn.net/forezp/column/info/15397/1\nhttps://blog.csdn.net/vbirdbest/article/category/7490600/3\n\n\nhttps://github.com/lenve/vhr\n\nnetty\nhttps://waylau.com/netty-4-user-guide/\n\nhttps://github.com/doocs/advanced-java\n\n\nhttps://blog.csdn.net/qq_38765404/article/details/78615572\n\nhttp://www.cnblogs.com/felixzh/p/5869212.html\n\n\n\noracle\nhttps://www.cnblogs.com/kane1990/p/OracleNetManager.html\nhttps://blog.csdn.net/u011179993/article/details/51554324\nhttps://www.cnblogs.com/yadongliang/p/5840203.html\nhttp://blog.51cto.com/mazongfei/2126876\nhttps://blog.csdn.net/weixin_37480339/article/details/81017214\nhttps://blog.csdn.net/wangjialiang/article/details/7867791\n\nhttp://blog.sina.com.cn/s/blog_13689d7d40102y3d3.html\n\n\n","slug":"aa","published":1,"updated":"2019-01-10T18:14:32.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrqg001rck8heolpg8u1","content":"<p><a href=\"https://www.cnblogs.com/god--love-you/p/6133390.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/god--love-you/p/6133390.html</a></p>\n<p>springboot<br>\n<a href=\"https://blog.csdn.net/forezp/column/info/15397/1\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/forezp/column/info/15397/1</a><br>\n<a href=\"https://blog.csdn.net/vbirdbest/article/category/7490600/3\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/vbirdbest/article/category/7490600/3</a></p>\n<p><a href=\"https://github.com/lenve/vhr\" target=\"_blank\" rel=\"noopener\">https://github.com/lenve/vhr</a></p>\n<p>netty<br>\n<a href=\"https://waylau.com/netty-4-user-guide/\" target=\"_blank\" rel=\"noopener\">https://waylau.com/netty-4-user-guide/</a></p>\n<p><a href=\"https://github.com/doocs/advanced-java\" target=\"_blank\" rel=\"noopener\">https://github.com/doocs/advanced-java</a></p>\n<p><a href=\"https://blog.csdn.net/qq_38765404/article/details/78615572\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_38765404/article/details/78615572</a></p>\n<p><a href=\"http://www.cnblogs.com/felixzh/p/5869212.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/felixzh/p/5869212.html</a></p>\n<p>oracle<br>\n<a href=\"https://www.cnblogs.com/kane1990/p/OracleNetManager.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/kane1990/p/OracleNetManager.html</a><br>\n<a href=\"https://blog.csdn.net/u011179993/article/details/51554324\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u011179993/article/details/51554324</a><br>\n<a href=\"https://www.cnblogs.com/yadongliang/p/5840203.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yadongliang/p/5840203.html</a><br>\n<a href=\"http://blog.51cto.com/mazongfei/2126876\" target=\"_blank\" rel=\"noopener\">http://blog.51cto.com/mazongfei/2126876</a><br>\n<a href=\"https://blog.csdn.net/weixin_37480339/article/details/81017214\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_37480339/article/details/81017214</a><br>\n<a href=\"https://blog.csdn.net/wangjialiang/article/details/7867791\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wangjialiang/article/details/7867791</a></p>\n<p><a href=\"http://blog.sina.com.cn/s/blog_13689d7d40102y3d3.html\" target=\"_blank\" rel=\"noopener\">http://blog.sina.com.cn/s/blog_13689d7d40102y3d3.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.cnblogs.com/god--love-you/p/6133390.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/god--love-you/p/6133390.html</a></p>\n<p>springboot<br>\n<a href=\"https://blog.csdn.net/forezp/column/info/15397/1\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/forezp/column/info/15397/1</a><br>\n<a href=\"https://blog.csdn.net/vbirdbest/article/category/7490600/3\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/vbirdbest/article/category/7490600/3</a></p>\n<p><a href=\"https://github.com/lenve/vhr\" target=\"_blank\" rel=\"noopener\">https://github.com/lenve/vhr</a></p>\n<p>netty<br>\n<a href=\"https://waylau.com/netty-4-user-guide/\" target=\"_blank\" rel=\"noopener\">https://waylau.com/netty-4-user-guide/</a></p>\n<p><a href=\"https://github.com/doocs/advanced-java\" target=\"_blank\" rel=\"noopener\">https://github.com/doocs/advanced-java</a></p>\n<p><a href=\"https://blog.csdn.net/qq_38765404/article/details/78615572\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_38765404/article/details/78615572</a></p>\n<p><a href=\"http://www.cnblogs.com/felixzh/p/5869212.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/felixzh/p/5869212.html</a></p>\n<p>oracle<br>\n<a href=\"https://www.cnblogs.com/kane1990/p/OracleNetManager.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/kane1990/p/OracleNetManager.html</a><br>\n<a href=\"https://blog.csdn.net/u011179993/article/details/51554324\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u011179993/article/details/51554324</a><br>\n<a href=\"https://www.cnblogs.com/yadongliang/p/5840203.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yadongliang/p/5840203.html</a><br>\n<a href=\"http://blog.51cto.com/mazongfei/2126876\" target=\"_blank\" rel=\"noopener\">http://blog.51cto.com/mazongfei/2126876</a><br>\n<a href=\"https://blog.csdn.net/weixin_37480339/article/details/81017214\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_37480339/article/details/81017214</a><br>\n<a href=\"https://blog.csdn.net/wangjialiang/article/details/7867791\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wangjialiang/article/details/7867791</a></p>\n<p><a href=\"http://blog.sina.com.cn/s/blog_13689d7d40102y3d3.html\" target=\"_blank\" rel=\"noopener\">http://blog.sina.com.cn/s/blog_13689d7d40102y3d3.html</a></p>\n"},{"title":"React入门","copyright":true,"comments":1,"toc":true,"date":"2018-10-26T07:04:22.000Z","password":null,"_content":"\n# 简介\n* React 是一个用于构建用户界面的 JAVASCRIPT 库\n* React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）\n* React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源\n* React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它\n* React 拥有一个强大的组合模型，我们建议使用组合而不是继承以实现代码的重用\n* react有 函数式组件和类组件，现在的使用都以类组件为主，函数式组件不考虑\n* angualr霸道，用了之后原生定时器、jquery等都不能用，而react没有这个限制\n* react中对事件的大小写敏感，因为有一个编译过程\n* 相关有用网址\n~~~\n官网：https://facebook.github.io/react/\n中文网站：http://www.css88.com/react/\n中文论坛:http://react-china.org/\n~~~\n\n# react特点\n1. 声明式设计 −React采用声明范式，可以轻松描述应用。\n2. 高效 −虚拟DOM,React通过对DOM的模拟，最大限度地减少与DOM的交互。React DOM 会将元素及其子元素与之前版本逐一对比, 并只对有必要更新的 DOM 进行更新, 以达到 DOM 所需的状态\n3. 灵活 −React可以与已知的库或框架很好地配合。\n4. JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。\n5. 组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。\n6. 单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单\n\n# react全家桶（技术栈）\n> 如果一个技术你不知道，那说明你还用不上\n\n1. react：主体\n2. webpack、grunt、gulp自动化构建工具\n3. Flex：布局\n4. react-route：路由\n5. redux：view层\n6. Mocha：测试\n7. Istanbul：覆盖率\n\n# 安装\n## 网页使用\n网页中用babel会页面加载会有编译过程，比较缓慢，babel也可以后台编译\n~~~\n<script src=\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"></script>\n<script src=\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"></script>\n<script src=\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"></script>\n<script type=\"text/babel\">\n  ReactDOM.render(\n    <h1>Hello, world!</h1>,\n    document.getElementById('example')\n  );\n</script>\n~~~\n引入了三个库： react.min.js 、react-dom.min.js 和 babel.min.js：\n1. react.min.js - React 的核心库\n2. react-dom.min.js - 提供与 DOM 相关的功能\n3. babel.min.js - Babel 可以将 ES6 代码转为 ES5 代码，这样我们就能在目前不支持 ES6 浏览器上执行 React 代码。Babel 内嵌了对 JSX 的支持。通过将 Babel 和 babel-sublime 包（package）一同使用可以让源码的语法渲染上升到一个全新的水平\n\n## 使用 create-react-app 快速构建\n* create-react-app 是来自于 Facebook，通过该命令我们无需配置就能快速构建 React 开发环境。\n* create-react-app 自动创建的项目是基于 Webpack + ES6\n* create-react-app网址：https://github.com/facebookincubator/create-react-app\n* create-react-app说明：https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#updating-to-new-releases\n~~~\n$ cnpm install -g create-react-app\n$ create-react-app my-app\n$ cd my-app/\n$ npm start\n~~~\n在浏览器中打开 http://localhost:3000/,查看结果\n\n# JSX\n> JSX是可选的，对于使用 React而言不需要\n\nReact 使用 JSX 来替代常规的 JavaScript，JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。\n\n优点：\n* JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化，需babel编译后才能运行，bower babel install,官网：http://babeljs.io/\n* 它是类型安全的，在编译过程中就能发现错误\n* 使用 JSX 编写模板更加简单快速\n\n使用过程中的注意事项：\n1. 组件必须返回一个单独的根元素。render的内容必须有且仅有一个父元\n2. 网页中使用：\n~~~\n<script src=\"js/react.js\" charset=\"utf-8\"/></script>\n<script src=\"js/react-dom.js\" charset=\"utf-8\"/></script>\n<script src=\"js/browser.js\" charset=\"utf-8\"/></script>\n<script type=\"text/babel\">\n    window.onload=function(){\n        var oDiv = document.getElementById(\"div1\"); \n        ReactDom.render(\n            <span>111</span>,//内容\n            oDiv//到哪\n        ); \n    };\n</script>\n<body>\n    <div id=\"div1></div>\n</body>\n~~~\n3. 添加自定义属性需要使用 data- 前缀，因为jsx对html标签有识别，如果符合则不显示，而在自定义属性前面加data-可以保证显示显示\n4. 自定义组件可以单独文件存储\n5. 可以在 JSX 中使用 JavaScript 表达式。表达式写在花括号 {} 中；在 JSX 中不能使用 if else 语句，但可以使用 conditional (三元运算) 表达式来替代\n6. React 推荐使用内联样式。我们可以使用 camelCase 语法来设置内联样式. React 会在指定元素数字后自动添加 px \n7. JSX 允许在模板中插入数组，数组会自动展开所有成员\n8. 注释:在标签内部的注释需要花括号;在标签外的的注释不能使用花括号\n9. 可以使用双引号来指定字符串字面量作为属性值\n10. class 在JSX中变为className，tabindex 变为 tabIndex\n11. React DOM 使用驼峰(camelCase)属性命名约定, 而不是HTML属性名称\n~~~\nReactDOM.render(\n    /*注释 */\n    <h1>孙朝阳 {/*注释*/}</h1>,\n    document.getElementById('example')\n);\n~~~\n12. 如果你有一个单一模块(module) ，但却 导出(exports) 多个 React 组件时十分有用\n~~~\nimport React from 'react';\n\nconst MyComponents = {\n  DatePicker: function DatePicker(props) {\n    return <div>Imagine a {props.color} datepicker here.</div>;\n  }\n}\n\nfunction BlueDatePicker() {\n  return <MyComponents.DatePicker color=\"blue\" />;\n}\n~~~\n13. JSX 中的 Children：在 JSX 表达式中可以包含开放标签和闭合标签，标签中的内容会被传递一个特殊的 props(属性) ： props.children\n\n# 组件\n* 组件名称总是以大写字母开始\n* 组件有构造函数，构造函数的第一行应该是调用super函数，其参数为...args参数，在constructor方法中进行一些初始\n* 绑定事件的方式：onChange={this.函数名称.bind(this)}\n* 有狗那年，定时器中的this就不合适，在使用前通过_this=this保存一份，然后在定时中用_this代替\n* react处理了this，原生中如果要用this，最好也处理一下\n* react中阻止事件冒泡：ev.nativeEvent.stopImmediatePropergation\n* 父级属性传递给子级直接通过属性，子级属性传递给父级需要通过在父级绑定回调函数如cb()，在子级中通过this.props.cb(传递的参数)的方式把参数传递到父级\n* react中设置样式style需要通过双大括号}}来设置\n* 键(Keys) 帮助 React 标识哪个项被修改、添加或者移除了。数组中的每一个元素都应该有一个唯一不变的键(Keys)来标识。keys 只在数组的上下文中存在意义； keys 必须在它们的同辈之间唯一。然而它们并不需要全局唯一\n* 自定义组件的方式如下：\n~~~\nclass 组件名称 extends React.Component{\n    render(){\n        retrun <span>我的年龄是：{this.props.age}</span>\n    }    \n}\n~~~\n~~~\n//定义\nclass Comp extends React.Component{\n    render(){\n        return <span>111</span>;\n    }\n}\n~~~\n* 组件使用：类似于标签的使用\n~~~\nReactDom.render(\n    <Comp age=\"18\"/>,//内容,类名\n    document.body//到哪\n); \n~~~\n~~~\nwindow.onload=function(){ \n    ReactDom.render(\n        <Comp/>,//内容,类名\n        document.body//到哪\n    ); \n};\n~~~ \n\n# 状态state\n* React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。\n* React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。\n* this.setState({属性：'值'});  \n* state(状态) 更新可能是异步的。React 为了优化性能，有可能会将多个 setState() 调用合并为一次更新。因为 this.props 和 this.state 可能是异步更新的，你不能依赖他们的值计算下一个state(状态)。\n\n# 属性props\nstate 和 props 主要的区别在于 props 是不可变的，而 state 可以根据与用户交互来改变。这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据\n\n* 如果你没给 prop(属性) 传值，那么他默认为 true\n* 控制表单的value，如果用props设置了默认值，由于props是死的，不能修改，修改为defaultValue即可\n* 控制checkbox的默认值，修改为defalultChecked\n* 属性扩展:如果你已经有一个 object 类型的 props，并且希望在 JSX 中传入，你可以使用扩展操作符 ... 传入整个 props 对象。以上两种方法等效：\n~~~\nfunction App1() {\n  return <Greeting firstName=\"Ben\" lastName=\"Hector\" />;\n}\n\nfunction App2() {\n  const props = {firstName: 'Ben', lastName: 'Hector'};\n  return <Greeting {...props} />;\n}\n~~~\n\n# 组件生命周期\n组件的生命周期可分成三个状态：\n1. Mounting：已插入真实 DOM\n2. Updating：正在被重新渲染\n3. Unmounting：已移出真实 DOM\n\n生命周期的方法有：\n* componentWillMount 在渲染前调用,在客户端也在服务端\n* componentDidMount : 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作阻塞UI)\n* componentWillReceiveProps 在组件接收到一个新的prop时被调用。这个方法在初始化render时不会被调用\n* shouldComponentUpdate 返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用\n* componentWillUpdate在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用\n* componentDidUpdate 在组件完成更新后立即调用。在初始化时不会被调用\n* componentWillUnmount在组件从 DOM 中移除的时候立刻被调用。==当使用异步加载数据时，在组件卸载前使用 componentWillUnmount 来取消未完成的请求==\n\n# React Refs\n* React 支持一种非常特殊的属性 Ref ，可以用来绑定到 render() 输出的任何组件上。\n这个特殊的属性允许你引用 render() 返回的相应的支撑实例（ backing instance ）。这样就可以确保在任何时间总是拿到正确的实例\n* 可以通过使用 this 来获取当前 React 组件，或使用 ref 来获取组件的引用\n* ref 标示组件内的node，可以原生操作节点，在this.refs['ref名字']=原生\n* React 支持给任何组件添加特殊属性。ref 属性接受回调函数，并且当组件 装载(mounted) 或者 卸载(unmounted) 之后，回调函数会立即执行\n* 不能在函数式组件上使用 ref 属性，因为它们没有实例\n\n# 使用 Chrome Timeline 分析组件性能\n在 开发模式 中，你可以在支持相关功能的浏览器中使用性能工具来可视化组件 装载(mount) ，更新(update) 和 卸载(unmount) 的各个过程。在 Chrome 中具体操作如下： \n1. 通过添加 ?react_perf 查询字段加载你的应用(例如：http://localhost:3000/?react_perf)\n2. 打开 Chrome DevTools Timeline 并点击 Record\n3. 执行你想要分析的操作，不要超过20秒，否则 Chrome 可能会挂起\n4. 停止记录\n5. 在 User Timing 标签下，React事件将会分组列出\n\n注意：上述数字是相对的，组件会在生产环境中会更快\n\n\n# route\nreact-router + react-router-redux: 前者是业界标准，后者可以同步 route 信息到 state，这样你可以在 view 根据 route 信息调整展现，以及通过 action 来修改 route 。","source":"_posts/2018-10-26-React入门.md","raw":"---\ntitle: React入门\ntags:\n  - React \ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-26 15:04:22\ncategories: React\npassword:\n---\n\n# 简介\n* React 是一个用于构建用户界面的 JAVASCRIPT 库\n* React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）\n* React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源\n* React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它\n* React 拥有一个强大的组合模型，我们建议使用组合而不是继承以实现代码的重用\n* react有 函数式组件和类组件，现在的使用都以类组件为主，函数式组件不考虑\n* angualr霸道，用了之后原生定时器、jquery等都不能用，而react没有这个限制\n* react中对事件的大小写敏感，因为有一个编译过程\n* 相关有用网址\n~~~\n官网：https://facebook.github.io/react/\n中文网站：http://www.css88.com/react/\n中文论坛:http://react-china.org/\n~~~\n\n# react特点\n1. 声明式设计 −React采用声明范式，可以轻松描述应用。\n2. 高效 −虚拟DOM,React通过对DOM的模拟，最大限度地减少与DOM的交互。React DOM 会将元素及其子元素与之前版本逐一对比, 并只对有必要更新的 DOM 进行更新, 以达到 DOM 所需的状态\n3. 灵活 −React可以与已知的库或框架很好地配合。\n4. JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。\n5. 组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。\n6. 单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单\n\n# react全家桶（技术栈）\n> 如果一个技术你不知道，那说明你还用不上\n\n1. react：主体\n2. webpack、grunt、gulp自动化构建工具\n3. Flex：布局\n4. react-route：路由\n5. redux：view层\n6. Mocha：测试\n7. Istanbul：覆盖率\n\n# 安装\n## 网页使用\n网页中用babel会页面加载会有编译过程，比较缓慢，babel也可以后台编译\n~~~\n<script src=\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"></script>\n<script src=\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"></script>\n<script src=\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"></script>\n<script type=\"text/babel\">\n  ReactDOM.render(\n    <h1>Hello, world!</h1>,\n    document.getElementById('example')\n  );\n</script>\n~~~\n引入了三个库： react.min.js 、react-dom.min.js 和 babel.min.js：\n1. react.min.js - React 的核心库\n2. react-dom.min.js - 提供与 DOM 相关的功能\n3. babel.min.js - Babel 可以将 ES6 代码转为 ES5 代码，这样我们就能在目前不支持 ES6 浏览器上执行 React 代码。Babel 内嵌了对 JSX 的支持。通过将 Babel 和 babel-sublime 包（package）一同使用可以让源码的语法渲染上升到一个全新的水平\n\n## 使用 create-react-app 快速构建\n* create-react-app 是来自于 Facebook，通过该命令我们无需配置就能快速构建 React 开发环境。\n* create-react-app 自动创建的项目是基于 Webpack + ES6\n* create-react-app网址：https://github.com/facebookincubator/create-react-app\n* create-react-app说明：https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#updating-to-new-releases\n~~~\n$ cnpm install -g create-react-app\n$ create-react-app my-app\n$ cd my-app/\n$ npm start\n~~~\n在浏览器中打开 http://localhost:3000/,查看结果\n\n# JSX\n> JSX是可选的，对于使用 React而言不需要\n\nReact 使用 JSX 来替代常规的 JavaScript，JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。\n\n优点：\n* JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化，需babel编译后才能运行，bower babel install,官网：http://babeljs.io/\n* 它是类型安全的，在编译过程中就能发现错误\n* 使用 JSX 编写模板更加简单快速\n\n使用过程中的注意事项：\n1. 组件必须返回一个单独的根元素。render的内容必须有且仅有一个父元\n2. 网页中使用：\n~~~\n<script src=\"js/react.js\" charset=\"utf-8\"/></script>\n<script src=\"js/react-dom.js\" charset=\"utf-8\"/></script>\n<script src=\"js/browser.js\" charset=\"utf-8\"/></script>\n<script type=\"text/babel\">\n    window.onload=function(){\n        var oDiv = document.getElementById(\"div1\"); \n        ReactDom.render(\n            <span>111</span>,//内容\n            oDiv//到哪\n        ); \n    };\n</script>\n<body>\n    <div id=\"div1></div>\n</body>\n~~~\n3. 添加自定义属性需要使用 data- 前缀，因为jsx对html标签有识别，如果符合则不显示，而在自定义属性前面加data-可以保证显示显示\n4. 自定义组件可以单独文件存储\n5. 可以在 JSX 中使用 JavaScript 表达式。表达式写在花括号 {} 中；在 JSX 中不能使用 if else 语句，但可以使用 conditional (三元运算) 表达式来替代\n6. React 推荐使用内联样式。我们可以使用 camelCase 语法来设置内联样式. React 会在指定元素数字后自动添加 px \n7. JSX 允许在模板中插入数组，数组会自动展开所有成员\n8. 注释:在标签内部的注释需要花括号;在标签外的的注释不能使用花括号\n9. 可以使用双引号来指定字符串字面量作为属性值\n10. class 在JSX中变为className，tabindex 变为 tabIndex\n11. React DOM 使用驼峰(camelCase)属性命名约定, 而不是HTML属性名称\n~~~\nReactDOM.render(\n    /*注释 */\n    <h1>孙朝阳 {/*注释*/}</h1>,\n    document.getElementById('example')\n);\n~~~\n12. 如果你有一个单一模块(module) ，但却 导出(exports) 多个 React 组件时十分有用\n~~~\nimport React from 'react';\n\nconst MyComponents = {\n  DatePicker: function DatePicker(props) {\n    return <div>Imagine a {props.color} datepicker here.</div>;\n  }\n}\n\nfunction BlueDatePicker() {\n  return <MyComponents.DatePicker color=\"blue\" />;\n}\n~~~\n13. JSX 中的 Children：在 JSX 表达式中可以包含开放标签和闭合标签，标签中的内容会被传递一个特殊的 props(属性) ： props.children\n\n# 组件\n* 组件名称总是以大写字母开始\n* 组件有构造函数，构造函数的第一行应该是调用super函数，其参数为...args参数，在constructor方法中进行一些初始\n* 绑定事件的方式：onChange={this.函数名称.bind(this)}\n* 有狗那年，定时器中的this就不合适，在使用前通过_this=this保存一份，然后在定时中用_this代替\n* react处理了this，原生中如果要用this，最好也处理一下\n* react中阻止事件冒泡：ev.nativeEvent.stopImmediatePropergation\n* 父级属性传递给子级直接通过属性，子级属性传递给父级需要通过在父级绑定回调函数如cb()，在子级中通过this.props.cb(传递的参数)的方式把参数传递到父级\n* react中设置样式style需要通过双大括号}}来设置\n* 键(Keys) 帮助 React 标识哪个项被修改、添加或者移除了。数组中的每一个元素都应该有一个唯一不变的键(Keys)来标识。keys 只在数组的上下文中存在意义； keys 必须在它们的同辈之间唯一。然而它们并不需要全局唯一\n* 自定义组件的方式如下：\n~~~\nclass 组件名称 extends React.Component{\n    render(){\n        retrun <span>我的年龄是：{this.props.age}</span>\n    }    \n}\n~~~\n~~~\n//定义\nclass Comp extends React.Component{\n    render(){\n        return <span>111</span>;\n    }\n}\n~~~\n* 组件使用：类似于标签的使用\n~~~\nReactDom.render(\n    <Comp age=\"18\"/>,//内容,类名\n    document.body//到哪\n); \n~~~\n~~~\nwindow.onload=function(){ \n    ReactDom.render(\n        <Comp/>,//内容,类名\n        document.body//到哪\n    ); \n};\n~~~ \n\n# 状态state\n* React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。\n* React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。\n* this.setState({属性：'值'});  \n* state(状态) 更新可能是异步的。React 为了优化性能，有可能会将多个 setState() 调用合并为一次更新。因为 this.props 和 this.state 可能是异步更新的，你不能依赖他们的值计算下一个state(状态)。\n\n# 属性props\nstate 和 props 主要的区别在于 props 是不可变的，而 state 可以根据与用户交互来改变。这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据\n\n* 如果你没给 prop(属性) 传值，那么他默认为 true\n* 控制表单的value，如果用props设置了默认值，由于props是死的，不能修改，修改为defaultValue即可\n* 控制checkbox的默认值，修改为defalultChecked\n* 属性扩展:如果你已经有一个 object 类型的 props，并且希望在 JSX 中传入，你可以使用扩展操作符 ... 传入整个 props 对象。以上两种方法等效：\n~~~\nfunction App1() {\n  return <Greeting firstName=\"Ben\" lastName=\"Hector\" />;\n}\n\nfunction App2() {\n  const props = {firstName: 'Ben', lastName: 'Hector'};\n  return <Greeting {...props} />;\n}\n~~~\n\n# 组件生命周期\n组件的生命周期可分成三个状态：\n1. Mounting：已插入真实 DOM\n2. Updating：正在被重新渲染\n3. Unmounting：已移出真实 DOM\n\n生命周期的方法有：\n* componentWillMount 在渲染前调用,在客户端也在服务端\n* componentDidMount : 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作阻塞UI)\n* componentWillReceiveProps 在组件接收到一个新的prop时被调用。这个方法在初始化render时不会被调用\n* shouldComponentUpdate 返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用\n* componentWillUpdate在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用\n* componentDidUpdate 在组件完成更新后立即调用。在初始化时不会被调用\n* componentWillUnmount在组件从 DOM 中移除的时候立刻被调用。==当使用异步加载数据时，在组件卸载前使用 componentWillUnmount 来取消未完成的请求==\n\n# React Refs\n* React 支持一种非常特殊的属性 Ref ，可以用来绑定到 render() 输出的任何组件上。\n这个特殊的属性允许你引用 render() 返回的相应的支撑实例（ backing instance ）。这样就可以确保在任何时间总是拿到正确的实例\n* 可以通过使用 this 来获取当前 React 组件，或使用 ref 来获取组件的引用\n* ref 标示组件内的node，可以原生操作节点，在this.refs['ref名字']=原生\n* React 支持给任何组件添加特殊属性。ref 属性接受回调函数，并且当组件 装载(mounted) 或者 卸载(unmounted) 之后，回调函数会立即执行\n* 不能在函数式组件上使用 ref 属性，因为它们没有实例\n\n# 使用 Chrome Timeline 分析组件性能\n在 开发模式 中，你可以在支持相关功能的浏览器中使用性能工具来可视化组件 装载(mount) ，更新(update) 和 卸载(unmount) 的各个过程。在 Chrome 中具体操作如下： \n1. 通过添加 ?react_perf 查询字段加载你的应用(例如：http://localhost:3000/?react_perf)\n2. 打开 Chrome DevTools Timeline 并点击 Record\n3. 执行你想要分析的操作，不要超过20秒，否则 Chrome 可能会挂起\n4. 停止记录\n5. 在 User Timing 标签下，React事件将会分组列出\n\n注意：上述数字是相对的，组件会在生产环境中会更快\n\n\n# route\nreact-router + react-router-redux: 前者是业界标准，后者可以同步 route 信息到 state，这样你可以在 view 根据 route 信息调整展现，以及通过 action 来修改 route 。","slug":"React入门","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrvp003kck8hxzr1smh5","content":"<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<ul>\n<li>React 是一个用于构建用户界面的 JAVASCRIPT 库</li>\n<li>React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）</li>\n<li>React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源</li>\n<li>React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它</li>\n<li>React 拥有一个强大的组合模型，我们建议使用组合而不是继承以实现代码的重用</li>\n<li>react有 函数式组件和类组件，现在的使用都以类组件为主，函数式组件不考虑</li>\n<li>angualr霸道，用了之后原生定时器、jquery等都不能用，而react没有这个限制</li>\n<li>react中对事件的大小写敏感，因为有一个编译过程</li>\n<li>相关有用网址</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官网：https://facebook.github.io/react/</span><br><span class=\"line\">中文网站：http://www.css88.com/react/</span><br><span class=\"line\">中文论坛:http://react-china.org/</span><br></pre></td></tr></table></figure>\n<h1 id=\"react特点\"><a class=\"markdownIt-Anchor\" href=\"#react特点\"></a> react特点</h1>\n<ol>\n<li>声明式设计 −React采用声明范式，可以轻松描述应用。</li>\n<li>高效 −虚拟DOM,React通过对DOM的模拟，最大限度地减少与DOM的交互。React DOM 会将元素及其子元素与之前版本逐一对比, 并只对有必要更新的 DOM 进行更新, 以达到 DOM 所需的状态</li>\n<li>灵活 −React可以与已知的库或框架很好地配合。</li>\n<li>JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</li>\n<li>组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</li>\n<li>单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单</li>\n</ol>\n<h1 id=\"react全家桶技术栈\"><a class=\"markdownIt-Anchor\" href=\"#react全家桶技术栈\"></a> react全家桶（技术栈）</h1>\n<blockquote>\n<p>如果一个技术你不知道，那说明你还用不上</p>\n</blockquote>\n<ol>\n<li>react：主体</li>\n<li>webpack、grunt、gulp自动化构建工具</li>\n<li>Flex：布局</li>\n<li>react-route：路由</li>\n<li>redux：view层</li>\n<li>Mocha：测试</li>\n<li>Istanbul：覆盖率</li>\n</ol>\n<h1 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h1>\n<h2 id=\"网页使用\"><a class=\"markdownIt-Anchor\" href=\"#网页使用\"></a> 网页使用</h2>\n<p>网页中用babel会页面加载会有编译过程，比较缓慢，babel也可以后台编译</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;https://cdn.bootcss.com/react/15.4.2/react.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://cdn.bootcss.com/react/15.4.2/react-dom.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class=\"line\">  ReactDOM.render(</span><br><span class=\"line\">    &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class=\"line\">    document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>引入了三个库： react.min.js 、react-dom.min.js 和 babel.min.js：</p>\n<ol>\n<li>react.min.js - React 的核心库</li>\n<li>react-dom.min.js - 提供与 DOM 相关的功能</li>\n<li>babel.min.js - Babel 可以将 ES6 代码转为 ES5 代码，这样我们就能在目前不支持 ES6 浏览器上执行 React 代码。Babel 内嵌了对 JSX 的支持。通过将 Babel 和 babel-sublime 包（package）一同使用可以让源码的语法渲染上升到一个全新的水平</li>\n</ol>\n<h2 id=\"使用-create-react-app-快速构建\"><a class=\"markdownIt-Anchor\" href=\"#使用-create-react-app-快速构建\"></a> 使用 create-react-app 快速构建</h2>\n<ul>\n<li>create-react-app 是来自于 Facebook，通过该命令我们无需配置就能快速构建 React 开发环境。</li>\n<li>create-react-app 自动创建的项目是基于 Webpack + ES6</li>\n<li>create-react-app网址：<a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\" rel=\"noopener\">https://github.com/facebookincubator/create-react-app</a></li>\n<li>create-react-app说明：<a href=\"https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#updating-to-new-releases\" target=\"_blank\" rel=\"noopener\">https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#updating-to-new-releases</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install -g create-react-app</span><br><span class=\"line\">$ create-react-app my-app</span><br><span class=\"line\">$ cd my-app/</span><br><span class=\"line\">$ npm start</span><br></pre></td></tr></table></figure>\n<p>在浏览器中打开 <a href=\"http://localhost:3000/,%E6%9F%A5%E7%9C%8B%E7%BB%93%E6%9E%9C\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/,查看结果</a></p>\n<h1 id=\"jsx\"><a class=\"markdownIt-Anchor\" href=\"#jsx\"></a> JSX</h1>\n<blockquote>\n<p>JSX是可选的，对于使用 React而言不需要</p>\n</blockquote>\n<p>React 使用 JSX 来替代常规的 JavaScript，JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。</p>\n<p>优点：</p>\n<ul>\n<li>JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化，需babel编译后才能运行，bower babel install,官网：<a href=\"http://babeljs.io/\" target=\"_blank\" rel=\"noopener\">http://babeljs.io/</a></li>\n<li>它是类型安全的，在编译过程中就能发现错误</li>\n<li>使用 JSX 编写模板更加简单快速</li>\n</ul>\n<p>使用过程中的注意事项：</p>\n<ol>\n<li>组件必须返回一个单独的根元素。render的内容必须有且仅有一个父元</li>\n<li>网页中使用：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;js/react.js&quot; charset=&quot;utf-8&quot;/&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/react-dom.js&quot; charset=&quot;utf-8&quot;/&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/browser.js&quot; charset=&quot;utf-8&quot;/&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class=\"line\">    window.onload=function()&#123;</span><br><span class=\"line\">        var oDiv = document.getElementById(&quot;div1&quot;); </span><br><span class=\"line\">        ReactDom.render(</span><br><span class=\"line\">            &lt;span&gt;111&lt;/span&gt;,//内容</span><br><span class=\"line\">            oDiv//到哪</span><br><span class=\"line\">        ); </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;div1&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>添加自定义属性需要使用 data- 前缀，因为jsx对html标签有识别，如果符合则不显示，而在自定义属性前面加data-可以保证显示显示</li>\n<li>自定义组件可以单独文件存储</li>\n<li>可以在 JSX 中使用 JavaScript 表达式。表达式写在花括号 {} 中；在 JSX 中不能使用 if else 语句，但可以使用 conditional (三元运算) 表达式来替代</li>\n<li>React 推荐使用内联样式。我们可以使用 camelCase 语法来设置内联样式. React 会在指定元素数字后自动添加 px</li>\n<li>JSX 允许在模板中插入数组，数组会自动展开所有成员</li>\n<li>注释:在标签内部的注释需要花括号;在标签外的的注释不能使用花括号</li>\n<li>可以使用双引号来指定字符串字面量作为属性值</li>\n<li>class 在JSX中变为className，tabindex 变为 tabIndex</li>\n<li>React DOM 使用驼峰(camelCase)属性命名约定, 而不是HTML属性名称</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    /*注释 */</span><br><span class=\"line\">    &lt;h1&gt;孙朝阳 &#123;/*注释*/&#125;&lt;/h1&gt;,</span><br><span class=\"line\">    document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ol start=\"12\">\n<li>如果你有一个单一模块(module) ，但却 导出(exports) 多个 React 组件时十分有用</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const MyComponents = &#123;</span><br><span class=\"line\">  DatePicker: function DatePicker(props) &#123;</span><br><span class=\"line\">    return &lt;div&gt;Imagine a &#123;props.color&#125; datepicker here.&lt;/div&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function BlueDatePicker() &#123;</span><br><span class=\"line\">  return &lt;MyComponents.DatePicker color=&quot;blue&quot; /&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"13\">\n<li>JSX 中的 Children：在 JSX 表达式中可以包含开放标签和闭合标签，标签中的内容会被传递一个特殊的 props(属性) ： props.children</li>\n</ol>\n<h1 id=\"组件\"><a class=\"markdownIt-Anchor\" href=\"#组件\"></a> 组件</h1>\n<ul>\n<li>组件名称总是以大写字母开始</li>\n<li>组件有构造函数，构造函数的第一行应该是调用super函数，其参数为…args参数，在constructor方法中进行一些初始</li>\n<li>绑定事件的方式：onChange={this.函数名称.bind(this)}</li>\n<li>有狗那年，定时器中的this就不合适，在使用前通过_this=this保存一份，然后在定时中用_this代替</li>\n<li>react处理了this，原生中如果要用this，最好也处理一下</li>\n<li>react中阻止事件冒泡：ev.nativeEvent.stopImmediatePropergation</li>\n<li>父级属性传递给子级直接通过属性，子级属性传递给父级需要通过在父级绑定回调函数如cb()，在子级中通过this.props.cb(传递的参数)的方式把参数传递到父级</li>\n<li>react中设置样式style需要通过双大括号}}来设置</li>\n<li>键(Keys) 帮助 React 标识哪个项被修改、添加或者移除了。数组中的每一个元素都应该有一个唯一不变的键(Keys)来标识。keys 只在数组的上下文中存在意义； keys 必须在它们的同辈之间唯一。然而它们并不需要全局唯一</li>\n<li>自定义组件的方式如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 组件名称 extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        retrun &lt;span&gt;我的年龄是：&#123;this.props.age&#125;&lt;/span&gt;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义</span><br><span class=\"line\">class Comp extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return &lt;span&gt;111&lt;/span&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>组件使用：类似于标签的使用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDom.render(</span><br><span class=\"line\">    &lt;Comp age=&quot;18&quot;/&gt;,//内容,类名</span><br><span class=\"line\">    document.body//到哪</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload=function()&#123; </span><br><span class=\"line\">    ReactDom.render(</span><br><span class=\"line\">        &lt;Comp/&gt;,//内容,类名</span><br><span class=\"line\">        document.body//到哪</span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">~~~ </span><br><span class=\"line\"></span><br><span class=\"line\"># 状态state</span><br><span class=\"line\">* React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。</span><br><span class=\"line\">* React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。</span><br><span class=\"line\">* this.setState(&#123;属性：&apos;值&apos;&#125;);  </span><br><span class=\"line\">* state(状态) 更新可能是异步的。React 为了优化性能，有可能会将多个 setState() 调用合并为一次更新。因为 this.props 和 this.state 可能是异步更新的，你不能依赖他们的值计算下一个state(状态)。</span><br><span class=\"line\"></span><br><span class=\"line\"># 属性props</span><br><span class=\"line\">state 和 props 主要的区别在于 props 是不可变的，而 state 可以根据与用户交互来改变。这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据</span><br><span class=\"line\"></span><br><span class=\"line\">* 如果你没给 prop(属性) 传值，那么他默认为 true</span><br><span class=\"line\">* 控制表单的value，如果用props设置了默认值，由于props是死的，不能修改，修改为defaultValue即可</span><br><span class=\"line\">* 控制checkbox的默认值，修改为defalultChecked</span><br><span class=\"line\">* 属性扩展:如果你已经有一个 object 类型的 props，并且希望在 JSX 中传入，你可以使用扩展操作符 ... 传入整个 props 对象。以上两种方法等效：</span><br></pre></td></tr></table></figure>\n<p>function App1() {<br>\nreturn <greeting firstname=\"Ben\" lastname=\"Hector\">;<br>\n}</greeting></p>\n<p>function App2() {<br>\nconst props = {firstName: ‘Ben’, lastName: ‘Hector’};<br>\nreturn &lt;Greeting {…props} /&gt;;<br>\n}</p>\n<pre class=\"highlight\"><code class=\"\">\n# 组件生命周期\n组件的生命周期可分成三个状态：\n1. Mounting：已插入真实 DOM\n2. Updating：正在被重新渲染\n3. Unmounting：已移出真实 DOM\n\n生命周期的方法有：\n* componentWillMount 在渲染前调用,在客户端也在服务端\n* componentDidMount : 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作阻塞UI)\n* componentWillReceiveProps 在组件接收到一个新的prop时被调用。这个方法在初始化render时不会被调用\n* shouldComponentUpdate 返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用\n* componentWillUpdate在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用\n* componentDidUpdate 在组件完成更新后立即调用。在初始化时不会被调用\n* componentWillUnmount在组件从 DOM 中移除的时候立刻被调用。==当使用异步加载数据时，在组件卸载前使用 componentWillUnmount 来取消未完成的请求==\n\n# React Refs\n* React 支持一种非常特殊的属性 Ref ，可以用来绑定到 render() 输出的任何组件上。\n这个特殊的属性允许你引用 render() 返回的相应的支撑实例（ backing instance ）。这样就可以确保在任何时间总是拿到正确的实例\n* 可以通过使用 this 来获取当前 React 组件，或使用 ref 来获取组件的引用\n* ref 标示组件内的node，可以原生操作节点，在this.refs['ref名字']=原生\n* React 支持给任何组件添加特殊属性。ref 属性接受回调函数，并且当组件 装载(mounted) 或者 卸载(unmounted) 之后，回调函数会立即执行\n* 不能在函数式组件上使用 ref 属性，因为它们没有实例\n\n# 使用 Chrome Timeline 分析组件性能\n在 开发模式 中，你可以在支持相关功能的浏览器中使用性能工具来可视化组件 装载(mount) ，更新(update) 和 卸载(unmount) 的各个过程。在 Chrome 中具体操作如下： \n1. 通过添加 ?react_perf 查询字段加载你的应用(例如：http://localhost:3000/?react_perf)\n2. 打开 Chrome DevTools Timeline 并点击 Record\n3. 执行你想要分析的操作，不要超过20秒，否则 Chrome 可能会挂起\n4. 停止记录\n5. 在 User Timing 标签下，React事件将会分组列出\n\n注意：上述数字是相对的，组件会在生产环境中会更快\n\n\n# route\nreact-router + react-router-redux: 前者是业界标准，后者可以同步 route 信息到 state，这样你可以在 view 根据 route 信息调整展现，以及通过 action 来修改 route 。</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<ul>\n<li>React 是一个用于构建用户界面的 JAVASCRIPT 库</li>\n<li>React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）</li>\n<li>React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源</li>\n<li>React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它</li>\n<li>React 拥有一个强大的组合模型，我们建议使用组合而不是继承以实现代码的重用</li>\n<li>react有 函数式组件和类组件，现在的使用都以类组件为主，函数式组件不考虑</li>\n<li>angualr霸道，用了之后原生定时器、jquery等都不能用，而react没有这个限制</li>\n<li>react中对事件的大小写敏感，因为有一个编译过程</li>\n<li>相关有用网址</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官网：https://facebook.github.io/react/</span><br><span class=\"line\">中文网站：http://www.css88.com/react/</span><br><span class=\"line\">中文论坛:http://react-china.org/</span><br></pre></td></tr></table></figure>\n<h1 id=\"react特点\"><a class=\"markdownIt-Anchor\" href=\"#react特点\"></a> react特点</h1>\n<ol>\n<li>声明式设计 −React采用声明范式，可以轻松描述应用。</li>\n<li>高效 −虚拟DOM,React通过对DOM的模拟，最大限度地减少与DOM的交互。React DOM 会将元素及其子元素与之前版本逐一对比, 并只对有必要更新的 DOM 进行更新, 以达到 DOM 所需的状态</li>\n<li>灵活 −React可以与已知的库或框架很好地配合。</li>\n<li>JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</li>\n<li>组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</li>\n<li>单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单</li>\n</ol>\n<h1 id=\"react全家桶技术栈\"><a class=\"markdownIt-Anchor\" href=\"#react全家桶技术栈\"></a> react全家桶（技术栈）</h1>\n<blockquote>\n<p>如果一个技术你不知道，那说明你还用不上</p>\n</blockquote>\n<ol>\n<li>react：主体</li>\n<li>webpack、grunt、gulp自动化构建工具</li>\n<li>Flex：布局</li>\n<li>react-route：路由</li>\n<li>redux：view层</li>\n<li>Mocha：测试</li>\n<li>Istanbul：覆盖率</li>\n</ol>\n<h1 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h1>\n<h2 id=\"网页使用\"><a class=\"markdownIt-Anchor\" href=\"#网页使用\"></a> 网页使用</h2>\n<p>网页中用babel会页面加载会有编译过程，比较缓慢，babel也可以后台编译</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;https://cdn.bootcss.com/react/15.4.2/react.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://cdn.bootcss.com/react/15.4.2/react-dom.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class=\"line\">  ReactDOM.render(</span><br><span class=\"line\">    &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class=\"line\">    document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>引入了三个库： react.min.js 、react-dom.min.js 和 babel.min.js：</p>\n<ol>\n<li>react.min.js - React 的核心库</li>\n<li>react-dom.min.js - 提供与 DOM 相关的功能</li>\n<li>babel.min.js - Babel 可以将 ES6 代码转为 ES5 代码，这样我们就能在目前不支持 ES6 浏览器上执行 React 代码。Babel 内嵌了对 JSX 的支持。通过将 Babel 和 babel-sublime 包（package）一同使用可以让源码的语法渲染上升到一个全新的水平</li>\n</ol>\n<h2 id=\"使用-create-react-app-快速构建\"><a class=\"markdownIt-Anchor\" href=\"#使用-create-react-app-快速构建\"></a> 使用 create-react-app 快速构建</h2>\n<ul>\n<li>create-react-app 是来自于 Facebook，通过该命令我们无需配置就能快速构建 React 开发环境。</li>\n<li>create-react-app 自动创建的项目是基于 Webpack + ES6</li>\n<li>create-react-app网址：<a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\" rel=\"noopener\">https://github.com/facebookincubator/create-react-app</a></li>\n<li>create-react-app说明：<a href=\"https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#updating-to-new-releases\" target=\"_blank\" rel=\"noopener\">https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#updating-to-new-releases</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install -g create-react-app</span><br><span class=\"line\">$ create-react-app my-app</span><br><span class=\"line\">$ cd my-app/</span><br><span class=\"line\">$ npm start</span><br></pre></td></tr></table></figure>\n<p>在浏览器中打开 <a href=\"http://localhost:3000/,%E6%9F%A5%E7%9C%8B%E7%BB%93%E6%9E%9C\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/,查看结果</a></p>\n<h1 id=\"jsx\"><a class=\"markdownIt-Anchor\" href=\"#jsx\"></a> JSX</h1>\n<blockquote>\n<p>JSX是可选的，对于使用 React而言不需要</p>\n</blockquote>\n<p>React 使用 JSX 来替代常规的 JavaScript，JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。</p>\n<p>优点：</p>\n<ul>\n<li>JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化，需babel编译后才能运行，bower babel install,官网：<a href=\"http://babeljs.io/\" target=\"_blank\" rel=\"noopener\">http://babeljs.io/</a></li>\n<li>它是类型安全的，在编译过程中就能发现错误</li>\n<li>使用 JSX 编写模板更加简单快速</li>\n</ul>\n<p>使用过程中的注意事项：</p>\n<ol>\n<li>组件必须返回一个单独的根元素。render的内容必须有且仅有一个父元</li>\n<li>网页中使用：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;js/react.js&quot; charset=&quot;utf-8&quot;/&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/react-dom.js&quot; charset=&quot;utf-8&quot;/&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/browser.js&quot; charset=&quot;utf-8&quot;/&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class=\"line\">    window.onload=function()&#123;</span><br><span class=\"line\">        var oDiv = document.getElementById(&quot;div1&quot;); </span><br><span class=\"line\">        ReactDom.render(</span><br><span class=\"line\">            &lt;span&gt;111&lt;/span&gt;,//内容</span><br><span class=\"line\">            oDiv//到哪</span><br><span class=\"line\">        ); </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;div1&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>添加自定义属性需要使用 data- 前缀，因为jsx对html标签有识别，如果符合则不显示，而在自定义属性前面加data-可以保证显示显示</li>\n<li>自定义组件可以单独文件存储</li>\n<li>可以在 JSX 中使用 JavaScript 表达式。表达式写在花括号 {} 中；在 JSX 中不能使用 if else 语句，但可以使用 conditional (三元运算) 表达式来替代</li>\n<li>React 推荐使用内联样式。我们可以使用 camelCase 语法来设置内联样式. React 会在指定元素数字后自动添加 px</li>\n<li>JSX 允许在模板中插入数组，数组会自动展开所有成员</li>\n<li>注释:在标签内部的注释需要花括号;在标签外的的注释不能使用花括号</li>\n<li>可以使用双引号来指定字符串字面量作为属性值</li>\n<li>class 在JSX中变为className，tabindex 变为 tabIndex</li>\n<li>React DOM 使用驼峰(camelCase)属性命名约定, 而不是HTML属性名称</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    /*注释 */</span><br><span class=\"line\">    &lt;h1&gt;孙朝阳 &#123;/*注释*/&#125;&lt;/h1&gt;,</span><br><span class=\"line\">    document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ol start=\"12\">\n<li>如果你有一个单一模块(module) ，但却 导出(exports) 多个 React 组件时十分有用</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const MyComponents = &#123;</span><br><span class=\"line\">  DatePicker: function DatePicker(props) &#123;</span><br><span class=\"line\">    return &lt;div&gt;Imagine a &#123;props.color&#125; datepicker here.&lt;/div&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function BlueDatePicker() &#123;</span><br><span class=\"line\">  return &lt;MyComponents.DatePicker color=&quot;blue&quot; /&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"13\">\n<li>JSX 中的 Children：在 JSX 表达式中可以包含开放标签和闭合标签，标签中的内容会被传递一个特殊的 props(属性) ： props.children</li>\n</ol>\n<h1 id=\"组件\"><a class=\"markdownIt-Anchor\" href=\"#组件\"></a> 组件</h1>\n<ul>\n<li>组件名称总是以大写字母开始</li>\n<li>组件有构造函数，构造函数的第一行应该是调用super函数，其参数为…args参数，在constructor方法中进行一些初始</li>\n<li>绑定事件的方式：onChange={this.函数名称.bind(this)}</li>\n<li>有狗那年，定时器中的this就不合适，在使用前通过_this=this保存一份，然后在定时中用_this代替</li>\n<li>react处理了this，原生中如果要用this，最好也处理一下</li>\n<li>react中阻止事件冒泡：ev.nativeEvent.stopImmediatePropergation</li>\n<li>父级属性传递给子级直接通过属性，子级属性传递给父级需要通过在父级绑定回调函数如cb()，在子级中通过this.props.cb(传递的参数)的方式把参数传递到父级</li>\n<li>react中设置样式style需要通过双大括号}}来设置</li>\n<li>键(Keys) 帮助 React 标识哪个项被修改、添加或者移除了。数组中的每一个元素都应该有一个唯一不变的键(Keys)来标识。keys 只在数组的上下文中存在意义； keys 必须在它们的同辈之间唯一。然而它们并不需要全局唯一</li>\n<li>自定义组件的方式如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 组件名称 extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        retrun &lt;span&gt;我的年龄是：&#123;this.props.age&#125;&lt;/span&gt;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义</span><br><span class=\"line\">class Comp extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return &lt;span&gt;111&lt;/span&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>组件使用：类似于标签的使用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDom.render(</span><br><span class=\"line\">    &lt;Comp age=&quot;18&quot;/&gt;,//内容,类名</span><br><span class=\"line\">    document.body//到哪</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload=function()&#123; </span><br><span class=\"line\">    ReactDom.render(</span><br><span class=\"line\">        &lt;Comp/&gt;,//内容,类名</span><br><span class=\"line\">        document.body//到哪</span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">~~~ </span><br><span class=\"line\"></span><br><span class=\"line\"># 状态state</span><br><span class=\"line\">* React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。</span><br><span class=\"line\">* React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。</span><br><span class=\"line\">* this.setState(&#123;属性：&apos;值&apos;&#125;);  </span><br><span class=\"line\">* state(状态) 更新可能是异步的。React 为了优化性能，有可能会将多个 setState() 调用合并为一次更新。因为 this.props 和 this.state 可能是异步更新的，你不能依赖他们的值计算下一个state(状态)。</span><br><span class=\"line\"></span><br><span class=\"line\"># 属性props</span><br><span class=\"line\">state 和 props 主要的区别在于 props 是不可变的，而 state 可以根据与用户交互来改变。这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据</span><br><span class=\"line\"></span><br><span class=\"line\">* 如果你没给 prop(属性) 传值，那么他默认为 true</span><br><span class=\"line\">* 控制表单的value，如果用props设置了默认值，由于props是死的，不能修改，修改为defaultValue即可</span><br><span class=\"line\">* 控制checkbox的默认值，修改为defalultChecked</span><br><span class=\"line\">* 属性扩展:如果你已经有一个 object 类型的 props，并且希望在 JSX 中传入，你可以使用扩展操作符 ... 传入整个 props 对象。以上两种方法等效：</span><br></pre></td></tr></table></figure>\n<p>function App1() {<br>\nreturn <greeting firstname=\"Ben\" lastname=\"Hector\">;<br>\n}</greeting></p>\n<p>function App2() {<br>\nconst props = {firstName: ‘Ben’, lastName: ‘Hector’};<br>\nreturn &lt;Greeting {…props} /&gt;;<br>\n}</p>\n<pre class=\"highlight\"><code class=\"\">\n# 组件生命周期\n组件的生命周期可分成三个状态：\n1. Mounting：已插入真实 DOM\n2. Updating：正在被重新渲染\n3. Unmounting：已移出真实 DOM\n\n生命周期的方法有：\n* componentWillMount 在渲染前调用,在客户端也在服务端\n* componentDidMount : 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作阻塞UI)\n* componentWillReceiveProps 在组件接收到一个新的prop时被调用。这个方法在初始化render时不会被调用\n* shouldComponentUpdate 返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用\n* componentWillUpdate在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用\n* componentDidUpdate 在组件完成更新后立即调用。在初始化时不会被调用\n* componentWillUnmount在组件从 DOM 中移除的时候立刻被调用。==当使用异步加载数据时，在组件卸载前使用 componentWillUnmount 来取消未完成的请求==\n\n# React Refs\n* React 支持一种非常特殊的属性 Ref ，可以用来绑定到 render() 输出的任何组件上。\n这个特殊的属性允许你引用 render() 返回的相应的支撑实例（ backing instance ）。这样就可以确保在任何时间总是拿到正确的实例\n* 可以通过使用 this 来获取当前 React 组件，或使用 ref 来获取组件的引用\n* ref 标示组件内的node，可以原生操作节点，在this.refs['ref名字']=原生\n* React 支持给任何组件添加特殊属性。ref 属性接受回调函数，并且当组件 装载(mounted) 或者 卸载(unmounted) 之后，回调函数会立即执行\n* 不能在函数式组件上使用 ref 属性，因为它们没有实例\n\n# 使用 Chrome Timeline 分析组件性能\n在 开发模式 中，你可以在支持相关功能的浏览器中使用性能工具来可视化组件 装载(mount) ，更新(update) 和 卸载(unmount) 的各个过程。在 Chrome 中具体操作如下： \n1. 通过添加 ?react_perf 查询字段加载你的应用(例如：http://localhost:3000/?react_perf)\n2. 打开 Chrome DevTools Timeline 并点击 Record\n3. 执行你想要分析的操作，不要超过20秒，否则 Chrome 可能会挂起\n4. 停止记录\n5. 在 User Timing 标签下，React事件将会分组列出\n\n注意：上述数字是相对的，组件会在生产环境中会更快\n\n\n# route\nreact-router + react-router-redux: 前者是业界标准，后者可以同步 route 信息到 state，这样你可以在 view 根据 route 信息调整展现，以及通过 action 来修改 route 。</code></pre>\n"},{"title":"Redux入门","copyright":true,"comments":1,"toc":true,"date":"2018-10-26T07:20:26.000Z","password":null,"_content":"~~~\nhttp://redux.js.org/\nhttp://www.redux.org.cn/\nhttp://www.imooc.com/learn/744  视频教程\n~~~\n\n# 简介\nRedux 由 Flux 演变而来，但受 Elm 的启发，避开了 Flux 的复杂性\n\n~~~\nimport { createStore } from 'redux';\n\n/**\n * 这是一个 reducer，形式为 (state, action) => state 的纯函数。\n * 描述了 action 如何把 state 转变成下一个 state。\n *\n * state 的形式取决于你，可以是基本类型、数组、对象、\n * 甚至是 Immutable.js 生成的数据结构。惟一的要点是\n * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。\n *\n * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)\n * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。\n */\nfunction counter(state = 0, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return state + 1;\n  case 'DECREMENT':\n    return state - 1;\n  default:\n    return state;\n  }\n}\n\n// 创建 Redux store 来存放应用的状态。\n// API 是 { subscribe, dispatch, getState }。\nlet store = createStore(counter);\n\n// 可以手动订阅更新，也可以事件绑定到视图层。\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\n// 改变内部 state 惟一方法是 dispatch 一个 action。\n// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行\nstore.dispatch({ type: 'INCREMENT' });\n// 1\nstore.dispatch({ type: 'INCREMENT' });\n// 2\nstore.dispatch({ type: 'DECREMENT' });\n// 1\n~~~\n\nRedux 没有 Dispatcher 且不支持多个 store。相反，只有一个单一的 store 和一个根级的 reduce 函数（reducer）\n\n![image](http://note.youdao.com/yws/api/personal/file/WEBe992302275f8c8d667e0a308299fd566?method=download&shareKey=f1d0d83b8281356a94bc605858349a2d)\n\n## 中间件\n~~~\nredux-thunk — 用最简单的方式搭建异步 action 构造器\nredux-promise — 遵从 FSA 标准的 promise 中间件\nredux-axios-middleware — 使用 axios HTTP 客户端获取数据的 Redux 中间件\nredux-observable — Redux 的 RxJS 中间件\nredux-rx — 给 Redux 用的 RxJS 工具，包括观察变量的中间件\nredux-logger — 记录所有 Redux action 和下一次 state 的日志\nredux-immutable-state-invariant — 开发中的状态变更提醒\nredux-unhandled-action — 开发过程中，若 Action 未使 State 发生变化则发出警告\nredux-analytics — Redux middleware 分析\nredux-gen — Redux middleware 生成器\nredux-saga — Redux 应用的另一种副作用 model\nredux-action-tree — Redux 的可组合性 Cerebral-style 信号\napollo-client — 针对 GraphQL 服务器及基于 Redux 的 UI 框架的缓存客户端\n~~~\n\n# 三大原则\nRedux 可以用这三个基本原则来描述：\n## 单一数据源\n整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中\n\n## State 是只读的\n惟一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象\n\n## 使用纯函数来执行修改\n为了描述 action 如何改变 state tree ，你需要编写 reducers；Reducer 只是一些纯函数，它接收先前的 state 和 action，并返回新的 state\n\n## 总结\n1. 应用中所有的 state 都以一个对象树的形式储存在一个单一的 store 中\n2. 惟一改变 state 的办法是触发 action，一个描述发生什么的对象\n3. 为了描述 action 如何改变 state 树，你需要编写 reducers\n4. 编写专门的函数来决定每个 action 如何改变应用的 state，这个函数被叫做 reducer\n\n# 安装\n1. 安装redux：npm install redux --save \n2. 使用 React 绑定库和开发者工具：npm install  react-redux --save；npm install redux-devtools --save-dev\n\n# 原理\n![image](/pub-images/redux组件配合原理.png)\n\n# Action\nAction 是把数据从应用传到 store 的有效载荷,它是 store 数据的唯一来源。一般来说会通过 store.dispatch() 将 action 传到 store。\n\naction 内必须使用一个字符串类型的 type 字段来表示将要执行的动作.多数情况下，type 会被定义成字符串常量,建议使用单独的模块或文件来存放 action。除了 type 字段外，action 对象的结构完全由自己决定\n~~~\nimport { ADD_TODO, REMOVE_TODO } from '../actionTypes'\n~~~\n## Action 创建函数\nAction 创建函数 就是生成 action 的方法\n~~~\nfunction addTodo(text) {\n  return {\n    type: ADD_TODO,\n    text\n  }\n}\n~~~\nbindActionCreators() 可以自动把多个 action 创建函数 绑定到 dispatch() 方法上。\n\n# Reducer\n永远不要在 reducer 里做这些操作：\n1. 修改传入参数；\n2. 执行有副作用的操作，如 API 请求和路由跳转；\n3. 调用非纯函数，如 Date.now() 或 Math.random()\n\n~~~\nfunction todoApp(state = initialState, action) {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return Object.assign({}, state, {\n        visibilityFilter: action.filter\n      })\n    case ADD_TODO:\n      return Object.assign({}, state, {\n        todos: [\n          ...state.todos,\n          {\n            text: action.text,\n            completed: false\n          }\n        ]\n      })\n    default:\n      return state\n  }\n}\n~~~\n1. 不要修改 state。 使用 Object.assign() 新建了一个副本。不能这样使用 Object.assign(state, { visibilityFilter: action.filter })，因为它会改变第一个参数的值。你必须把第一个参数设置为空对象。你也可以开启对ES7提案对象展开运算符的支持, 从而使用 { ...state, ...newState } 达到相同的目的。\n2. 在 default 情况下返回旧的 state\n3. Object.assign() 是 ES6 特性，但多数浏览器并不支持。你要么使用 polyfill，Babel 插件，或者使用其它库如 _.assign() 提供的帮助方法。\n4. 新的 todos 对象就相当于旧的 todos 在末尾加上新建的 todo。而这个新的 todo 又是基于 action 中的数据创建的\n\n# Store\nStore 有以下职责：\n1. 维持应用的 state；\n2. 提供 getState() 方法获取 state；\n3. 提供 dispatch(action) 方法更新 state；\n4. 通过 subscribe(listener) 注册监听器;\n5. 通过 subscribe(listener) 返回的函数注销监听器\n \n# 搭配react\nRedux 和 React 之间没有关系。Redux 支持 React、Angular、Ember、jQuery 甚至纯 JavaScript。\n\n连接到 Redux：我们需要做出两个变化，将 App 组件连接到 Redux 并且让它能够 dispatch actions 以及从 Redux store 读取到 state\n1. 获取从之前安装好的 react-redux 提供的 Provider，并且在渲染之前将根组件包装进 <Provider>\n~~~\n//index.js\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './containers/App'\nimport todoApp from './reducers'\n\nlet store = createStore(todoApp);\n\nlet rootElement = document.getElementById('root')\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n~~~\n2. 通过 react-redux 提供的 connect() 方法将包装好的组件连接到Redux\n~~~\nimport React, { Component, PropTypes } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo, completeTodo, setVisibilityFilter, VisibilityFilters } from '../actions';\nimport AddTodo from '../components/AddTodo';\nimport TodoList from '../components/TodoList';\nimport Footer from '../components/Footer';\n\nclass App extends Component {\n  render() {\n    // 通过调用 connect() 注入:\n    const { dispatch, visibleTodos, visibilityFilter } = this.props\n    return (\n      <div>\n        <AddTodo\n          onAddClick={text =>\n            dispatch(addTodo(text))\n          } />\n        <TodoList\n          todos={this.props.visibleTodos}\n          onTodoClick={index =>\n            dispatch(completeTodo(index))\n          } />\n        <Footer\n          filter={visibilityFilter}\n          onFilterChange={nextFilter =>\n            dispatch(setVisibilityFilter(nextFilter))\n          } />\n      </div>\n    )\n  }\n}\n\nApp.propTypes = {\n  visibleTodos: PropTypes.arrayOf(PropTypes.shape({\n    text: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired\n  })),\n  visibilityFilter: PropTypes.oneOf([\n    'SHOW_ALL',\n    'SHOW_COMPLETED',\n    'SHOW_ACTIVE'\n  ]).isRequired\n}\n\nfunction selectTodos(todos, filter) {\n  switch (filter) {\n  case VisibilityFilters.SHOW_ALL:\n    return todos;\n  case VisibilityFilters.SHOW_COMPLETED:\n    return todos.filter(todo => todo.completed);\n  case VisibilityFilters.SHOW_ACTIVE:\n    return todos.filter(todo => !todo.completed);\n  }\n}\n\n// 基于全局 state ，哪些是我们想注入的 props ?\n// 注意：使用 https://github.com/reactjs/reselect 效果更佳。\nfunction select(state) {\n  return {\n    visibleTodos: selectTodos(state.todos, state.visibilityFilter),\n    visibilityFilter: state.visibilityFilter\n  };\n}\n\n// 包装 component ，注入 dispatch 和 state 到其默认的 connect(select)(App) 中；\nexport default connect(select)(App);\n~~~\n\n","source":"_posts/2018-10-26-Redux入门.md","raw":"---\ntitle: Redux入门\ntags:\n  - React\n  - Redux\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-26 15:20:26\ncategories: React\npassword:\n---\n~~~\nhttp://redux.js.org/\nhttp://www.redux.org.cn/\nhttp://www.imooc.com/learn/744  视频教程\n~~~\n\n# 简介\nRedux 由 Flux 演变而来，但受 Elm 的启发，避开了 Flux 的复杂性\n\n~~~\nimport { createStore } from 'redux';\n\n/**\n * 这是一个 reducer，形式为 (state, action) => state 的纯函数。\n * 描述了 action 如何把 state 转变成下一个 state。\n *\n * state 的形式取决于你，可以是基本类型、数组、对象、\n * 甚至是 Immutable.js 生成的数据结构。惟一的要点是\n * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。\n *\n * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)\n * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。\n */\nfunction counter(state = 0, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return state + 1;\n  case 'DECREMENT':\n    return state - 1;\n  default:\n    return state;\n  }\n}\n\n// 创建 Redux store 来存放应用的状态。\n// API 是 { subscribe, dispatch, getState }。\nlet store = createStore(counter);\n\n// 可以手动订阅更新，也可以事件绑定到视图层。\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\n// 改变内部 state 惟一方法是 dispatch 一个 action。\n// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行\nstore.dispatch({ type: 'INCREMENT' });\n// 1\nstore.dispatch({ type: 'INCREMENT' });\n// 2\nstore.dispatch({ type: 'DECREMENT' });\n// 1\n~~~\n\nRedux 没有 Dispatcher 且不支持多个 store。相反，只有一个单一的 store 和一个根级的 reduce 函数（reducer）\n\n![image](http://note.youdao.com/yws/api/personal/file/WEBe992302275f8c8d667e0a308299fd566?method=download&shareKey=f1d0d83b8281356a94bc605858349a2d)\n\n## 中间件\n~~~\nredux-thunk — 用最简单的方式搭建异步 action 构造器\nredux-promise — 遵从 FSA 标准的 promise 中间件\nredux-axios-middleware — 使用 axios HTTP 客户端获取数据的 Redux 中间件\nredux-observable — Redux 的 RxJS 中间件\nredux-rx — 给 Redux 用的 RxJS 工具，包括观察变量的中间件\nredux-logger — 记录所有 Redux action 和下一次 state 的日志\nredux-immutable-state-invariant — 开发中的状态变更提醒\nredux-unhandled-action — 开发过程中，若 Action 未使 State 发生变化则发出警告\nredux-analytics — Redux middleware 分析\nredux-gen — Redux middleware 生成器\nredux-saga — Redux 应用的另一种副作用 model\nredux-action-tree — Redux 的可组合性 Cerebral-style 信号\napollo-client — 针对 GraphQL 服务器及基于 Redux 的 UI 框架的缓存客户端\n~~~\n\n# 三大原则\nRedux 可以用这三个基本原则来描述：\n## 单一数据源\n整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中\n\n## State 是只读的\n惟一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象\n\n## 使用纯函数来执行修改\n为了描述 action 如何改变 state tree ，你需要编写 reducers；Reducer 只是一些纯函数，它接收先前的 state 和 action，并返回新的 state\n\n## 总结\n1. 应用中所有的 state 都以一个对象树的形式储存在一个单一的 store 中\n2. 惟一改变 state 的办法是触发 action，一个描述发生什么的对象\n3. 为了描述 action 如何改变 state 树，你需要编写 reducers\n4. 编写专门的函数来决定每个 action 如何改变应用的 state，这个函数被叫做 reducer\n\n# 安装\n1. 安装redux：npm install redux --save \n2. 使用 React 绑定库和开发者工具：npm install  react-redux --save；npm install redux-devtools --save-dev\n\n# 原理\n![image](/pub-images/redux组件配合原理.png)\n\n# Action\nAction 是把数据从应用传到 store 的有效载荷,它是 store 数据的唯一来源。一般来说会通过 store.dispatch() 将 action 传到 store。\n\naction 内必须使用一个字符串类型的 type 字段来表示将要执行的动作.多数情况下，type 会被定义成字符串常量,建议使用单独的模块或文件来存放 action。除了 type 字段外，action 对象的结构完全由自己决定\n~~~\nimport { ADD_TODO, REMOVE_TODO } from '../actionTypes'\n~~~\n## Action 创建函数\nAction 创建函数 就是生成 action 的方法\n~~~\nfunction addTodo(text) {\n  return {\n    type: ADD_TODO,\n    text\n  }\n}\n~~~\nbindActionCreators() 可以自动把多个 action 创建函数 绑定到 dispatch() 方法上。\n\n# Reducer\n永远不要在 reducer 里做这些操作：\n1. 修改传入参数；\n2. 执行有副作用的操作，如 API 请求和路由跳转；\n3. 调用非纯函数，如 Date.now() 或 Math.random()\n\n~~~\nfunction todoApp(state = initialState, action) {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return Object.assign({}, state, {\n        visibilityFilter: action.filter\n      })\n    case ADD_TODO:\n      return Object.assign({}, state, {\n        todos: [\n          ...state.todos,\n          {\n            text: action.text,\n            completed: false\n          }\n        ]\n      })\n    default:\n      return state\n  }\n}\n~~~\n1. 不要修改 state。 使用 Object.assign() 新建了一个副本。不能这样使用 Object.assign(state, { visibilityFilter: action.filter })，因为它会改变第一个参数的值。你必须把第一个参数设置为空对象。你也可以开启对ES7提案对象展开运算符的支持, 从而使用 { ...state, ...newState } 达到相同的目的。\n2. 在 default 情况下返回旧的 state\n3. Object.assign() 是 ES6 特性，但多数浏览器并不支持。你要么使用 polyfill，Babel 插件，或者使用其它库如 _.assign() 提供的帮助方法。\n4. 新的 todos 对象就相当于旧的 todos 在末尾加上新建的 todo。而这个新的 todo 又是基于 action 中的数据创建的\n\n# Store\nStore 有以下职责：\n1. 维持应用的 state；\n2. 提供 getState() 方法获取 state；\n3. 提供 dispatch(action) 方法更新 state；\n4. 通过 subscribe(listener) 注册监听器;\n5. 通过 subscribe(listener) 返回的函数注销监听器\n \n# 搭配react\nRedux 和 React 之间没有关系。Redux 支持 React、Angular、Ember、jQuery 甚至纯 JavaScript。\n\n连接到 Redux：我们需要做出两个变化，将 App 组件连接到 Redux 并且让它能够 dispatch actions 以及从 Redux store 读取到 state\n1. 获取从之前安装好的 react-redux 提供的 Provider，并且在渲染之前将根组件包装进 <Provider>\n~~~\n//index.js\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './containers/App'\nimport todoApp from './reducers'\n\nlet store = createStore(todoApp);\n\nlet rootElement = document.getElementById('root')\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n~~~\n2. 通过 react-redux 提供的 connect() 方法将包装好的组件连接到Redux\n~~~\nimport React, { Component, PropTypes } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo, completeTodo, setVisibilityFilter, VisibilityFilters } from '../actions';\nimport AddTodo from '../components/AddTodo';\nimport TodoList from '../components/TodoList';\nimport Footer from '../components/Footer';\n\nclass App extends Component {\n  render() {\n    // 通过调用 connect() 注入:\n    const { dispatch, visibleTodos, visibilityFilter } = this.props\n    return (\n      <div>\n        <AddTodo\n          onAddClick={text =>\n            dispatch(addTodo(text))\n          } />\n        <TodoList\n          todos={this.props.visibleTodos}\n          onTodoClick={index =>\n            dispatch(completeTodo(index))\n          } />\n        <Footer\n          filter={visibilityFilter}\n          onFilterChange={nextFilter =>\n            dispatch(setVisibilityFilter(nextFilter))\n          } />\n      </div>\n    )\n  }\n}\n\nApp.propTypes = {\n  visibleTodos: PropTypes.arrayOf(PropTypes.shape({\n    text: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired\n  })),\n  visibilityFilter: PropTypes.oneOf([\n    'SHOW_ALL',\n    'SHOW_COMPLETED',\n    'SHOW_ACTIVE'\n  ]).isRequired\n}\n\nfunction selectTodos(todos, filter) {\n  switch (filter) {\n  case VisibilityFilters.SHOW_ALL:\n    return todos;\n  case VisibilityFilters.SHOW_COMPLETED:\n    return todos.filter(todo => todo.completed);\n  case VisibilityFilters.SHOW_ACTIVE:\n    return todos.filter(todo => !todo.completed);\n  }\n}\n\n// 基于全局 state ，哪些是我们想注入的 props ?\n// 注意：使用 https://github.com/reactjs/reselect 效果更佳。\nfunction select(state) {\n  return {\n    visibleTodos: selectTodos(state.todos, state.visibilityFilter),\n    visibilityFilter: state.visibilityFilter\n  };\n}\n\n// 包装 component ，注入 dispatch 和 state 到其默认的 connect(select)(App) 中；\nexport default connect(select)(App);\n~~~\n\n","slug":"Redux入门","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrvs003mck8hwlnkw2xq","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://redux.js.org/</span><br><span class=\"line\">http://www.redux.org.cn/</span><br><span class=\"line\">http://www.imooc.com/learn/744  视频教程</span><br></pre></td></tr></table></figure>\n<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<p>Redux 由 Flux 演变而来，但受 Elm 的启发，避开了 Flux 的复杂性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createStore &#125; from &apos;redux&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</span><br><span class=\"line\"> * 描述了 action 如何把 state 转变成下一个 state。</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * state 的形式取决于你，可以是基本类型、数组、对象、</span><br><span class=\"line\"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</span><br><span class=\"line\"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</span><br><span class=\"line\"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</span><br><span class=\"line\"> */</span><br><span class=\"line\">function counter(state = 0, action) &#123;</span><br><span class=\"line\">  switch (action.type) &#123;</span><br><span class=\"line\">  case &apos;INCREMENT&apos;:</span><br><span class=\"line\">    return state + 1;</span><br><span class=\"line\">  case &apos;DECREMENT&apos;:</span><br><span class=\"line\">    return state - 1;</span><br><span class=\"line\">  default:</span><br><span class=\"line\">    return state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建 Redux store 来存放应用的状态。</span><br><span class=\"line\">// API 是 &#123; subscribe, dispatch, getState &#125;。</span><br><span class=\"line\">let store = createStore(counter);</span><br><span class=\"line\"></span><br><span class=\"line\">// 可以手动订阅更新，也可以事件绑定到视图层。</span><br><span class=\"line\">store.subscribe(() =&gt;</span><br><span class=\"line\">  console.log(store.getState())</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">// 改变内部 state 惟一方法是 dispatch 一个 action。</span><br><span class=\"line\">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</span><br><span class=\"line\">store.dispatch(&#123; type: &apos;INCREMENT&apos; &#125;);</span><br><span class=\"line\">// 1</span><br><span class=\"line\">store.dispatch(&#123; type: &apos;INCREMENT&apos; &#125;);</span><br><span class=\"line\">// 2</span><br><span class=\"line\">store.dispatch(&#123; type: &apos;DECREMENT&apos; &#125;);</span><br><span class=\"line\">// 1</span><br></pre></td></tr></table></figure>\n<p>Redux 没有 Dispatcher 且不支持多个 store。相反，只有一个单一的 store 和一个根级的 reduce 函数（reducer）</p>\n<p><img src=\"http://note.youdao.com/yws/api/personal/file/WEBe992302275f8c8d667e0a308299fd566?method=download&amp;shareKey=f1d0d83b8281356a94bc605858349a2d\" alt=\"image\"></p>\n<h2 id=\"中间件\"><a class=\"markdownIt-Anchor\" href=\"#中间件\"></a> 中间件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redux-thunk — 用最简单的方式搭建异步 action 构造器</span><br><span class=\"line\">redux-promise — 遵从 FSA 标准的 promise 中间件</span><br><span class=\"line\">redux-axios-middleware — 使用 axios HTTP 客户端获取数据的 Redux 中间件</span><br><span class=\"line\">redux-observable — Redux 的 RxJS 中间件</span><br><span class=\"line\">redux-rx — 给 Redux 用的 RxJS 工具，包括观察变量的中间件</span><br><span class=\"line\">redux-logger — 记录所有 Redux action 和下一次 state 的日志</span><br><span class=\"line\">redux-immutable-state-invariant — 开发中的状态变更提醒</span><br><span class=\"line\">redux-unhandled-action — 开发过程中，若 Action 未使 State 发生变化则发出警告</span><br><span class=\"line\">redux-analytics — Redux middleware 分析</span><br><span class=\"line\">redux-gen — Redux middleware 生成器</span><br><span class=\"line\">redux-saga — Redux 应用的另一种副作用 model</span><br><span class=\"line\">redux-action-tree — Redux 的可组合性 Cerebral-style 信号</span><br><span class=\"line\">apollo-client — 针对 GraphQL 服务器及基于 Redux 的 UI 框架的缓存客户端</span><br></pre></td></tr></table></figure>\n<h1 id=\"三大原则\"><a class=\"markdownIt-Anchor\" href=\"#三大原则\"></a> 三大原则</h1>\n<p>Redux 可以用这三个基本原则来描述：</p>\n<h2 id=\"单一数据源\"><a class=\"markdownIt-Anchor\" href=\"#单一数据源\"></a> 单一数据源</h2>\n<p>整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中</p>\n<h2 id=\"state-是只读的\"><a class=\"markdownIt-Anchor\" href=\"#state-是只读的\"></a> State 是只读的</h2>\n<p>惟一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象</p>\n<h2 id=\"使用纯函数来执行修改\"><a class=\"markdownIt-Anchor\" href=\"#使用纯函数来执行修改\"></a> 使用纯函数来执行修改</h2>\n<p>为了描述 action 如何改变 state tree ，你需要编写 reducers；Reducer 只是一些纯函数，它接收先前的 state 和 action，并返回新的 state</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<ol>\n<li>应用中所有的 state 都以一个对象树的形式储存在一个单一的 store 中</li>\n<li>惟一改变 state 的办法是触发 action，一个描述发生什么的对象</li>\n<li>为了描述 action 如何改变 state 树，你需要编写 reducers</li>\n<li>编写专门的函数来决定每个 action 如何改变应用的 state，这个函数被叫做 reducer</li>\n</ol>\n<h1 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h1>\n<ol>\n<li>安装redux：npm install redux --save</li>\n<li>使用 React 绑定库和开发者工具：npm install  react-redux --save；npm install redux-devtools --save-dev</li>\n</ol>\n<h1 id=\"原理\"><a class=\"markdownIt-Anchor\" href=\"#原理\"></a> 原理</h1>\n<p><img src=\"/pub-images/redux%E7%BB%84%E4%BB%B6%E9%85%8D%E5%90%88%E5%8E%9F%E7%90%86.png\" alt=\"image\"></p>\n<h1 id=\"action\"><a class=\"markdownIt-Anchor\" href=\"#action\"></a> Action</h1>\n<p>Action 是把数据从应用传到 store 的有效载荷,它是 store 数据的唯一来源。一般来说会通过 store.dispatch() 将 action 传到 store。</p>\n<p>action 内必须使用一个字符串类型的 type 字段来表示将要执行的动作.多数情况下，type 会被定义成字符串常量,建议使用单独的模块或文件来存放 action。除了 type 字段外，action 对象的结构完全由自己决定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; ADD_TODO, REMOVE_TODO &#125; from &apos;../actionTypes&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"action-创建函数\"><a class=\"markdownIt-Anchor\" href=\"#action-创建函数\"></a> Action 创建函数</h2>\n<p>Action 创建函数 就是生成 action 的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function addTodo(text) &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    type: ADD_TODO,</span><br><span class=\"line\">    text</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>bindActionCreators() 可以自动把多个 action 创建函数 绑定到 dispatch() 方法上。</p>\n<h1 id=\"reducer\"><a class=\"markdownIt-Anchor\" href=\"#reducer\"></a> Reducer</h1>\n<p>永远不要在 reducer 里做这些操作：</p>\n<ol>\n<li>修改传入参数；</li>\n<li>执行有副作用的操作，如 API 请求和路由跳转；</li>\n<li>调用非纯函数，如 Date.now() 或 Math.random()</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function todoApp(state = initialState, action) &#123;</span><br><span class=\"line\">  switch (action.type) &#123;</span><br><span class=\"line\">    case SET_VISIBILITY_FILTER:</span><br><span class=\"line\">      return Object.assign(&#123;&#125;, state, &#123;</span><br><span class=\"line\">        visibilityFilter: action.filter</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    case ADD_TODO:</span><br><span class=\"line\">      return Object.assign(&#123;&#125;, state, &#123;</span><br><span class=\"line\">        todos: [</span><br><span class=\"line\">          ...state.todos,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            text: action.text,</span><br><span class=\"line\">            completed: false</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      return state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>不要修改 state。 使用 Object.assign() 新建了一个副本。不能这样使用 Object.assign(state, { visibilityFilter: action.filter })，因为它会改变第一个参数的值。你必须把第一个参数设置为空对象。你也可以开启对ES7提案对象展开运算符的支持, 从而使用 { …state, …newState } 达到相同的目的。</li>\n<li>在 default 情况下返回旧的 state</li>\n<li>Object.assign() 是 ES6 特性，但多数浏览器并不支持。你要么使用 polyfill，Babel 插件，或者使用其它库如 _.assign() 提供的帮助方法。</li>\n<li>新的 todos 对象就相当于旧的 todos 在末尾加上新建的 todo。而这个新的 todo 又是基于 action 中的数据创建的</li>\n</ol>\n<h1 id=\"store\"><a class=\"markdownIt-Anchor\" href=\"#store\"></a> Store</h1>\n<p>Store 有以下职责：</p>\n<ol>\n<li>维持应用的 state；</li>\n<li>提供 getState() 方法获取 state；</li>\n<li>提供 dispatch(action) 方法更新 state；</li>\n<li>通过 subscribe(listener) 注册监听器;</li>\n<li>通过 subscribe(listener) 返回的函数注销监听器</li>\n</ol>\n<h1 id=\"搭配react\"><a class=\"markdownIt-Anchor\" href=\"#搭配react\"></a> 搭配react</h1>\n<p>Redux 和 React 之间没有关系。Redux 支持 React、Angular、Ember、jQuery 甚至纯 JavaScript。</p>\n<p>连接到 Redux：我们需要做出两个变化，将 App 组件连接到 Redux 并且让它能够 dispatch actions 以及从 Redux store 读取到 state</p>\n<ol>\n<li>获取从之前安装好的 react-redux 提供的 Provider，并且在渲染之前将根组件包装进 <provider></provider></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.js</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &#123; render &#125; from &apos;react-dom&apos;</span><br><span class=\"line\">import &#123; createStore &#125; from &apos;redux&apos;</span><br><span class=\"line\">import &#123; Provider &#125; from &apos;react-redux&apos;</span><br><span class=\"line\">import App from &apos;./containers/App&apos;</span><br><span class=\"line\">import todoApp from &apos;./reducers&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">let store = createStore(todoApp);</span><br><span class=\"line\"></span><br><span class=\"line\">let rootElement = document.getElementById(&apos;root&apos;)</span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;/Provider&gt;,</span><br><span class=\"line\">  rootElement</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>通过 react-redux 提供的 connect() 方法将包装好的组件连接到Redux</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component, PropTypes &#125; from &apos;react&apos;;</span><br><span class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;;</span><br><span class=\"line\">import &#123; addTodo, completeTodo, setVisibilityFilter, VisibilityFilters &#125; from &apos;../actions&apos;;</span><br><span class=\"line\">import AddTodo from &apos;../components/AddTodo&apos;;</span><br><span class=\"line\">import TodoList from &apos;../components/TodoList&apos;;</span><br><span class=\"line\">import Footer from &apos;../components/Footer&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class App extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    // 通过调用 connect() 注入:</span><br><span class=\"line\">    const &#123; dispatch, visibleTodos, visibilityFilter &#125; = this.props</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;AddTodo</span><br><span class=\"line\">          onAddClick=&#123;text =&gt;</span><br><span class=\"line\">            dispatch(addTodo(text))</span><br><span class=\"line\">          &#125; /&gt;</span><br><span class=\"line\">        &lt;TodoList</span><br><span class=\"line\">          todos=&#123;this.props.visibleTodos&#125;</span><br><span class=\"line\">          onTodoClick=&#123;index =&gt;</span><br><span class=\"line\">            dispatch(completeTodo(index))</span><br><span class=\"line\">          &#125; /&gt;</span><br><span class=\"line\">        &lt;Footer</span><br><span class=\"line\">          filter=&#123;visibilityFilter&#125;</span><br><span class=\"line\">          onFilterChange=&#123;nextFilter =&gt;</span><br><span class=\"line\">            dispatch(setVisibilityFilter(nextFilter))</span><br><span class=\"line\">          &#125; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">App.propTypes = &#123;</span><br><span class=\"line\">  visibleTodos: PropTypes.arrayOf(PropTypes.shape(&#123;</span><br><span class=\"line\">    text: PropTypes.string.isRequired,</span><br><span class=\"line\">    completed: PropTypes.bool.isRequired</span><br><span class=\"line\">  &#125;)),</span><br><span class=\"line\">  visibilityFilter: PropTypes.oneOf([</span><br><span class=\"line\">    &apos;SHOW_ALL&apos;,</span><br><span class=\"line\">    &apos;SHOW_COMPLETED&apos;,</span><br><span class=\"line\">    &apos;SHOW_ACTIVE&apos;</span><br><span class=\"line\">  ]).isRequired</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function selectTodos(todos, filter) &#123;</span><br><span class=\"line\">  switch (filter) &#123;</span><br><span class=\"line\">  case VisibilityFilters.SHOW_ALL:</span><br><span class=\"line\">    return todos;</span><br><span class=\"line\">  case VisibilityFilters.SHOW_COMPLETED:</span><br><span class=\"line\">    return todos.filter(todo =&gt; todo.completed);</span><br><span class=\"line\">  case VisibilityFilters.SHOW_ACTIVE:</span><br><span class=\"line\">    return todos.filter(todo =&gt; !todo.completed);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 基于全局 state ，哪些是我们想注入的 props ?</span><br><span class=\"line\">// 注意：使用 https://github.com/reactjs/reselect 效果更佳。</span><br><span class=\"line\">function select(state) &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    visibleTodos: selectTodos(state.todos, state.visibilityFilter),</span><br><span class=\"line\">    visibilityFilter: state.visibilityFilter</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 包装 component ，注入 dispatch 和 state 到其默认的 connect(select)(App) 中；</span><br><span class=\"line\">export default connect(select)(App);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://redux.js.org/</span><br><span class=\"line\">http://www.redux.org.cn/</span><br><span class=\"line\">http://www.imooc.com/learn/744  视频教程</span><br></pre></td></tr></table></figure>\n<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<p>Redux 由 Flux 演变而来，但受 Elm 的启发，避开了 Flux 的复杂性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createStore &#125; from &apos;redux&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</span><br><span class=\"line\"> * 描述了 action 如何把 state 转变成下一个 state。</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * state 的形式取决于你，可以是基本类型、数组、对象、</span><br><span class=\"line\"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</span><br><span class=\"line\"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</span><br><span class=\"line\"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</span><br><span class=\"line\"> */</span><br><span class=\"line\">function counter(state = 0, action) &#123;</span><br><span class=\"line\">  switch (action.type) &#123;</span><br><span class=\"line\">  case &apos;INCREMENT&apos;:</span><br><span class=\"line\">    return state + 1;</span><br><span class=\"line\">  case &apos;DECREMENT&apos;:</span><br><span class=\"line\">    return state - 1;</span><br><span class=\"line\">  default:</span><br><span class=\"line\">    return state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建 Redux store 来存放应用的状态。</span><br><span class=\"line\">// API 是 &#123; subscribe, dispatch, getState &#125;。</span><br><span class=\"line\">let store = createStore(counter);</span><br><span class=\"line\"></span><br><span class=\"line\">// 可以手动订阅更新，也可以事件绑定到视图层。</span><br><span class=\"line\">store.subscribe(() =&gt;</span><br><span class=\"line\">  console.log(store.getState())</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">// 改变内部 state 惟一方法是 dispatch 一个 action。</span><br><span class=\"line\">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</span><br><span class=\"line\">store.dispatch(&#123; type: &apos;INCREMENT&apos; &#125;);</span><br><span class=\"line\">// 1</span><br><span class=\"line\">store.dispatch(&#123; type: &apos;INCREMENT&apos; &#125;);</span><br><span class=\"line\">// 2</span><br><span class=\"line\">store.dispatch(&#123; type: &apos;DECREMENT&apos; &#125;);</span><br><span class=\"line\">// 1</span><br></pre></td></tr></table></figure>\n<p>Redux 没有 Dispatcher 且不支持多个 store。相反，只有一个单一的 store 和一个根级的 reduce 函数（reducer）</p>\n<p><img src=\"http://note.youdao.com/yws/api/personal/file/WEBe992302275f8c8d667e0a308299fd566?method=download&amp;shareKey=f1d0d83b8281356a94bc605858349a2d\" alt=\"image\"></p>\n<h2 id=\"中间件\"><a class=\"markdownIt-Anchor\" href=\"#中间件\"></a> 中间件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redux-thunk — 用最简单的方式搭建异步 action 构造器</span><br><span class=\"line\">redux-promise — 遵从 FSA 标准的 promise 中间件</span><br><span class=\"line\">redux-axios-middleware — 使用 axios HTTP 客户端获取数据的 Redux 中间件</span><br><span class=\"line\">redux-observable — Redux 的 RxJS 中间件</span><br><span class=\"line\">redux-rx — 给 Redux 用的 RxJS 工具，包括观察变量的中间件</span><br><span class=\"line\">redux-logger — 记录所有 Redux action 和下一次 state 的日志</span><br><span class=\"line\">redux-immutable-state-invariant — 开发中的状态变更提醒</span><br><span class=\"line\">redux-unhandled-action — 开发过程中，若 Action 未使 State 发生变化则发出警告</span><br><span class=\"line\">redux-analytics — Redux middleware 分析</span><br><span class=\"line\">redux-gen — Redux middleware 生成器</span><br><span class=\"line\">redux-saga — Redux 应用的另一种副作用 model</span><br><span class=\"line\">redux-action-tree — Redux 的可组合性 Cerebral-style 信号</span><br><span class=\"line\">apollo-client — 针对 GraphQL 服务器及基于 Redux 的 UI 框架的缓存客户端</span><br></pre></td></tr></table></figure>\n<h1 id=\"三大原则\"><a class=\"markdownIt-Anchor\" href=\"#三大原则\"></a> 三大原则</h1>\n<p>Redux 可以用这三个基本原则来描述：</p>\n<h2 id=\"单一数据源\"><a class=\"markdownIt-Anchor\" href=\"#单一数据源\"></a> 单一数据源</h2>\n<p>整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中</p>\n<h2 id=\"state-是只读的\"><a class=\"markdownIt-Anchor\" href=\"#state-是只读的\"></a> State 是只读的</h2>\n<p>惟一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象</p>\n<h2 id=\"使用纯函数来执行修改\"><a class=\"markdownIt-Anchor\" href=\"#使用纯函数来执行修改\"></a> 使用纯函数来执行修改</h2>\n<p>为了描述 action 如何改变 state tree ，你需要编写 reducers；Reducer 只是一些纯函数，它接收先前的 state 和 action，并返回新的 state</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<ol>\n<li>应用中所有的 state 都以一个对象树的形式储存在一个单一的 store 中</li>\n<li>惟一改变 state 的办法是触发 action，一个描述发生什么的对象</li>\n<li>为了描述 action 如何改变 state 树，你需要编写 reducers</li>\n<li>编写专门的函数来决定每个 action 如何改变应用的 state，这个函数被叫做 reducer</li>\n</ol>\n<h1 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h1>\n<ol>\n<li>安装redux：npm install redux --save</li>\n<li>使用 React 绑定库和开发者工具：npm install  react-redux --save；npm install redux-devtools --save-dev</li>\n</ol>\n<h1 id=\"原理\"><a class=\"markdownIt-Anchor\" href=\"#原理\"></a> 原理</h1>\n<p><img src=\"/pub-images/redux%E7%BB%84%E4%BB%B6%E9%85%8D%E5%90%88%E5%8E%9F%E7%90%86.png\" alt=\"image\"></p>\n<h1 id=\"action\"><a class=\"markdownIt-Anchor\" href=\"#action\"></a> Action</h1>\n<p>Action 是把数据从应用传到 store 的有效载荷,它是 store 数据的唯一来源。一般来说会通过 store.dispatch() 将 action 传到 store。</p>\n<p>action 内必须使用一个字符串类型的 type 字段来表示将要执行的动作.多数情况下，type 会被定义成字符串常量,建议使用单独的模块或文件来存放 action。除了 type 字段外，action 对象的结构完全由自己决定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; ADD_TODO, REMOVE_TODO &#125; from &apos;../actionTypes&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"action-创建函数\"><a class=\"markdownIt-Anchor\" href=\"#action-创建函数\"></a> Action 创建函数</h2>\n<p>Action 创建函数 就是生成 action 的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function addTodo(text) &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    type: ADD_TODO,</span><br><span class=\"line\">    text</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>bindActionCreators() 可以自动把多个 action 创建函数 绑定到 dispatch() 方法上。</p>\n<h1 id=\"reducer\"><a class=\"markdownIt-Anchor\" href=\"#reducer\"></a> Reducer</h1>\n<p>永远不要在 reducer 里做这些操作：</p>\n<ol>\n<li>修改传入参数；</li>\n<li>执行有副作用的操作，如 API 请求和路由跳转；</li>\n<li>调用非纯函数，如 Date.now() 或 Math.random()</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function todoApp(state = initialState, action) &#123;</span><br><span class=\"line\">  switch (action.type) &#123;</span><br><span class=\"line\">    case SET_VISIBILITY_FILTER:</span><br><span class=\"line\">      return Object.assign(&#123;&#125;, state, &#123;</span><br><span class=\"line\">        visibilityFilter: action.filter</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    case ADD_TODO:</span><br><span class=\"line\">      return Object.assign(&#123;&#125;, state, &#123;</span><br><span class=\"line\">        todos: [</span><br><span class=\"line\">          ...state.todos,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            text: action.text,</span><br><span class=\"line\">            completed: false</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      return state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>不要修改 state。 使用 Object.assign() 新建了一个副本。不能这样使用 Object.assign(state, { visibilityFilter: action.filter })，因为它会改变第一个参数的值。你必须把第一个参数设置为空对象。你也可以开启对ES7提案对象展开运算符的支持, 从而使用 { …state, …newState } 达到相同的目的。</li>\n<li>在 default 情况下返回旧的 state</li>\n<li>Object.assign() 是 ES6 特性，但多数浏览器并不支持。你要么使用 polyfill，Babel 插件，或者使用其它库如 _.assign() 提供的帮助方法。</li>\n<li>新的 todos 对象就相当于旧的 todos 在末尾加上新建的 todo。而这个新的 todo 又是基于 action 中的数据创建的</li>\n</ol>\n<h1 id=\"store\"><a class=\"markdownIt-Anchor\" href=\"#store\"></a> Store</h1>\n<p>Store 有以下职责：</p>\n<ol>\n<li>维持应用的 state；</li>\n<li>提供 getState() 方法获取 state；</li>\n<li>提供 dispatch(action) 方法更新 state；</li>\n<li>通过 subscribe(listener) 注册监听器;</li>\n<li>通过 subscribe(listener) 返回的函数注销监听器</li>\n</ol>\n<h1 id=\"搭配react\"><a class=\"markdownIt-Anchor\" href=\"#搭配react\"></a> 搭配react</h1>\n<p>Redux 和 React 之间没有关系。Redux 支持 React、Angular、Ember、jQuery 甚至纯 JavaScript。</p>\n<p>连接到 Redux：我们需要做出两个变化，将 App 组件连接到 Redux 并且让它能够 dispatch actions 以及从 Redux store 读取到 state</p>\n<ol>\n<li>获取从之前安装好的 react-redux 提供的 Provider，并且在渲染之前将根组件包装进 <provider></provider></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.js</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &#123; render &#125; from &apos;react-dom&apos;</span><br><span class=\"line\">import &#123; createStore &#125; from &apos;redux&apos;</span><br><span class=\"line\">import &#123; Provider &#125; from &apos;react-redux&apos;</span><br><span class=\"line\">import App from &apos;./containers/App&apos;</span><br><span class=\"line\">import todoApp from &apos;./reducers&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">let store = createStore(todoApp);</span><br><span class=\"line\"></span><br><span class=\"line\">let rootElement = document.getElementById(&apos;root&apos;)</span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;/Provider&gt;,</span><br><span class=\"line\">  rootElement</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>通过 react-redux 提供的 connect() 方法将包装好的组件连接到Redux</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component, PropTypes &#125; from &apos;react&apos;;</span><br><span class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;;</span><br><span class=\"line\">import &#123; addTodo, completeTodo, setVisibilityFilter, VisibilityFilters &#125; from &apos;../actions&apos;;</span><br><span class=\"line\">import AddTodo from &apos;../components/AddTodo&apos;;</span><br><span class=\"line\">import TodoList from &apos;../components/TodoList&apos;;</span><br><span class=\"line\">import Footer from &apos;../components/Footer&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class App extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    // 通过调用 connect() 注入:</span><br><span class=\"line\">    const &#123; dispatch, visibleTodos, visibilityFilter &#125; = this.props</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;AddTodo</span><br><span class=\"line\">          onAddClick=&#123;text =&gt;</span><br><span class=\"line\">            dispatch(addTodo(text))</span><br><span class=\"line\">          &#125; /&gt;</span><br><span class=\"line\">        &lt;TodoList</span><br><span class=\"line\">          todos=&#123;this.props.visibleTodos&#125;</span><br><span class=\"line\">          onTodoClick=&#123;index =&gt;</span><br><span class=\"line\">            dispatch(completeTodo(index))</span><br><span class=\"line\">          &#125; /&gt;</span><br><span class=\"line\">        &lt;Footer</span><br><span class=\"line\">          filter=&#123;visibilityFilter&#125;</span><br><span class=\"line\">          onFilterChange=&#123;nextFilter =&gt;</span><br><span class=\"line\">            dispatch(setVisibilityFilter(nextFilter))</span><br><span class=\"line\">          &#125; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">App.propTypes = &#123;</span><br><span class=\"line\">  visibleTodos: PropTypes.arrayOf(PropTypes.shape(&#123;</span><br><span class=\"line\">    text: PropTypes.string.isRequired,</span><br><span class=\"line\">    completed: PropTypes.bool.isRequired</span><br><span class=\"line\">  &#125;)),</span><br><span class=\"line\">  visibilityFilter: PropTypes.oneOf([</span><br><span class=\"line\">    &apos;SHOW_ALL&apos;,</span><br><span class=\"line\">    &apos;SHOW_COMPLETED&apos;,</span><br><span class=\"line\">    &apos;SHOW_ACTIVE&apos;</span><br><span class=\"line\">  ]).isRequired</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function selectTodos(todos, filter) &#123;</span><br><span class=\"line\">  switch (filter) &#123;</span><br><span class=\"line\">  case VisibilityFilters.SHOW_ALL:</span><br><span class=\"line\">    return todos;</span><br><span class=\"line\">  case VisibilityFilters.SHOW_COMPLETED:</span><br><span class=\"line\">    return todos.filter(todo =&gt; todo.completed);</span><br><span class=\"line\">  case VisibilityFilters.SHOW_ACTIVE:</span><br><span class=\"line\">    return todos.filter(todo =&gt; !todo.completed);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 基于全局 state ，哪些是我们想注入的 props ?</span><br><span class=\"line\">// 注意：使用 https://github.com/reactjs/reselect 效果更佳。</span><br><span class=\"line\">function select(state) &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    visibleTodos: selectTodos(state.todos, state.visibilityFilter),</span><br><span class=\"line\">    visibilityFilter: state.visibilityFilter</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 包装 component ，注入 dispatch 和 state 到其默认的 connect(select)(App) 中；</span><br><span class=\"line\">export default connect(select)(App);</span><br></pre></td></tr></table></figure>\n"},{"title":"oracle","copyright":true,"comments":1,"toc":true,"date":"2018-12-12T15:11:39.000Z","password":null,"_content":"\n官网：https://www.oracle.com/index.html\n版本中字母的含义：c（cloud）、g（grid）、i（internet）\n\n下载：https://www.oracle.com/downloads/，需要登录oracle官网，下载的两个文件解压在一个文件夹中\n\n安装：\n1. 安装Oracle11g出现INS-13001环境不满足最低要求 https://blog.csdn.net/q_sea__/article/details/79012808\n2.  Environment variable: \"PATH\"\n安装时确保不要关机或断电；安装过程中复制文件过程比较耗费时间\n\n完整的Oracle数据库通常由两部分组成：Oracle数据库和数据库实例。 \n1) 数据库是一系列物理文件的集合（数据文件，控制文件，联机日志，参数文件等）； \n2) Oracle数据库实例则是一组Oracle后台进程/线程以及在服务器分配的共享内存区。\n\n在启动Oracle数据库服务器时，实际上是在服务器的内存中创建一个Oracle实例（即在服务器内存中分配共享内存并创建相关的后台内存），然后由这个Oracle数据库实例来访问和控制磁盘中的数据文件。Oracle有一个很大的内存快，称为全局区（SGA）。\n\n\n数据库的创建与监听器的配置54C\n创建数据库:Database Conguration Assistant,可以创建、配置、删除、管理数据库\n全局数据库名称为数据库名称，其至少要有一个Oracle实例引用，该实例由SID唯一标识,如：orcl\n配置Enterprise Manager会占用较大内存，先不配置;注意选择字符集;修改scott和hr的密码\nsys用户为数据库的所有者，system用户为数据库的操作员\n监听器的配置：Net Conguration Assistant，配置完成后在系统服务中查看添加了OracleOraDb11g_home1TNSListener,此服务启动之后就允许外部连接数据库了\nOracleServiceORCL是关于数据库实例的服务，此服务启动之后，数据库才可用\n\noracle常用数据库工具\nOracle Universal Installer：OUI（Oracle全局安装器），用来安装卸载oracle数据库管理系统\nDatabase Conguration Assistant：(DBCA)创建、配置、删除、管理数据库\nNet Conguration Assistant：(NCA)监听器、命名方法、本地网络服务名、目录使用配置\nSQL Plus：基于命令行的oracle官方操作工具\nSQL Devloper：基于Java的图形化的oracle官方操作工具,需人工关联sqldeveloper.exe文件和配置JDK\nPL/SQL Devloper：第三方工具\nTOAD：第三方工具\n\nOracle中的用户、权限与角色\n用户管理：需切换到system用户操作\n    创建用户：create user 用户名 identified by 密码 [account lock|unlock] [password expire];（password expire表示密码立即过期，第一次登录后需修改密码）用户创建后还需授权才能操作数据库\n    修改用户：alter user 用户名 identified by 密码 [account lock|unlock] [password expire];\n    删除用户：drop user 用户名 [cascade];(cascade用来表示删除用户下的所有数据对象)\n权限管理：权限为系统中设置的安全规则或安全策略，分为系统权限（用户能否在数据库上完成某个动作）和对象权限（用户能否在某个数据库对象上完成某种操作）\n    系统权限授予：grant 权限 to user|role [with admin option];(表示可以级联授予)\n    系统权限回收：revoke 权限 from user|role;\n    对象权限授予：grant 权限[(col,...)] on 数据库对象 to user|role [with admin option];\n    对象权限回收：revoke 权限[(col,...)] on 数据库对象 from user|role;\n    对象权限的回收是级联的，系统权限回收是非级联的\n角色管理：角色是权限的集合，用来简化权限管理\n    创建／删除角色：create/drop role 角色;\n    角色上系统权限授予：grant 权限 to role [with admin option];(表示可以级联授予)\n    角色上系统权限回收：revoke 权限 from 角色;\n    角色上对象权限授予：grant 权限[(col,...)] on 数据库对象 to role [with admin option]; \n    角色上对象权限回收：revoke 权限[(col,...)] on 数据库对象 from role;\n    用户角色授予：grant 角色 to 用户;\n    用户角色回收：revoke 角色 from 用户;\n    \nOracle表：由行和列组成的数据库中基本的存储单元，访问其他用户的表需要加用户名作为前缀\n约束：表级别约束和列级别约束，由主键、外键、非空、唯一、检查5种约束\n启用表的只读状态便于备份和导出表：alter table 表名 read only;启用表的读写状态：alter table 表名 read write;\n\nOracle事务:有一组DML组成的逻辑工作单元，有原子性、一致性、独立性和持久性\n\n序列sequence：数值生成器，通常用于生成主键值，\n\ndual是Oracle提供的最小的工作表，只有一行一列，具有某些特殊功用，只有一条记录:'X',习惯上,我们称之为'伪表',他的存在是为了操作上的方便,因为select都是要有特定对象的.\nselect count(*) from dual;\n\n索引和同义词的使用\n索引：通过关联ROWID和关键值来提升查询速度\n同义词：数据库对象的别名，public同义词对所有用户有用，创建需一定权限\n    创建：create [public] synonym 名称 for object;\n    删除：drop [public] synonym 名称 for object;\n\nPL/SQL：是一种程序语言，叫做过程化SQL语言（Procedural Language/SQL）。PL/SQL是Oracle数据库对SQL语句的扩展。在普通SQL语句的使用上增加了编程语言的特点\n官网：https://www.oracle.com/technetwork/database/features/plsql/index.html\nPL/SQL developer官网：https://www.allroundautomations.com/\nPLSQL Developer 12 注册码\nproduct code： 4vkjwhfeh3ufnqnmpr9brvcuyujrx3n3le \nserial Number：226959 \npassword: xs374ca\n\n配置pl/sql的Database的两种方式：\n确保OracleOraDb11g_home1TNSListener和OracleServiceXXXX服务已启动\n1.登录时直接在Database选项输入数据库信息:在登录时输入数据库信息 ip:端口/数据库名,如：127.0.0.1:1521/ORCL\n2.配置product\\11.2.0\\dbhome_1\\NETWORK\\ADMIN\\tnsnames.ora文件，添加一下内容到文档最后，登录时输入如ORCL即可登录\nORCL =\n  (DESCRIPTION =\n    (ADDRESS_LIST =\n        (ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521))\n    )\n    (CONNECT_DATA =\n            (SERVER = DEDICATED)\n        (SERVICE_NAME = ORCL)\n    )\n  )\n  \nhttps://www.jikexueyuan.com/course/oracledb/\n\nhttps://www.oracle.com/technetwork/topics/winsoft-085727.html\n\nhttps://www.cnblogs.com/xiashiwendao/p/7634240.html\n\n严格来讲SQL会分为三种类型:\n\n1、数据操纵语言（DML）：用来操纵数据库中数据的命令。包括：select、insert、update、delete。\n\n2、数据定义语言（DDL）：用来建立数据库、数据库对象和定义列的命令。包括：create、alter、drop。\n\n3、数据控制语言（DCL）：用来控制数据库组件\n\n用select * from tab;来查询用户下的表\n查看表结构用:DESC 表名称 \n \n \nhttps://www.cnblogs.com/adforce/p/3312252.html\n全局数据库名：就是一个数据库的标识，在安装时就要想好，以后一般不修改，修改起来也麻烦，因为数据库一旦安装，数据库名就写进了控制文件，数据库表，很多地方都会用到这个数据库名。\n启动数据库：也叫全局数据库，是数据库系统的入口，它会内置一些高级权限的用户如SYS，SYSTEM等。我们用这些高级权限账号登陆就可以在数据库实例中创建表空间，用户，表了。\n\n查询当前数据库名：select name from v$database;\n\n我们访问Oracle都是访问一个实例，但这个实例如果关联了数据库文件，就是可以访问的，如果没有，就会得到实例不可用的错误。\n实例名指的是用于响应某个数据库操作的数据库管理系统的名称。她同时也叫SID。实例名是由参数instance_name决定的\n查询当前数据库实例名：select instance_name from v$instance;\n\n\n从oracle9i版本开始，引入了一个新的参数，即数据库服务名。数据库的逻辑表示，它是数据库呈现给客户机的方式。参数名是SERVICE_NAME。如果数据库有域名，则数据库服务名就是全局数据库名；否则，数据库服务名与数据库名相同。\n\n网络服务名(NET SERVICES NAME)\n         它是“连接描述符”简称，连接描述符是网络连接目标特殊格式的描述，它包括网络协议、主机名称或地址、和目标服务\n         在Oracle7和Oracle8版本,目标服务由Oracle系统标识符(SID)来标识，而Oracle8i、Oracle9i则通过数据库服务名来来标识。保存tnsnames.ora文件中在格式如下：\n myDB =\n   (DESCRIPTION =\n     (ADDRESS_LIST =\n       (ADDRESS = (PROTOCOL = TCP)(HOST = 10.10.10.1)(PORT = 1521))\n     )\n     (CONNECT_DATA =\n       (SERVICE_NAME = testDB.ChinaMobile.com)\n     )\n   )  \n\n若要向ORACLE代理商购买ORACLE，是以用户数来算钱的。那么，这个“用户”跟我们在ORACLE中通过\n\nCREATE USER USERNAME IDENTIFIED BY PASSWORD创建的用户是不同概念，“用户数”指的是并发访问用户数，\n\n（我理解是同时间访问同一个内存地址的进程数）。要是我买了8个用户的，可以建几十、上百个用户也没问题，只要峰值达不到并发数就可以了。\n\n打个比方，你的名字叫小明，但是你有很多外号。你父母叫你小明，但是朋友都叫你的外号。\n这里你的父母就是oracle实例，小明就是sid，service name就是你的外号。\nsid用于实例区分各个数据库，service name用于外部链接。\n\n一个Oracle Server由一个Oracle实例和一个Oracle数据库组成。\n即：Oracle Server = Oracle Instance + Oracle Database\n\nOracle实例包括了内存结构(SGA)和一系列后台进程(Background Process),两者合起来称为一个Oracle实例，即：Oracle Instance = SGA + Background Process\n\n\n数据库逻辑组织结构\n表空间、段、区、块\n一个数据库由一个或多个表空间组成，一个表空间只能属于一个数据库\n一个表空间由一个或多个多个数据文件组成，一个数据文件只能属于一个表空间\n一个数据文件由一个或多个操作系统块组成，每一个操作系统块只能数以一个数据文件\n一个表空间可以包含一个或多个段，一个段只能属于一个表空间\n一个段由一个或多个区组成，每一个区只能属于一个段\n一个区由一个或多个Oracle 块组成，每一个Oracle块只能属于一个区\n一个区只能属于一个数据文件，数据文件的空间可以分配到一个或多个区\n一个Oracle 块由一个或多个操作系统块组成，一个操作系统块是一个Oracle块的一部分\n\n\nhttps://blog.csdn.net/prince_lintb/article/details/78772999\n\npl/sql plus： \"／\"表示执行\n\n\nscott库：https://www.2cto.com/database/201805/742911.html\n\nhttps://www.cnblogs.com/adforce/p/3312252.html\nhttp://www.cnblogs.com/kscnchina/p/4570865.html\n\n声明时，变量以v_开头，常量以c_开头\n\nhttps://blog.csdn.net/michaelehome/article/details/79464214\n\nselect userenv('language') from dual;\nNLS_LANG=\"AMERICAN_AMERICA.AL32UTF8\"\n\n字符集：https://www.cnblogs.com/kaishirenshi/p/9018343.html\n\n本地动态sql\n\n\nSQL环境  begin .. end pl/sql环境\n\n一组SQL语句操作要成为事务，数据库管理系统必须保证这组操作的原子性（Atomicity）、一致性（consistency）、隔离性（Isolation）和持久性（Durability），这就是ACID特性。","source":"_posts/2018-12-12-oracle.md","raw":"---\ntitle: oracle\ntags:\n  - Oracle \ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-12-12 23:11:39\ncategories: 数据库\npassword:\n---\n\n官网：https://www.oracle.com/index.html\n版本中字母的含义：c（cloud）、g（grid）、i（internet）\n\n下载：https://www.oracle.com/downloads/，需要登录oracle官网，下载的两个文件解压在一个文件夹中\n\n安装：\n1. 安装Oracle11g出现INS-13001环境不满足最低要求 https://blog.csdn.net/q_sea__/article/details/79012808\n2.  Environment variable: \"PATH\"\n安装时确保不要关机或断电；安装过程中复制文件过程比较耗费时间\n\n完整的Oracle数据库通常由两部分组成：Oracle数据库和数据库实例。 \n1) 数据库是一系列物理文件的集合（数据文件，控制文件，联机日志，参数文件等）； \n2) Oracle数据库实例则是一组Oracle后台进程/线程以及在服务器分配的共享内存区。\n\n在启动Oracle数据库服务器时，实际上是在服务器的内存中创建一个Oracle实例（即在服务器内存中分配共享内存并创建相关的后台内存），然后由这个Oracle数据库实例来访问和控制磁盘中的数据文件。Oracle有一个很大的内存快，称为全局区（SGA）。\n\n\n数据库的创建与监听器的配置54C\n创建数据库:Database Conguration Assistant,可以创建、配置、删除、管理数据库\n全局数据库名称为数据库名称，其至少要有一个Oracle实例引用，该实例由SID唯一标识,如：orcl\n配置Enterprise Manager会占用较大内存，先不配置;注意选择字符集;修改scott和hr的密码\nsys用户为数据库的所有者，system用户为数据库的操作员\n监听器的配置：Net Conguration Assistant，配置完成后在系统服务中查看添加了OracleOraDb11g_home1TNSListener,此服务启动之后就允许外部连接数据库了\nOracleServiceORCL是关于数据库实例的服务，此服务启动之后，数据库才可用\n\noracle常用数据库工具\nOracle Universal Installer：OUI（Oracle全局安装器），用来安装卸载oracle数据库管理系统\nDatabase Conguration Assistant：(DBCA)创建、配置、删除、管理数据库\nNet Conguration Assistant：(NCA)监听器、命名方法、本地网络服务名、目录使用配置\nSQL Plus：基于命令行的oracle官方操作工具\nSQL Devloper：基于Java的图形化的oracle官方操作工具,需人工关联sqldeveloper.exe文件和配置JDK\nPL/SQL Devloper：第三方工具\nTOAD：第三方工具\n\nOracle中的用户、权限与角色\n用户管理：需切换到system用户操作\n    创建用户：create user 用户名 identified by 密码 [account lock|unlock] [password expire];（password expire表示密码立即过期，第一次登录后需修改密码）用户创建后还需授权才能操作数据库\n    修改用户：alter user 用户名 identified by 密码 [account lock|unlock] [password expire];\n    删除用户：drop user 用户名 [cascade];(cascade用来表示删除用户下的所有数据对象)\n权限管理：权限为系统中设置的安全规则或安全策略，分为系统权限（用户能否在数据库上完成某个动作）和对象权限（用户能否在某个数据库对象上完成某种操作）\n    系统权限授予：grant 权限 to user|role [with admin option];(表示可以级联授予)\n    系统权限回收：revoke 权限 from user|role;\n    对象权限授予：grant 权限[(col,...)] on 数据库对象 to user|role [with admin option];\n    对象权限回收：revoke 权限[(col,...)] on 数据库对象 from user|role;\n    对象权限的回收是级联的，系统权限回收是非级联的\n角色管理：角色是权限的集合，用来简化权限管理\n    创建／删除角色：create/drop role 角色;\n    角色上系统权限授予：grant 权限 to role [with admin option];(表示可以级联授予)\n    角色上系统权限回收：revoke 权限 from 角色;\n    角色上对象权限授予：grant 权限[(col,...)] on 数据库对象 to role [with admin option]; \n    角色上对象权限回收：revoke 权限[(col,...)] on 数据库对象 from role;\n    用户角色授予：grant 角色 to 用户;\n    用户角色回收：revoke 角色 from 用户;\n    \nOracle表：由行和列组成的数据库中基本的存储单元，访问其他用户的表需要加用户名作为前缀\n约束：表级别约束和列级别约束，由主键、外键、非空、唯一、检查5种约束\n启用表的只读状态便于备份和导出表：alter table 表名 read only;启用表的读写状态：alter table 表名 read write;\n\nOracle事务:有一组DML组成的逻辑工作单元，有原子性、一致性、独立性和持久性\n\n序列sequence：数值生成器，通常用于生成主键值，\n\ndual是Oracle提供的最小的工作表，只有一行一列，具有某些特殊功用，只有一条记录:'X',习惯上,我们称之为'伪表',他的存在是为了操作上的方便,因为select都是要有特定对象的.\nselect count(*) from dual;\n\n索引和同义词的使用\n索引：通过关联ROWID和关键值来提升查询速度\n同义词：数据库对象的别名，public同义词对所有用户有用，创建需一定权限\n    创建：create [public] synonym 名称 for object;\n    删除：drop [public] synonym 名称 for object;\n\nPL/SQL：是一种程序语言，叫做过程化SQL语言（Procedural Language/SQL）。PL/SQL是Oracle数据库对SQL语句的扩展。在普通SQL语句的使用上增加了编程语言的特点\n官网：https://www.oracle.com/technetwork/database/features/plsql/index.html\nPL/SQL developer官网：https://www.allroundautomations.com/\nPLSQL Developer 12 注册码\nproduct code： 4vkjwhfeh3ufnqnmpr9brvcuyujrx3n3le \nserial Number：226959 \npassword: xs374ca\n\n配置pl/sql的Database的两种方式：\n确保OracleOraDb11g_home1TNSListener和OracleServiceXXXX服务已启动\n1.登录时直接在Database选项输入数据库信息:在登录时输入数据库信息 ip:端口/数据库名,如：127.0.0.1:1521/ORCL\n2.配置product\\11.2.0\\dbhome_1\\NETWORK\\ADMIN\\tnsnames.ora文件，添加一下内容到文档最后，登录时输入如ORCL即可登录\nORCL =\n  (DESCRIPTION =\n    (ADDRESS_LIST =\n        (ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521))\n    )\n    (CONNECT_DATA =\n            (SERVER = DEDICATED)\n        (SERVICE_NAME = ORCL)\n    )\n  )\n  \nhttps://www.jikexueyuan.com/course/oracledb/\n\nhttps://www.oracle.com/technetwork/topics/winsoft-085727.html\n\nhttps://www.cnblogs.com/xiashiwendao/p/7634240.html\n\n严格来讲SQL会分为三种类型:\n\n1、数据操纵语言（DML）：用来操纵数据库中数据的命令。包括：select、insert、update、delete。\n\n2、数据定义语言（DDL）：用来建立数据库、数据库对象和定义列的命令。包括：create、alter、drop。\n\n3、数据控制语言（DCL）：用来控制数据库组件\n\n用select * from tab;来查询用户下的表\n查看表结构用:DESC 表名称 \n \n \nhttps://www.cnblogs.com/adforce/p/3312252.html\n全局数据库名：就是一个数据库的标识，在安装时就要想好，以后一般不修改，修改起来也麻烦，因为数据库一旦安装，数据库名就写进了控制文件，数据库表，很多地方都会用到这个数据库名。\n启动数据库：也叫全局数据库，是数据库系统的入口，它会内置一些高级权限的用户如SYS，SYSTEM等。我们用这些高级权限账号登陆就可以在数据库实例中创建表空间，用户，表了。\n\n查询当前数据库名：select name from v$database;\n\n我们访问Oracle都是访问一个实例，但这个实例如果关联了数据库文件，就是可以访问的，如果没有，就会得到实例不可用的错误。\n实例名指的是用于响应某个数据库操作的数据库管理系统的名称。她同时也叫SID。实例名是由参数instance_name决定的\n查询当前数据库实例名：select instance_name from v$instance;\n\n\n从oracle9i版本开始，引入了一个新的参数，即数据库服务名。数据库的逻辑表示，它是数据库呈现给客户机的方式。参数名是SERVICE_NAME。如果数据库有域名，则数据库服务名就是全局数据库名；否则，数据库服务名与数据库名相同。\n\n网络服务名(NET SERVICES NAME)\n         它是“连接描述符”简称，连接描述符是网络连接目标特殊格式的描述，它包括网络协议、主机名称或地址、和目标服务\n         在Oracle7和Oracle8版本,目标服务由Oracle系统标识符(SID)来标识，而Oracle8i、Oracle9i则通过数据库服务名来来标识。保存tnsnames.ora文件中在格式如下：\n myDB =\n   (DESCRIPTION =\n     (ADDRESS_LIST =\n       (ADDRESS = (PROTOCOL = TCP)(HOST = 10.10.10.1)(PORT = 1521))\n     )\n     (CONNECT_DATA =\n       (SERVICE_NAME = testDB.ChinaMobile.com)\n     )\n   )  \n\n若要向ORACLE代理商购买ORACLE，是以用户数来算钱的。那么，这个“用户”跟我们在ORACLE中通过\n\nCREATE USER USERNAME IDENTIFIED BY PASSWORD创建的用户是不同概念，“用户数”指的是并发访问用户数，\n\n（我理解是同时间访问同一个内存地址的进程数）。要是我买了8个用户的，可以建几十、上百个用户也没问题，只要峰值达不到并发数就可以了。\n\n打个比方，你的名字叫小明，但是你有很多外号。你父母叫你小明，但是朋友都叫你的外号。\n这里你的父母就是oracle实例，小明就是sid，service name就是你的外号。\nsid用于实例区分各个数据库，service name用于外部链接。\n\n一个Oracle Server由一个Oracle实例和一个Oracle数据库组成。\n即：Oracle Server = Oracle Instance + Oracle Database\n\nOracle实例包括了内存结构(SGA)和一系列后台进程(Background Process),两者合起来称为一个Oracle实例，即：Oracle Instance = SGA + Background Process\n\n\n数据库逻辑组织结构\n表空间、段、区、块\n一个数据库由一个或多个表空间组成，一个表空间只能属于一个数据库\n一个表空间由一个或多个多个数据文件组成，一个数据文件只能属于一个表空间\n一个数据文件由一个或多个操作系统块组成，每一个操作系统块只能数以一个数据文件\n一个表空间可以包含一个或多个段，一个段只能属于一个表空间\n一个段由一个或多个区组成，每一个区只能属于一个段\n一个区由一个或多个Oracle 块组成，每一个Oracle块只能属于一个区\n一个区只能属于一个数据文件，数据文件的空间可以分配到一个或多个区\n一个Oracle 块由一个或多个操作系统块组成，一个操作系统块是一个Oracle块的一部分\n\n\nhttps://blog.csdn.net/prince_lintb/article/details/78772999\n\npl/sql plus： \"／\"表示执行\n\n\nscott库：https://www.2cto.com/database/201805/742911.html\n\nhttps://www.cnblogs.com/adforce/p/3312252.html\nhttp://www.cnblogs.com/kscnchina/p/4570865.html\n\n声明时，变量以v_开头，常量以c_开头\n\nhttps://blog.csdn.net/michaelehome/article/details/79464214\n\nselect userenv('language') from dual;\nNLS_LANG=\"AMERICAN_AMERICA.AL32UTF8\"\n\n字符集：https://www.cnblogs.com/kaishirenshi/p/9018343.html\n\n本地动态sql\n\n\nSQL环境  begin .. end pl/sql环境\n\n一组SQL语句操作要成为事务，数据库管理系统必须保证这组操作的原子性（Atomicity）、一致性（consistency）、隔离性（Isolation）和持久性（Durability），这就是ACID特性。","slug":"oracle","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrvv003pck8h37qbcaix","content":"<p>官网：<a href=\"https://www.oracle.com/index.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/index.html</a><br>\n版本中字母的含义：c（cloud）、g（grid）、i（internet）</p>\n<p>下载：<a href=\"https://www.oracle.com/downloads/%EF%BC%8C%E9%9C%80%E8%A6%81%E7%99%BB%E5%BD%95oracle%E5%AE%98%E7%BD%91%EF%BC%8C%E4%B8%8B%E8%BD%BD%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8E%8B%E5%9C%A8%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/downloads/，需要登录oracle官网，下载的两个文件解压在一个文件夹中</a></p>\n<p>安装：</p>\n<ol>\n<li>安装Oracle11g出现INS-13001环境不满足最低要求 <a href=\"https://blog.csdn.net/q_sea__/article/details/79012808\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/q_sea__/article/details/79012808</a></li>\n<li>Environment variable: “PATH”<br>\n安装时确保不要关机或断电；安装过程中复制文件过程比较耗费时间</li>\n</ol>\n<p>完整的Oracle数据库通常由两部分组成：Oracle数据库和数据库实例。</p>\n<ol>\n<li>数据库是一系列物理文件的集合（数据文件，控制文件，联机日志，参数文件等）；</li>\n<li>Oracle数据库实例则是一组Oracle后台进程/线程以及在服务器分配的共享内存区。</li>\n</ol>\n<p>在启动Oracle数据库服务器时，实际上是在服务器的内存中创建一个Oracle实例（即在服务器内存中分配共享内存并创建相关的后台内存），然后由这个Oracle数据库实例来访问和控制磁盘中的数据文件。Oracle有一个很大的内存快，称为全局区（SGA）。</p>\n<p>数据库的创建与监听器的配置54C<br>\n创建数据库:Database Conguration Assistant,可以创建、配置、删除、管理数据库<br>\n全局数据库名称为数据库名称，其至少要有一个Oracle实例引用，该实例由SID唯一标识,如：orcl<br>\n配置Enterprise Manager会占用较大内存，先不配置;注意选择字符集;修改scott和hr的密码<br>\nsys用户为数据库的所有者，system用户为数据库的操作员<br>\n监听器的配置：Net Conguration Assistant，配置完成后在系统服务中查看添加了OracleOraDb11g_home1TNSListener,此服务启动之后就允许外部连接数据库了<br>\nOracleServiceORCL是关于数据库实例的服务，此服务启动之后，数据库才可用</p>\n<p>oracle常用数据库工具<br>\nOracle Universal Installer：OUI（Oracle全局安装器），用来安装卸载oracle数据库管理系统<br>\nDatabase Conguration Assistant：(DBCA)创建、配置、删除、管理数据库<br>\nNet Conguration Assistant：(NCA)监听器、命名方法、本地网络服务名、目录使用配置<br>\nSQL Plus：基于命令行的oracle官方操作工具<br>\nSQL Devloper：基于Java的图形化的oracle官方操作工具,需人工关联sqldeveloper.exe文件和配置JDK<br>\nPL/SQL Devloper：第三方工具<br>\nTOAD：第三方工具</p>\n<p>Oracle中的用户、权限与角色<br>\n用户管理：需切换到system用户操作<br>\n创建用户：create user 用户名 identified by 密码 [account lock|unlock] [password expire];（password expire表示密码立即过期，第一次登录后需修改密码）用户创建后还需授权才能操作数据库<br>\n修改用户：alter user 用户名 identified by 密码 [account lock|unlock] [password expire];<br>\n删除用户：drop user 用户名 [cascade];(cascade用来表示删除用户下的所有数据对象)<br>\n权限管理：权限为系统中设置的安全规则或安全策略，分为系统权限（用户能否在数据库上完成某个动作）和对象权限（用户能否在某个数据库对象上完成某种操作）<br>\n系统权限授予：grant 权限 to user|role [with admin option];(表示可以级联授予)<br>\n系统权限回收：revoke 权限 from user|role;<br>\n对象权限授予：grant 权限[(col,…)] on 数据库对象 to user|role [with admin option];<br>\n对象权限回收：revoke 权限[(col,…)] on 数据库对象 from user|role;<br>\n对象权限的回收是级联的，系统权限回收是非级联的<br>\n角色管理：角色是权限的集合，用来简化权限管理<br>\n创建／删除角色：create/drop role 角色;<br>\n角色上系统权限授予：grant 权限 to role [with admin option];(表示可以级联授予)<br>\n角色上系统权限回收：revoke 权限 from 角色;<br>\n角色上对象权限授予：grant 权限[(col,…)] on 数据库对象 to role [with admin option];<br>\n角色上对象权限回收：revoke 权限[(col,…)] on 数据库对象 from role;<br>\n用户角色授予：grant 角色 to 用户;<br>\n用户角色回收：revoke 角色 from 用户;</p>\n<p>Oracle表：由行和列组成的数据库中基本的存储单元，访问其他用户的表需要加用户名作为前缀<br>\n约束：表级别约束和列级别约束，由主键、外键、非空、唯一、检查5种约束<br>\n启用表的只读状态便于备份和导出表：alter table 表名 read only;启用表的读写状态：alter table 表名 read write;</p>\n<p>Oracle事务:有一组DML组成的逻辑工作单元，有原子性、一致性、独立性和持久性</p>\n<p>序列sequence：数值生成器，通常用于生成主键值，</p>\n<p>dual是Oracle提供的最小的工作表，只有一行一列，具有某些特殊功用，只有一条记录:‘X’,习惯上,我们称之为’伪表’,他的存在是为了操作上的方便,因为select都是要有特定对象的.<br>\nselect count(*) from dual;</p>\n<p>索引和同义词的使用<br>\n索引：通过关联ROWID和关键值来提升查询速度<br>\n同义词：数据库对象的别名，public同义词对所有用户有用，创建需一定权限<br>\n创建：create [public] synonym 名称 for object;<br>\n删除：drop [public] synonym 名称 for object;</p>\n<p>PL/SQL：是一种程序语言，叫做过程化SQL语言（Procedural Language/SQL）。PL/SQL是Oracle数据库对SQL语句的扩展。在普通SQL语句的使用上增加了编程语言的特点<br>\n官网：<a href=\"https://www.oracle.com/technetwork/database/features/plsql/index.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/database/features/plsql/index.html</a><br>\nPL/SQL developer官网：<a href=\"https://www.allroundautomations.com/\" target=\"_blank\" rel=\"noopener\">https://www.allroundautomations.com/</a><br>\nPLSQL Developer 12 注册码<br>\nproduct code： 4vkjwhfeh3ufnqnmpr9brvcuyujrx3n3le<br>\nserial Number：226959<br>\npassword: xs374ca</p>\n<p>配置pl/sql的Database的两种方式：<br>\n确保OracleOraDb11g_home1TNSListener和OracleServiceXXXX服务已启动<br>\n1.登录时直接在Database选项输入数据库信息:在登录时输入数据库信息 ip:端口/数据库名,如：127.0.0.1:1521/ORCL<br>\n2.配置product\\11.2.0\\dbhome_1\\NETWORK\\ADMIN\\tnsnames.ora文件，添加一下内容到文档最后，登录时输入如ORCL即可登录<br>\nORCL =<br>\n(DESCRIPTION =<br>\n(ADDRESS_LIST =<br>\n(ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521))<br>\n)<br>\n(CONNECT_DATA =<br>\n(SERVER = DEDICATED)<br>\n(SERVICE_NAME = ORCL)<br>\n)<br>\n)</p>\n<p><a href=\"https://www.jikexueyuan.com/course/oracledb/\" target=\"_blank\" rel=\"noopener\">https://www.jikexueyuan.com/course/oracledb/</a></p>\n<p><a href=\"https://www.oracle.com/technetwork/topics/winsoft-085727.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/topics/winsoft-085727.html</a></p>\n<p><a href=\"https://www.cnblogs.com/xiashiwendao/p/7634240.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xiashiwendao/p/7634240.html</a></p>\n<p>严格来讲SQL会分为三种类型:</p>\n<p>1、数据操纵语言（DML）：用来操纵数据库中数据的命令。包括：select、insert、update、delete。</p>\n<p>2、数据定义语言（DDL）：用来建立数据库、数据库对象和定义列的命令。包括：create、alter、drop。</p>\n<p>3、数据控制语言（DCL）：用来控制数据库组件</p>\n<p>用select * from tab;来查询用户下的表<br>\n查看表结构用:DESC 表名称</p>\n<p><a href=\"https://www.cnblogs.com/adforce/p/3312252.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/adforce/p/3312252.html</a><br>\n全局数据库名：就是一个数据库的标识，在安装时就要想好，以后一般不修改，修改起来也麻烦，因为数据库一旦安装，数据库名就写进了控制文件，数据库表，很多地方都会用到这个数据库名。<br>\n启动数据库：也叫全局数据库，是数据库系统的入口，它会内置一些高级权限的用户如SYS，SYSTEM等。我们用这些高级权限账号登陆就可以在数据库实例中创建表空间，用户，表了。</p>\n<p>查询当前数据库名：select name from v$database;</p>\n<p>我们访问Oracle都是访问一个实例，但这个实例如果关联了数据库文件，就是可以访问的，如果没有，就会得到实例不可用的错误。<br>\n实例名指的是用于响应某个数据库操作的数据库管理系统的名称。她同时也叫SID。实例名是由参数instance_name决定的<br>\n查询当前数据库实例名：select instance_name from v$instance;</p>\n<p>从oracle9i版本开始，引入了一个新的参数，即数据库服务名。数据库的逻辑表示，它是数据库呈现给客户机的方式。参数名是SERVICE_NAME。如果数据库有域名，则数据库服务名就是全局数据库名；否则，数据库服务名与数据库名相同。</p>\n<p>网络服务名(NET SERVICES NAME)<br>\n         它是“连接描述符”简称，连接描述符是网络连接目标特殊格式的描述，它包括网络协议、主机名称或地址、和目标服务<br>\n         在Oracle7和Oracle8版本,目标服务由Oracle系统标识符(SID)来标识，而Oracle8i、Oracle9i则通过数据库服务名来来标识。保存tnsnames.ora文件中在格式如下：<br>\n myDB =<br>\n   (DESCRIPTION =<br>\n     (ADDRESS_LIST =<br>\n       (ADDRESS = (PROTOCOL = TCP)(HOST = 10.10.10.1)(PORT = 1521))<br>\n     )<br>\n     (CONNECT_DATA =<br>\n       (SERVICE_NAME = <a href=\"http://testDB.ChinaMobile.com\" target=\"_blank\" rel=\"noopener\">testDB.ChinaMobile.com</a>)<br>\n     )<br>\n   )</p>\n<p>若要向ORACLE代理商购买ORACLE，是以用户数来算钱的。那么，这个“用户”跟我们在ORACLE中通过</p>\n<p>CREATE USER USERNAME IDENTIFIED BY PASSWORD创建的用户是不同概念，“用户数”指的是并发访问用户数，</p>\n<p>（我理解是同时间访问同一个内存地址的进程数）。要是我买了8个用户的，可以建几十、上百个用户也没问题，只要峰值达不到并发数就可以了。</p>\n<p>打个比方，你的名字叫小明，但是你有很多外号。你父母叫你小明，但是朋友都叫你的外号。<br>\n这里你的父母就是oracle实例，小明就是sid，service name就是你的外号。<br>\nsid用于实例区分各个数据库，service name用于外部链接。</p>\n<p>一个Oracle Server由一个Oracle实例和一个Oracle数据库组成。<br>\n即：Oracle Server = Oracle Instance + Oracle Database</p>\n<p>Oracle实例包括了内存结构(SGA)和一系列后台进程(Background Process),两者合起来称为一个Oracle实例，即：Oracle Instance = SGA + Background Process</p>\n<p>数据库逻辑组织结构<br>\n表空间、段、区、块<br>\n一个数据库由一个或多个表空间组成，一个表空间只能属于一个数据库<br>\n一个表空间由一个或多个多个数据文件组成，一个数据文件只能属于一个表空间<br>\n一个数据文件由一个或多个操作系统块组成，每一个操作系统块只能数以一个数据文件<br>\n一个表空间可以包含一个或多个段，一个段只能属于一个表空间<br>\n一个段由一个或多个区组成，每一个区只能属于一个段<br>\n一个区由一个或多个Oracle 块组成，每一个Oracle块只能属于一个区<br>\n一个区只能属于一个数据文件，数据文件的空间可以分配到一个或多个区<br>\n一个Oracle 块由一个或多个操作系统块组成，一个操作系统块是一个Oracle块的一部分</p>\n<p><a href=\"https://blog.csdn.net/prince_lintb/article/details/78772999\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/prince_lintb/article/details/78772999</a></p>\n<p>pl/sql plus： &quot;／&quot;表示执行</p>\n<p>scott库：<a href=\"https://www.2cto.com/database/201805/742911.html\" target=\"_blank\" rel=\"noopener\">https://www.2cto.com/database/201805/742911.html</a></p>\n<p><a href=\"https://www.cnblogs.com/adforce/p/3312252.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/adforce/p/3312252.html</a><br>\n<a href=\"http://www.cnblogs.com/kscnchina/p/4570865.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/kscnchina/p/4570865.html</a></p>\n<p>声明时，变量以v_开头，常量以c_开头</p>\n<p><a href=\"https://blog.csdn.net/michaelehome/article/details/79464214\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/michaelehome/article/details/79464214</a></p>\n<p>select userenv(‘language’) from dual;<br>\nNLS_LANG=“AMERICAN_AMERICA.AL32UTF8”</p>\n<p>字符集：<a href=\"https://www.cnblogs.com/kaishirenshi/p/9018343.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/kaishirenshi/p/9018343.html</a></p>\n<p>本地动态sql</p>\n<p>SQL环境  begin … end pl/sql环境</p>\n<p>一组SQL语句操作要成为事务，数据库管理系统必须保证这组操作的原子性（Atomicity）、一致性（consistency）、隔离性（Isolation）和持久性（Durability），这就是ACID特性。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>官网：<a href=\"https://www.oracle.com/index.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/index.html</a><br>\n版本中字母的含义：c（cloud）、g（grid）、i（internet）</p>\n<p>下载：<a href=\"https://www.oracle.com/downloads/%EF%BC%8C%E9%9C%80%E8%A6%81%E7%99%BB%E5%BD%95oracle%E5%AE%98%E7%BD%91%EF%BC%8C%E4%B8%8B%E8%BD%BD%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8E%8B%E5%9C%A8%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/downloads/，需要登录oracle官网，下载的两个文件解压在一个文件夹中</a></p>\n<p>安装：</p>\n<ol>\n<li>安装Oracle11g出现INS-13001环境不满足最低要求 <a href=\"https://blog.csdn.net/q_sea__/article/details/79012808\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/q_sea__/article/details/79012808</a></li>\n<li>Environment variable: “PATH”<br>\n安装时确保不要关机或断电；安装过程中复制文件过程比较耗费时间</li>\n</ol>\n<p>完整的Oracle数据库通常由两部分组成：Oracle数据库和数据库实例。</p>\n<ol>\n<li>数据库是一系列物理文件的集合（数据文件，控制文件，联机日志，参数文件等）；</li>\n<li>Oracle数据库实例则是一组Oracle后台进程/线程以及在服务器分配的共享内存区。</li>\n</ol>\n<p>在启动Oracle数据库服务器时，实际上是在服务器的内存中创建一个Oracle实例（即在服务器内存中分配共享内存并创建相关的后台内存），然后由这个Oracle数据库实例来访问和控制磁盘中的数据文件。Oracle有一个很大的内存快，称为全局区（SGA）。</p>\n<p>数据库的创建与监听器的配置54C<br>\n创建数据库:Database Conguration Assistant,可以创建、配置、删除、管理数据库<br>\n全局数据库名称为数据库名称，其至少要有一个Oracle实例引用，该实例由SID唯一标识,如：orcl<br>\n配置Enterprise Manager会占用较大内存，先不配置;注意选择字符集;修改scott和hr的密码<br>\nsys用户为数据库的所有者，system用户为数据库的操作员<br>\n监听器的配置：Net Conguration Assistant，配置完成后在系统服务中查看添加了OracleOraDb11g_home1TNSListener,此服务启动之后就允许外部连接数据库了<br>\nOracleServiceORCL是关于数据库实例的服务，此服务启动之后，数据库才可用</p>\n<p>oracle常用数据库工具<br>\nOracle Universal Installer：OUI（Oracle全局安装器），用来安装卸载oracle数据库管理系统<br>\nDatabase Conguration Assistant：(DBCA)创建、配置、删除、管理数据库<br>\nNet Conguration Assistant：(NCA)监听器、命名方法、本地网络服务名、目录使用配置<br>\nSQL Plus：基于命令行的oracle官方操作工具<br>\nSQL Devloper：基于Java的图形化的oracle官方操作工具,需人工关联sqldeveloper.exe文件和配置JDK<br>\nPL/SQL Devloper：第三方工具<br>\nTOAD：第三方工具</p>\n<p>Oracle中的用户、权限与角色<br>\n用户管理：需切换到system用户操作<br>\n创建用户：create user 用户名 identified by 密码 [account lock|unlock] [password expire];（password expire表示密码立即过期，第一次登录后需修改密码）用户创建后还需授权才能操作数据库<br>\n修改用户：alter user 用户名 identified by 密码 [account lock|unlock] [password expire];<br>\n删除用户：drop user 用户名 [cascade];(cascade用来表示删除用户下的所有数据对象)<br>\n权限管理：权限为系统中设置的安全规则或安全策略，分为系统权限（用户能否在数据库上完成某个动作）和对象权限（用户能否在某个数据库对象上完成某种操作）<br>\n系统权限授予：grant 权限 to user|role [with admin option];(表示可以级联授予)<br>\n系统权限回收：revoke 权限 from user|role;<br>\n对象权限授予：grant 权限[(col,…)] on 数据库对象 to user|role [with admin option];<br>\n对象权限回收：revoke 权限[(col,…)] on 数据库对象 from user|role;<br>\n对象权限的回收是级联的，系统权限回收是非级联的<br>\n角色管理：角色是权限的集合，用来简化权限管理<br>\n创建／删除角色：create/drop role 角色;<br>\n角色上系统权限授予：grant 权限 to role [with admin option];(表示可以级联授予)<br>\n角色上系统权限回收：revoke 权限 from 角色;<br>\n角色上对象权限授予：grant 权限[(col,…)] on 数据库对象 to role [with admin option];<br>\n角色上对象权限回收：revoke 权限[(col,…)] on 数据库对象 from role;<br>\n用户角色授予：grant 角色 to 用户;<br>\n用户角色回收：revoke 角色 from 用户;</p>\n<p>Oracle表：由行和列组成的数据库中基本的存储单元，访问其他用户的表需要加用户名作为前缀<br>\n约束：表级别约束和列级别约束，由主键、外键、非空、唯一、检查5种约束<br>\n启用表的只读状态便于备份和导出表：alter table 表名 read only;启用表的读写状态：alter table 表名 read write;</p>\n<p>Oracle事务:有一组DML组成的逻辑工作单元，有原子性、一致性、独立性和持久性</p>\n<p>序列sequence：数值生成器，通常用于生成主键值，</p>\n<p>dual是Oracle提供的最小的工作表，只有一行一列，具有某些特殊功用，只有一条记录:‘X’,习惯上,我们称之为’伪表’,他的存在是为了操作上的方便,因为select都是要有特定对象的.<br>\nselect count(*) from dual;</p>\n<p>索引和同义词的使用<br>\n索引：通过关联ROWID和关键值来提升查询速度<br>\n同义词：数据库对象的别名，public同义词对所有用户有用，创建需一定权限<br>\n创建：create [public] synonym 名称 for object;<br>\n删除：drop [public] synonym 名称 for object;</p>\n<p>PL/SQL：是一种程序语言，叫做过程化SQL语言（Procedural Language/SQL）。PL/SQL是Oracle数据库对SQL语句的扩展。在普通SQL语句的使用上增加了编程语言的特点<br>\n官网：<a href=\"https://www.oracle.com/technetwork/database/features/plsql/index.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/database/features/plsql/index.html</a><br>\nPL/SQL developer官网：<a href=\"https://www.allroundautomations.com/\" target=\"_blank\" rel=\"noopener\">https://www.allroundautomations.com/</a><br>\nPLSQL Developer 12 注册码<br>\nproduct code： 4vkjwhfeh3ufnqnmpr9brvcuyujrx3n3le<br>\nserial Number：226959<br>\npassword: xs374ca</p>\n<p>配置pl/sql的Database的两种方式：<br>\n确保OracleOraDb11g_home1TNSListener和OracleServiceXXXX服务已启动<br>\n1.登录时直接在Database选项输入数据库信息:在登录时输入数据库信息 ip:端口/数据库名,如：127.0.0.1:1521/ORCL<br>\n2.配置product\\11.2.0\\dbhome_1\\NETWORK\\ADMIN\\tnsnames.ora文件，添加一下内容到文档最后，登录时输入如ORCL即可登录<br>\nORCL =<br>\n(DESCRIPTION =<br>\n(ADDRESS_LIST =<br>\n(ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521))<br>\n)<br>\n(CONNECT_DATA =<br>\n(SERVER = DEDICATED)<br>\n(SERVICE_NAME = ORCL)<br>\n)<br>\n)</p>\n<p><a href=\"https://www.jikexueyuan.com/course/oracledb/\" target=\"_blank\" rel=\"noopener\">https://www.jikexueyuan.com/course/oracledb/</a></p>\n<p><a href=\"https://www.oracle.com/technetwork/topics/winsoft-085727.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/topics/winsoft-085727.html</a></p>\n<p><a href=\"https://www.cnblogs.com/xiashiwendao/p/7634240.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xiashiwendao/p/7634240.html</a></p>\n<p>严格来讲SQL会分为三种类型:</p>\n<p>1、数据操纵语言（DML）：用来操纵数据库中数据的命令。包括：select、insert、update、delete。</p>\n<p>2、数据定义语言（DDL）：用来建立数据库、数据库对象和定义列的命令。包括：create、alter、drop。</p>\n<p>3、数据控制语言（DCL）：用来控制数据库组件</p>\n<p>用select * from tab;来查询用户下的表<br>\n查看表结构用:DESC 表名称</p>\n<p><a href=\"https://www.cnblogs.com/adforce/p/3312252.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/adforce/p/3312252.html</a><br>\n全局数据库名：就是一个数据库的标识，在安装时就要想好，以后一般不修改，修改起来也麻烦，因为数据库一旦安装，数据库名就写进了控制文件，数据库表，很多地方都会用到这个数据库名。<br>\n启动数据库：也叫全局数据库，是数据库系统的入口，它会内置一些高级权限的用户如SYS，SYSTEM等。我们用这些高级权限账号登陆就可以在数据库实例中创建表空间，用户，表了。</p>\n<p>查询当前数据库名：select name from v$database;</p>\n<p>我们访问Oracle都是访问一个实例，但这个实例如果关联了数据库文件，就是可以访问的，如果没有，就会得到实例不可用的错误。<br>\n实例名指的是用于响应某个数据库操作的数据库管理系统的名称。她同时也叫SID。实例名是由参数instance_name决定的<br>\n查询当前数据库实例名：select instance_name from v$instance;</p>\n<p>从oracle9i版本开始，引入了一个新的参数，即数据库服务名。数据库的逻辑表示，它是数据库呈现给客户机的方式。参数名是SERVICE_NAME。如果数据库有域名，则数据库服务名就是全局数据库名；否则，数据库服务名与数据库名相同。</p>\n<p>网络服务名(NET SERVICES NAME)<br>\n         它是“连接描述符”简称，连接描述符是网络连接目标特殊格式的描述，它包括网络协议、主机名称或地址、和目标服务<br>\n         在Oracle7和Oracle8版本,目标服务由Oracle系统标识符(SID)来标识，而Oracle8i、Oracle9i则通过数据库服务名来来标识。保存tnsnames.ora文件中在格式如下：<br>\n myDB =<br>\n   (DESCRIPTION =<br>\n     (ADDRESS_LIST =<br>\n       (ADDRESS = (PROTOCOL = TCP)(HOST = 10.10.10.1)(PORT = 1521))<br>\n     )<br>\n     (CONNECT_DATA =<br>\n       (SERVICE_NAME = <a href=\"http://testDB.ChinaMobile.com\" target=\"_blank\" rel=\"noopener\">testDB.ChinaMobile.com</a>)<br>\n     )<br>\n   )</p>\n<p>若要向ORACLE代理商购买ORACLE，是以用户数来算钱的。那么，这个“用户”跟我们在ORACLE中通过</p>\n<p>CREATE USER USERNAME IDENTIFIED BY PASSWORD创建的用户是不同概念，“用户数”指的是并发访问用户数，</p>\n<p>（我理解是同时间访问同一个内存地址的进程数）。要是我买了8个用户的，可以建几十、上百个用户也没问题，只要峰值达不到并发数就可以了。</p>\n<p>打个比方，你的名字叫小明，但是你有很多外号。你父母叫你小明，但是朋友都叫你的外号。<br>\n这里你的父母就是oracle实例，小明就是sid，service name就是你的外号。<br>\nsid用于实例区分各个数据库，service name用于外部链接。</p>\n<p>一个Oracle Server由一个Oracle实例和一个Oracle数据库组成。<br>\n即：Oracle Server = Oracle Instance + Oracle Database</p>\n<p>Oracle实例包括了内存结构(SGA)和一系列后台进程(Background Process),两者合起来称为一个Oracle实例，即：Oracle Instance = SGA + Background Process</p>\n<p>数据库逻辑组织结构<br>\n表空间、段、区、块<br>\n一个数据库由一个或多个表空间组成，一个表空间只能属于一个数据库<br>\n一个表空间由一个或多个多个数据文件组成，一个数据文件只能属于一个表空间<br>\n一个数据文件由一个或多个操作系统块组成，每一个操作系统块只能数以一个数据文件<br>\n一个表空间可以包含一个或多个段，一个段只能属于一个表空间<br>\n一个段由一个或多个区组成，每一个区只能属于一个段<br>\n一个区由一个或多个Oracle 块组成，每一个Oracle块只能属于一个区<br>\n一个区只能属于一个数据文件，数据文件的空间可以分配到一个或多个区<br>\n一个Oracle 块由一个或多个操作系统块组成，一个操作系统块是一个Oracle块的一部分</p>\n<p><a href=\"https://blog.csdn.net/prince_lintb/article/details/78772999\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/prince_lintb/article/details/78772999</a></p>\n<p>pl/sql plus： &quot;／&quot;表示执行</p>\n<p>scott库：<a href=\"https://www.2cto.com/database/201805/742911.html\" target=\"_blank\" rel=\"noopener\">https://www.2cto.com/database/201805/742911.html</a></p>\n<p><a href=\"https://www.cnblogs.com/adforce/p/3312252.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/adforce/p/3312252.html</a><br>\n<a href=\"http://www.cnblogs.com/kscnchina/p/4570865.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/kscnchina/p/4570865.html</a></p>\n<p>声明时，变量以v_开头，常量以c_开头</p>\n<p><a href=\"https://blog.csdn.net/michaelehome/article/details/79464214\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/michaelehome/article/details/79464214</a></p>\n<p>select userenv(‘language’) from dual;<br>\nNLS_LANG=“AMERICAN_AMERICA.AL32UTF8”</p>\n<p>字符集：<a href=\"https://www.cnblogs.com/kaishirenshi/p/9018343.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/kaishirenshi/p/9018343.html</a></p>\n<p>本地动态sql</p>\n<p>SQL环境  begin … end pl/sql环境</p>\n<p>一组SQL语句操作要成为事务，数据库管理系统必须保证这组操作的原子性（Atomicity）、一致性（consistency）、隔离性（Isolation）和持久性（Durability），这就是ACID特性。</p>\n"},{"title":"MongoDB","copyright":true,"comments":1,"toc":true,"date":"2018-12-10T12:38:05.000Z","password":null,"_content":"https://www.jikexueyuan.com/course/mongoDB/\n\nNoSQL数据库：NoSQL(NoSQL = Not Only SQL )，意即\"不仅仅是SQL\"，指的是非关系型的数据库\n\nmongodb官网：https://www.mongodb.com/\nhttps://docs.mongodb.com/manual/\n\nMongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。\nMongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。\n\nhttp://www.runoob.com/mongodb/mongodb-tutorial.html\n\nNoSQL保证数据的最终一致性，数据由更新延迟\n\nCAP理论\n\n适用场景：数据缓存；json格式数据存储；高伸缩性场景；\nMongoDB更多适合大数据量、高并发、弱事务的互联网应用，其内置的水平扩展机制提供了从几百万到十亿级别的数据处理能力，可很好的满足Web2.0和移动互联网应用的s数据存储要求。\n\nMongoDB由C++编写，支持32位（2G限制）和64位应用，是一个基于分布式文件存储的开源数据库系统。\n\nMongoDB3.0特性：\n1. 加入WiredTiger存储引擎:\n  开源的存储引擎；为现代硬件设计：多核CPU，充分利用内存／芯片级缓存；RAM/SSD/HDD；为大数据设计：高性能，低延迟，高并发稳定性\n2. MMAPv1:内存映射存储引擎，为默认引擎 ，提供了Collection锁；无缝迁移MMAP\n3. 可插拔引擎API\n4. 基于Web的可视化管理工具：Ops Manager\n\nMongoDB数据模型\n文档：本质上是一种类JSON的BSON格式的数据，可以理解为在JSON基础上添加了一些新的数据类型，包括Date，正则表达式等。\nBSON官网：http://bsonspec.org/\nBSON是由一组组键值对组成，具有轻量性、可靠性和高效性3个特征。可遍历性是MongoDB将BSON作为数据存储的重要原因\n使用文档时需要注意以下事项：\nMongoDB中写操作的原子性限制在文档级别；\n单个文档占用的存储空间不能超过16MB；\nMongoDB会尽量保持文档被插入时键值对的顺序；\n关于文档命名需要注意的事项：\n_id是系统保留的关键字，他是默认的主键，该值在集合中必须唯一，且不可更改；\n键不能包含空字符或\\0，这个字符用于表示键的结尾；\n不能以$开头且不能包含点号.\n键是区分大小写的且不能重复\n\n集合：把一组相关的文档放到一起组成了集合，MongoDB的集合是模式自由的，一个集合里面的文档可以是各式各样的 \nMogoDB提供了一些特殊的集合：capped collection、system.indexes、system.namespaces等\n集合命名需注意：\n集合名不能是空字符串；\n集合名不能包含空字符串或\\0，该字符表示集合名的结尾\n集合名不能以\"system.\"开头，此前缀是系统本身保留的\n集合名不能包含$字符，但是可以包含点号.\n\n数据库：多个文档组成集合，多个集合组成数据库。一个MongoDB实例可承载多个数据库，每个数据库有独立的权限，在磁盘上，不同的数据库也可放置到不通目录\n数据库命名规则：\n不能是空字符串；不能以$开头；不能包含空字符串和点号.;数据库名称区分大小写；建议数据库名全部使用小写；数据库名最长64字节；不要与系统保留数据库名相同\n\n命名空间：把数据库名添加到集合名前面，中间用点号连接，得到集合的完全限定，就是命名空间\n因为点号可以出现在集合名字中，如：jike.blog.posts 和 jike.blog.authors，可以将posts和authors看作是blog集合的子集合，blog集合甚至可以不存在 \n使用子集合的方式，可以是我们更好的组织数据，使数据结构更加清晰明了\n\nMongoDB数据类型\n基本数据类型\nnull：表示空值或者不存在的字段\n布尔：true／false\n数据类型：32-int,64-int,64-double,注意：JavaScript只支持64位浮点数\n字符串类型：使用UTF-8对字符串进行编码\n二进制数据：可以保存由任意字节组成的字符串，如：图片、视频等\n正则表达式类型：主要用于查询，使用正则表达式作为限定条件\nDate类型：是一个64位整数，它代表距Unix epoch：1970-1-1的毫秒数，MongoDB在存储时间是现转换为UTC时间，北京时间=UTC+8小时，MongoDB Shell会根据本地时间 设置显示日期时间\nTimestap：32bit Unix epoch + 32bit自增序数，只供MongoDB数据库服务内部使用，用于记录操作的详细时间\nObjectId：由24个16精制字符组成，每个字节存储两位16精制数字，总共需12字节存储空间=4字节时间戳+3字节机器标识+2字节pid+3字节计数器，ObjectId(),getTimestamp(),valueOf()\n数组：使用方括号来表示的一组值，数组中可以包含不通数据类型的元素，针对数组，MongoDB提供了许多操作符，如：$pop,$push,$pull,$slice,$addToSet等；MongoDB可自动为数组元素建立MultiKey索引\n内嵌文档：文档可以作为键的值，这样的文档成为内嵌文档。内嵌文档可以使数据不用保存成扁平结果的键值对，从而使数据组织形式更加自然。\n\n内嵌文档模式VS引用文档模式\n子文档比较小或变化不频繁，则使用内嵌文档模式，否则使用引用文档模式\n\nMongoDB自动将_id字段设置为主键\n\nMongoDB Shell：是MongoDB自带的JavaScript Shell，随MongoDB一起发布 =JavaScript V8解释器+MongoDB客户端\n\nhelp查看帮助\n执行脚本\n    直接执行：mongo [--quiet] script.js\n    交互执行：load(\"script.js\")\n执行命令行程序：run(\"ls\")\n.mongorc.js文件，默认会加载\n编辑复合变量EDITOR：在.bashrc中添加后source生效\n~~~\n#EDITOR\nEDITOR=/usr/bin/vim\n~~~\n即可使用editor编辑文档\n\n\n\nhttp://www.runoob.com/mongodb/mongodb-intro.html\nMongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。\nGridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。\nMongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。\n\nMongoDB数据库安装：\n1. 下载安装文件解压缩并添加bin目录到环境变量\n2. 创建一个data目录，然后在data目录里创建db目录、logs目录\n3. 启动服务端 \n4. 启动客户端：mongo\n5. windows下可以将MongoDB做成系统服务\n\n\nmac\n临时添加环境变量：export PATH=/usr/local/mongodb/bin:$PATH\n编辑~/.bash_profile,添加：export PATH=$PATH:/usr/local/mongodb4/bin/:$PATH 即可永久添加环境变量\n\n连接MongoDB数据库：./mongo + 服务器IP:端口号/数据库名\n关闭MongoDB服务在 ./mongo 进入控制台后，输入 use admin,然后输入 db.shutdownServer()\n\nMongodb可以通过命令行方式和配置文件的方式来启动：\n这两种方式都是在前台启动Mongodb进程，如果Session窗口关闭，Mongodb进程也随之停止。\n不过Mongodb同时还提供了一种后台Daemon方式启动，只需要加上一个\"--fork\"参数即可，用到了\"--fork\"参数就必须启用\"--logpath\"参数\n通过命令行： ./bin/mongod --dbpath=/data/db --fork --logpath=/data/logs/mongodb.log\n配置文件方式：./bin/mongod -f mongodb.conf  或 ./bin/mongod --config mongodb.conf  //-f 后面写要使用的配置文件\n            ./bin/mongod --shutdown -f mongod.conf\n~~~\nport=27017\ndbpath=/usr/local/mongodb/data/\nlogpath=/usr/local/mongodb/log/mongodb.log  \nfork = true\n~~~\n\n命令行操作：\nuse mytetDB  //数据库如果不存在则创建\nsave时如果给定了_ObjectId则更新创建整条记录；如果要更新部分字段则使用update方法使用$set\ndb.dropDatabase()\ndb//显示当前数据库\nshow dbs\nshow collections\n\n有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。\nadmin： 从权限的角度来看，这是\"root\"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。\nlocal: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合\nconfig: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。\n\n\nMongoDB GridFS文件系统\n分布式文件系统：将固定存储于单台机器上的文件系统，扩展到多台机器上，每个节点负责存储部分数据，众多的存储节点组成一个文件系统网络，各个节点通过网络进行通信和数据传输\n\n当存储文档大于16M时，可以考虑使用GridFS\nGridFS：是MongoDB制定的如何在数据库中存储大文件的规范，MongoDB并没有实现GridFS，而是交由客户端驱动程序实现\nGridFS使用两个集合（collection）存储文件。一个集合是chunks, 用于存储文件内容的二进制数据；一个集合是files，用于存储文件的元数据。\n使用fs.files存储文件的元数据，包含字段如下： \n使用fs.chunks存储以255K进行分割的文件块，包含字段如下：\nGridFS适用于如下场景：\n存储用户产生的文件且文件数量比较大；需要文件的自动备份和分布式存储；需要访问文件的部分内容；存储16MB以上的文件\nmongofiles是MongoDB安装包中提供的一个工具，专门用来存取文件，包括查询所有文件、查看文件、上传一个文件、获取一个文件、按照_id来获取文件、按文件名删除文件、按_id删除文件。\nmongofiles --help其实有四个主要命令，分别为：\nput —存储命令\nget —获取命令 \nlist —列表命令\ndelete —删除命令 \n\nMongoDB聚合管道：聚合操作主要用户批量数据处理，往往将记录按条件分组，然后在每组上分别进行一系列操作，如：求和、求最大小值等\n聚合操作能够对记录进行复杂处理，主要为数理统计和数据挖掘。\nMongoDB提供了3种聚合操作方式：\n聚合管道（Aggregation Pipeline）:MongoDB Shell使用db.collection.aggregate([{...}])来构建和使用聚合管道\n    $project:用于修改文档的结构，可以重命名、增加或删除文档字段\n    $match:用于过滤文档，在$match中不能使用$where,尽量出现在管道的前面，方便借助索引加快查询\n    $group:将集合中的文档进行分组，此分组在内存中进行，最大100M，可通过allowDiskUse启用磁盘交换处理\n    $sort:将集合中的文档进行排序，此分组在内存中进行，最大100M，可通过allowDiskUse启用磁盘交换处理\n    $skip:跳过指定数量的文档\n    $unwind:将文档按照数组字段拆分成多条文档，每条文档包含数组的一个元素\n    $geoNear:按照由近到远顺序输出接近某一地理位置的文档\n    $out:将聚合结果存储到集合中，参数为集合名称\n    。。。\n    聚合管道表达式：阶段操作符可以看作是\"键\"，所对应的\"值\"称为管道表达式，管道表达式可以看作是管道操作符的操作数，管道表达式是一个文档结构，由字段名、字段值和表达式操作符组成。\n    聚合管道使用优化：\n    1将$match、$sort放到管道开始阶段，有利于利用索引提高文档处理效率\n    2提交过滤可减少流经后续阶段的文档数量\n    聚合管道的限制：\n    1返回文档结果不能超过16M，可通过返回一个游标或存储到集合中跳过此限制\n单目的聚合操作\n    count\n    distinct\n    group\nMapReduce编程模型\n\n\nmongoimport可以导入集合\n\nMongoDB数据更新\n文档插入和删除：insert、update、delete\nBulk函数：Bulk可将多个数据更新操作放到一个待执行的列表中批量来执行，顺序执行的Bulk（按添加顺序执行，一个有问题则退出）和并执行的Bulk（随机方式并行）\n1初始化Bulk：\n并行：db.集合名.initializeUnorderedBulkOp()\n顺序：db.集合名.initializeOrderedBulkOp()\n2 bulk.inset({...})\n3 bulk.execute()\n\nMMAPv1的内存分配策略：如果一个更新操作超过了文档在磁盘上预分配的空间，MongoDB会重新在磁盘上为其分配一块更大的连续空间。使用\"2的N次方\"的方式分配内存，如：32，64，128，256...2M，4M...\n优点：1有利用内存的重用，降低系统碎片的数量；2减少数据移动频率，提高系统数据写效率\n\n文档修改\nWriteResult = db.集合名.update(query,obj,upsert,multi)\nquery:查询条件，相当于where\nobj：更改的内容，相当于SQL中的set语句\nupsert：当query的文档不存在时是否插入一条新文档\nmulti：当query返回多个文档时是否一次更新满足条件的所有文档，默认只更新一条\n\n内嵌文档的修改：\n1. 修改整个内嵌文档：{$set:{field1:新内嵌文档}}\n2. 修改内嵌文档的某个字段：{$某个修改操作符:{field1.field2:value}}\n\n数组元素：MongoDB提供了大量的特定操作符，使得数组既可以作为栈、队列等有序对象使用，也可当作集合等无序对象来使用\n\nMongoDB的写安全机制\n写过程：使用update、save等操作数据集合中数据时，只是修改了数据再内存中的映像，数据更新并没有同步地保存到磁盘上，而且更新内存中数据之前，更新操作会被记录到journal日志文件中，\n每隔100ms将内存journal中的日志写到磁盘journal日志文件中 ，每隔60s将内存中修改的数据写会到磁盘上\n写入安全级别：写入安全Write Concern是一种客户端设置的，用于控制写入安全级别的机制，通过写入安全机制可提高数据的可靠性。\n分为四个级别，分别是：\n非确认式写入Unacknowledged：写操作不会返回结果，所以无法知道是否写入成功；但速度快、效率高、无阻塞\n确认式写入Acknowledged：写操作必须得到MongoDB服务器的写入确认，如果失败，会返回异常 \n日志写入Journaled：写操作要等到操作记录存储到Journal日志文件后才返回结果\n复制集确认写入Replica Acknowledged：写操作不仅要得到主节点的写入确认，还要得到从节点的写入确认，可以设置写入节点的个数（包含主节点）\n\njournal日志相当于oracle中的redo日志文件，用户故障恢复和持久。Journal默认100ms刷新一次，所以最多丢失100ms数据 \n文件位于journal目录中，只能以追加方式添加数据，文件名以\"j._\"开头，超过1G会自动创建新的；数据库正常关闭时，数据库服务会自动清空journal目录下所有文件\n\n设置写安全操作级别，其实就是在写操作的性能和可靠性间取一个权衡；使用的写操作级别越高，时间越长，可靠性越高 \n\n使用writeConcern函数作为更新函数的一个参数来设置写安全级别,如：db.集合名称.insert({name:\"joe\"},{writeConcern:{j:true}}),writeConcern函数参数如下：\nw选项，可选择0，1，2等整数值及\"majority\"，0-非确认式写入 1-确认式写入（未启用复制集）／主节点确认式写入（启用了复制集），>1只能用于复制集，2-数据至少写到1个从节点后返回，majority 只能用于复制集，表示更新操作用到大多数从节点\nj选项，设置为true来使用journaled日志安全级别\nwtimeout选项，用于设置超时单位为毫秒\n以上选项可组合使用\n\n数据MongoDB数据查询\nCursor = db.集合名称.find(query,fields,limit,skip)\nquery:查询条件，相当于where\nfields:用于字段映射，语法格式：{field:0}（0表示返回结果不包含此字段）或{field:1}（1表示返回结果不包含此字段），默认包含_id字段,相当于select中后面需要的字段\nlimit：限制查询结果集的数量，指定查询返回结果的数量上限，也可通过limit()实现\nskip:跳过一定数据量的结果，设置第一条返回文档的偏移量，也可通过skip()实现\nfind查询只能正对一个集合；返回的集合默认是无序的\n\ndb.集合名称.findOne()只返回第一条数据\n\n查询操作符\n比较查询操作符\n逻辑查询操作符\n元素查询操作符\n$where查询操作符：可以将JavaScript表达式的字符串或JavaScript函数作为查询语句的一部分，在js表达式和函数中，可使用this或obj来引用当前操作的文档，当js表达式或函数返回true时，才会返回当前文档\n\n内嵌文档与数组查询\n内嵌文档查询\n1查询整个内嵌文档：当内嵌文档的键值对数量和键值对顺序都相同时，才会匹配\n2查询文档的某个字段：需要使用.号操作符，如:db.user.find({\"address.city\":\"BeiJing\"})\n数组查询\n1查询整个数组：当数组元素内容和数组元素顺序都相同时，才会匹配\n2查询数组中的元素（普通元素）：\nA与位置无关，查询数组中含有某个值的文档，如：db.user.find({score:80})\nB与位置有关，按照指定的数组索引查询数组元素的值，如：db.user.find({'scores.2':80})\n3查询数组中的数组元素是文档时，查询数组元素有两种情况\nA与位置无关，查询数组中满足条件的子文档元素，如：db.user.find('scores.成绩'：95)\nB与位置有关，按照指定的数组索引查询数组子文档，如： db.user.find('scores.2.成绩'：95)\n\nMongoDB查询结果返回过程：find函数查询结果是以多条文档的形式分批来返回查询结果的，返回的文档会缓存到内存中，Cursor在一批数据回来之后遍历，下一批没来时会自动发起下一批请求，然后继续遍历\n\nMongoDB游标：用来遍历结果集中的数据。\n游标的生命周期：创建、使用、销毁\n游标可能会返回那些由于体积变大而被移动到集合末尾的文档而重复返回，可通过对查询快照的方式解决此问题，语法为：db.collection.find().snapshot().\n使用快照之后，查询就会在_id索引上来遍历执行，这样就可以保证每个文档只被返回一次，从而保证获取结果的一致性。\n\n模糊查询：查询条件可以使用正则表达式实现模糊查询，支持正则表达式操作符和正则表达式对象两种。\n正则表达式操作符：$regex\n\n\nfindAndModify函数使用执行分为find和update两步，但可以保证操作的原子性\n\nMongoDB是为分布式存储而设计，_id主键默认使用ObjectId类型的值，比自增方式更适合分布式环境，所以MongoDB默认不支持字段自增长功能\n\nMongoDB索引：数据库索引是对数据表中一列或多列的值进行排序的一种数据结构，使用索引可快速访问数据表中的特定信息。MogonDB索引不仅提高文档查询速度，还有利于排序时节省内存资源。\nMongoDB所有的索引信息被保存在system.indexes集合中，且默认总为_id创建单字段升序具有唯一属性的索引，可通过db.system.indexes.find()查看所有索引\nMongoDB可在单个字段上建立索引，字段可以是普通字段、整个文档以及子文档的某个字段\n对于复合索引，MongoDB支持前缀匹配\n为确保查询只使用复合索引，可以使用映射来指定不要返回_id字段（除非它是复合索引的一部分）\n多键索引：是对数组类型建立的索引，实际上是对数组的每个元素建立索引，而不是数组本身建立索引；当数组元素是文档时，可为文档的某个字段建立多键索引\n哈希索引：只支持等值查询，不支持范围查询，主要用于分片的集合上，可以作为片键来使用，能将数据比较均匀的分散存储在各个分片上，如：db.集合名.createIndex({name:\"hashed\"})\n\nMongoDB索引的属性\n唯一索引:可以确保集合的每一个文档的索引字段都有唯一的值，不会出现重复值，如：db.集合名.createIndex({name:1},{unique:true})，在非空集合创建唯一索引可能会因为已有重复值而失败，可添加dropBups:true删除重复文档\n稀疏索引：只会为索引字段存在的文档建立索引，即使索引字段的值为null，但不会为索引字段不存在的文档建立索引\nTTL(Time To Live)索引：为文档设置一个超时时间，当达到预设置的时间后，该文档会被数据库自动删除，但删除可能有延迟。这种类型的索引对缓存问题非常有用。只能建立在单独非_id字段\n创建了TTL索引后，MongoDB会有一个后台线程来管理文档；在复制集上建立的TTL索引，TTL后台线程只会运行在主节点上\n\nMongoDB索引的管理\n索引的默认命名规则：keyname1_dir1_keyname2_dir2...，其中keynameX是索引字段的名称，dirX是索引方向，1升序-1降序，也可自定义命名\n创建索引：db.集合名.createIndex(keys,options),返回值为一个文档类型。索引一旦创建就不能修改，创建后可通过db.集合名.getIndexes()查看集合所拥有的索引，创建索引有两种方式：\n1foreground:阻塞所有对数据库的读写请求，直到索引创建完成，为默认方式\n2background：创建索引时，如果有新的数据库请求，创建过程会暂停\n删除索引：db.集合.dropIndex(index)\n查询优化器：用来优化查询过程，通过比较返回100条文档速度得到最佳查询计划\nexplain函数：能够提供大量与查询有关的信息，可以很好的评估索引性能，帮助优化索引的使用策略。db.集合.find().explain(mode),支持3种模式：\n1queryPlanner：查询计划，默认\n2executionStatus：查询性能统计\n3allPlansExecution：所有计划统计信息（最优与被拒绝的计划）\nexplain返回结果使用由多个阶段（Stage）组成的树形结构来表示查询计划，查询计划自下而上执行，树的叶节点用来访问文档或索引，内部节点处理下层节点返回文档或索引，根节点输出查询结果\nhint函数：强制MongoDB使用特定索引\n\nMongoDB特殊索引\n地理空间索引：对地理位置数据建立索引，MongoDB支持两种2dsphere球面索引和平面2d索引\n2dSphere球面索引\n2d平面索引\n\n全文索引：又称为倒排索引，用于在大量文本中对每一个词组建立索引，指出该词在整段文本中出现的位置和次数，此技术主要用于搜索引擎和站内搜索等。\n一个集合只能有一个全文索引\n\n\njava对mongodb的使用\n集群搭建：mongodb分布式集群搭建手记\n\n\n\n","source":"_posts/2018-12-10-MongoDB.md","raw":"---\ntitle: MongoDB\ntags:\n  - MongoDB \ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-12-10 20:38:05\ncategories: 数据库\npassword:\n---\nhttps://www.jikexueyuan.com/course/mongoDB/\n\nNoSQL数据库：NoSQL(NoSQL = Not Only SQL )，意即\"不仅仅是SQL\"，指的是非关系型的数据库\n\nmongodb官网：https://www.mongodb.com/\nhttps://docs.mongodb.com/manual/\n\nMongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。\nMongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。\n\nhttp://www.runoob.com/mongodb/mongodb-tutorial.html\n\nNoSQL保证数据的最终一致性，数据由更新延迟\n\nCAP理论\n\n适用场景：数据缓存；json格式数据存储；高伸缩性场景；\nMongoDB更多适合大数据量、高并发、弱事务的互联网应用，其内置的水平扩展机制提供了从几百万到十亿级别的数据处理能力，可很好的满足Web2.0和移动互联网应用的s数据存储要求。\n\nMongoDB由C++编写，支持32位（2G限制）和64位应用，是一个基于分布式文件存储的开源数据库系统。\n\nMongoDB3.0特性：\n1. 加入WiredTiger存储引擎:\n  开源的存储引擎；为现代硬件设计：多核CPU，充分利用内存／芯片级缓存；RAM/SSD/HDD；为大数据设计：高性能，低延迟，高并发稳定性\n2. MMAPv1:内存映射存储引擎，为默认引擎 ，提供了Collection锁；无缝迁移MMAP\n3. 可插拔引擎API\n4. 基于Web的可视化管理工具：Ops Manager\n\nMongoDB数据模型\n文档：本质上是一种类JSON的BSON格式的数据，可以理解为在JSON基础上添加了一些新的数据类型，包括Date，正则表达式等。\nBSON官网：http://bsonspec.org/\nBSON是由一组组键值对组成，具有轻量性、可靠性和高效性3个特征。可遍历性是MongoDB将BSON作为数据存储的重要原因\n使用文档时需要注意以下事项：\nMongoDB中写操作的原子性限制在文档级别；\n单个文档占用的存储空间不能超过16MB；\nMongoDB会尽量保持文档被插入时键值对的顺序；\n关于文档命名需要注意的事项：\n_id是系统保留的关键字，他是默认的主键，该值在集合中必须唯一，且不可更改；\n键不能包含空字符或\\0，这个字符用于表示键的结尾；\n不能以$开头且不能包含点号.\n键是区分大小写的且不能重复\n\n集合：把一组相关的文档放到一起组成了集合，MongoDB的集合是模式自由的，一个集合里面的文档可以是各式各样的 \nMogoDB提供了一些特殊的集合：capped collection、system.indexes、system.namespaces等\n集合命名需注意：\n集合名不能是空字符串；\n集合名不能包含空字符串或\\0，该字符表示集合名的结尾\n集合名不能以\"system.\"开头，此前缀是系统本身保留的\n集合名不能包含$字符，但是可以包含点号.\n\n数据库：多个文档组成集合，多个集合组成数据库。一个MongoDB实例可承载多个数据库，每个数据库有独立的权限，在磁盘上，不同的数据库也可放置到不通目录\n数据库命名规则：\n不能是空字符串；不能以$开头；不能包含空字符串和点号.;数据库名称区分大小写；建议数据库名全部使用小写；数据库名最长64字节；不要与系统保留数据库名相同\n\n命名空间：把数据库名添加到集合名前面，中间用点号连接，得到集合的完全限定，就是命名空间\n因为点号可以出现在集合名字中，如：jike.blog.posts 和 jike.blog.authors，可以将posts和authors看作是blog集合的子集合，blog集合甚至可以不存在 \n使用子集合的方式，可以是我们更好的组织数据，使数据结构更加清晰明了\n\nMongoDB数据类型\n基本数据类型\nnull：表示空值或者不存在的字段\n布尔：true／false\n数据类型：32-int,64-int,64-double,注意：JavaScript只支持64位浮点数\n字符串类型：使用UTF-8对字符串进行编码\n二进制数据：可以保存由任意字节组成的字符串，如：图片、视频等\n正则表达式类型：主要用于查询，使用正则表达式作为限定条件\nDate类型：是一个64位整数，它代表距Unix epoch：1970-1-1的毫秒数，MongoDB在存储时间是现转换为UTC时间，北京时间=UTC+8小时，MongoDB Shell会根据本地时间 设置显示日期时间\nTimestap：32bit Unix epoch + 32bit自增序数，只供MongoDB数据库服务内部使用，用于记录操作的详细时间\nObjectId：由24个16精制字符组成，每个字节存储两位16精制数字，总共需12字节存储空间=4字节时间戳+3字节机器标识+2字节pid+3字节计数器，ObjectId(),getTimestamp(),valueOf()\n数组：使用方括号来表示的一组值，数组中可以包含不通数据类型的元素，针对数组，MongoDB提供了许多操作符，如：$pop,$push,$pull,$slice,$addToSet等；MongoDB可自动为数组元素建立MultiKey索引\n内嵌文档：文档可以作为键的值，这样的文档成为内嵌文档。内嵌文档可以使数据不用保存成扁平结果的键值对，从而使数据组织形式更加自然。\n\n内嵌文档模式VS引用文档模式\n子文档比较小或变化不频繁，则使用内嵌文档模式，否则使用引用文档模式\n\nMongoDB自动将_id字段设置为主键\n\nMongoDB Shell：是MongoDB自带的JavaScript Shell，随MongoDB一起发布 =JavaScript V8解释器+MongoDB客户端\n\nhelp查看帮助\n执行脚本\n    直接执行：mongo [--quiet] script.js\n    交互执行：load(\"script.js\")\n执行命令行程序：run(\"ls\")\n.mongorc.js文件，默认会加载\n编辑复合变量EDITOR：在.bashrc中添加后source生效\n~~~\n#EDITOR\nEDITOR=/usr/bin/vim\n~~~\n即可使用editor编辑文档\n\n\n\nhttp://www.runoob.com/mongodb/mongodb-intro.html\nMongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。\nGridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。\nMongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。\n\nMongoDB数据库安装：\n1. 下载安装文件解压缩并添加bin目录到环境变量\n2. 创建一个data目录，然后在data目录里创建db目录、logs目录\n3. 启动服务端 \n4. 启动客户端：mongo\n5. windows下可以将MongoDB做成系统服务\n\n\nmac\n临时添加环境变量：export PATH=/usr/local/mongodb/bin:$PATH\n编辑~/.bash_profile,添加：export PATH=$PATH:/usr/local/mongodb4/bin/:$PATH 即可永久添加环境变量\n\n连接MongoDB数据库：./mongo + 服务器IP:端口号/数据库名\n关闭MongoDB服务在 ./mongo 进入控制台后，输入 use admin,然后输入 db.shutdownServer()\n\nMongodb可以通过命令行方式和配置文件的方式来启动：\n这两种方式都是在前台启动Mongodb进程，如果Session窗口关闭，Mongodb进程也随之停止。\n不过Mongodb同时还提供了一种后台Daemon方式启动，只需要加上一个\"--fork\"参数即可，用到了\"--fork\"参数就必须启用\"--logpath\"参数\n通过命令行： ./bin/mongod --dbpath=/data/db --fork --logpath=/data/logs/mongodb.log\n配置文件方式：./bin/mongod -f mongodb.conf  或 ./bin/mongod --config mongodb.conf  //-f 后面写要使用的配置文件\n            ./bin/mongod --shutdown -f mongod.conf\n~~~\nport=27017\ndbpath=/usr/local/mongodb/data/\nlogpath=/usr/local/mongodb/log/mongodb.log  \nfork = true\n~~~\n\n命令行操作：\nuse mytetDB  //数据库如果不存在则创建\nsave时如果给定了_ObjectId则更新创建整条记录；如果要更新部分字段则使用update方法使用$set\ndb.dropDatabase()\ndb//显示当前数据库\nshow dbs\nshow collections\n\n有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。\nadmin： 从权限的角度来看，这是\"root\"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。\nlocal: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合\nconfig: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。\n\n\nMongoDB GridFS文件系统\n分布式文件系统：将固定存储于单台机器上的文件系统，扩展到多台机器上，每个节点负责存储部分数据，众多的存储节点组成一个文件系统网络，各个节点通过网络进行通信和数据传输\n\n当存储文档大于16M时，可以考虑使用GridFS\nGridFS：是MongoDB制定的如何在数据库中存储大文件的规范，MongoDB并没有实现GridFS，而是交由客户端驱动程序实现\nGridFS使用两个集合（collection）存储文件。一个集合是chunks, 用于存储文件内容的二进制数据；一个集合是files，用于存储文件的元数据。\n使用fs.files存储文件的元数据，包含字段如下： \n使用fs.chunks存储以255K进行分割的文件块，包含字段如下：\nGridFS适用于如下场景：\n存储用户产生的文件且文件数量比较大；需要文件的自动备份和分布式存储；需要访问文件的部分内容；存储16MB以上的文件\nmongofiles是MongoDB安装包中提供的一个工具，专门用来存取文件，包括查询所有文件、查看文件、上传一个文件、获取一个文件、按照_id来获取文件、按文件名删除文件、按_id删除文件。\nmongofiles --help其实有四个主要命令，分别为：\nput —存储命令\nget —获取命令 \nlist —列表命令\ndelete —删除命令 \n\nMongoDB聚合管道：聚合操作主要用户批量数据处理，往往将记录按条件分组，然后在每组上分别进行一系列操作，如：求和、求最大小值等\n聚合操作能够对记录进行复杂处理，主要为数理统计和数据挖掘。\nMongoDB提供了3种聚合操作方式：\n聚合管道（Aggregation Pipeline）:MongoDB Shell使用db.collection.aggregate([{...}])来构建和使用聚合管道\n    $project:用于修改文档的结构，可以重命名、增加或删除文档字段\n    $match:用于过滤文档，在$match中不能使用$where,尽量出现在管道的前面，方便借助索引加快查询\n    $group:将集合中的文档进行分组，此分组在内存中进行，最大100M，可通过allowDiskUse启用磁盘交换处理\n    $sort:将集合中的文档进行排序，此分组在内存中进行，最大100M，可通过allowDiskUse启用磁盘交换处理\n    $skip:跳过指定数量的文档\n    $unwind:将文档按照数组字段拆分成多条文档，每条文档包含数组的一个元素\n    $geoNear:按照由近到远顺序输出接近某一地理位置的文档\n    $out:将聚合结果存储到集合中，参数为集合名称\n    。。。\n    聚合管道表达式：阶段操作符可以看作是\"键\"，所对应的\"值\"称为管道表达式，管道表达式可以看作是管道操作符的操作数，管道表达式是一个文档结构，由字段名、字段值和表达式操作符组成。\n    聚合管道使用优化：\n    1将$match、$sort放到管道开始阶段，有利于利用索引提高文档处理效率\n    2提交过滤可减少流经后续阶段的文档数量\n    聚合管道的限制：\n    1返回文档结果不能超过16M，可通过返回一个游标或存储到集合中跳过此限制\n单目的聚合操作\n    count\n    distinct\n    group\nMapReduce编程模型\n\n\nmongoimport可以导入集合\n\nMongoDB数据更新\n文档插入和删除：insert、update、delete\nBulk函数：Bulk可将多个数据更新操作放到一个待执行的列表中批量来执行，顺序执行的Bulk（按添加顺序执行，一个有问题则退出）和并执行的Bulk（随机方式并行）\n1初始化Bulk：\n并行：db.集合名.initializeUnorderedBulkOp()\n顺序：db.集合名.initializeOrderedBulkOp()\n2 bulk.inset({...})\n3 bulk.execute()\n\nMMAPv1的内存分配策略：如果一个更新操作超过了文档在磁盘上预分配的空间，MongoDB会重新在磁盘上为其分配一块更大的连续空间。使用\"2的N次方\"的方式分配内存，如：32，64，128，256...2M，4M...\n优点：1有利用内存的重用，降低系统碎片的数量；2减少数据移动频率，提高系统数据写效率\n\n文档修改\nWriteResult = db.集合名.update(query,obj,upsert,multi)\nquery:查询条件，相当于where\nobj：更改的内容，相当于SQL中的set语句\nupsert：当query的文档不存在时是否插入一条新文档\nmulti：当query返回多个文档时是否一次更新满足条件的所有文档，默认只更新一条\n\n内嵌文档的修改：\n1. 修改整个内嵌文档：{$set:{field1:新内嵌文档}}\n2. 修改内嵌文档的某个字段：{$某个修改操作符:{field1.field2:value}}\n\n数组元素：MongoDB提供了大量的特定操作符，使得数组既可以作为栈、队列等有序对象使用，也可当作集合等无序对象来使用\n\nMongoDB的写安全机制\n写过程：使用update、save等操作数据集合中数据时，只是修改了数据再内存中的映像，数据更新并没有同步地保存到磁盘上，而且更新内存中数据之前，更新操作会被记录到journal日志文件中，\n每隔100ms将内存journal中的日志写到磁盘journal日志文件中 ，每隔60s将内存中修改的数据写会到磁盘上\n写入安全级别：写入安全Write Concern是一种客户端设置的，用于控制写入安全级别的机制，通过写入安全机制可提高数据的可靠性。\n分为四个级别，分别是：\n非确认式写入Unacknowledged：写操作不会返回结果，所以无法知道是否写入成功；但速度快、效率高、无阻塞\n确认式写入Acknowledged：写操作必须得到MongoDB服务器的写入确认，如果失败，会返回异常 \n日志写入Journaled：写操作要等到操作记录存储到Journal日志文件后才返回结果\n复制集确认写入Replica Acknowledged：写操作不仅要得到主节点的写入确认，还要得到从节点的写入确认，可以设置写入节点的个数（包含主节点）\n\njournal日志相当于oracle中的redo日志文件，用户故障恢复和持久。Journal默认100ms刷新一次，所以最多丢失100ms数据 \n文件位于journal目录中，只能以追加方式添加数据，文件名以\"j._\"开头，超过1G会自动创建新的；数据库正常关闭时，数据库服务会自动清空journal目录下所有文件\n\n设置写安全操作级别，其实就是在写操作的性能和可靠性间取一个权衡；使用的写操作级别越高，时间越长，可靠性越高 \n\n使用writeConcern函数作为更新函数的一个参数来设置写安全级别,如：db.集合名称.insert({name:\"joe\"},{writeConcern:{j:true}}),writeConcern函数参数如下：\nw选项，可选择0，1，2等整数值及\"majority\"，0-非确认式写入 1-确认式写入（未启用复制集）／主节点确认式写入（启用了复制集），>1只能用于复制集，2-数据至少写到1个从节点后返回，majority 只能用于复制集，表示更新操作用到大多数从节点\nj选项，设置为true来使用journaled日志安全级别\nwtimeout选项，用于设置超时单位为毫秒\n以上选项可组合使用\n\n数据MongoDB数据查询\nCursor = db.集合名称.find(query,fields,limit,skip)\nquery:查询条件，相当于where\nfields:用于字段映射，语法格式：{field:0}（0表示返回结果不包含此字段）或{field:1}（1表示返回结果不包含此字段），默认包含_id字段,相当于select中后面需要的字段\nlimit：限制查询结果集的数量，指定查询返回结果的数量上限，也可通过limit()实现\nskip:跳过一定数据量的结果，设置第一条返回文档的偏移量，也可通过skip()实现\nfind查询只能正对一个集合；返回的集合默认是无序的\n\ndb.集合名称.findOne()只返回第一条数据\n\n查询操作符\n比较查询操作符\n逻辑查询操作符\n元素查询操作符\n$where查询操作符：可以将JavaScript表达式的字符串或JavaScript函数作为查询语句的一部分，在js表达式和函数中，可使用this或obj来引用当前操作的文档，当js表达式或函数返回true时，才会返回当前文档\n\n内嵌文档与数组查询\n内嵌文档查询\n1查询整个内嵌文档：当内嵌文档的键值对数量和键值对顺序都相同时，才会匹配\n2查询文档的某个字段：需要使用.号操作符，如:db.user.find({\"address.city\":\"BeiJing\"})\n数组查询\n1查询整个数组：当数组元素内容和数组元素顺序都相同时，才会匹配\n2查询数组中的元素（普通元素）：\nA与位置无关，查询数组中含有某个值的文档，如：db.user.find({score:80})\nB与位置有关，按照指定的数组索引查询数组元素的值，如：db.user.find({'scores.2':80})\n3查询数组中的数组元素是文档时，查询数组元素有两种情况\nA与位置无关，查询数组中满足条件的子文档元素，如：db.user.find('scores.成绩'：95)\nB与位置有关，按照指定的数组索引查询数组子文档，如： db.user.find('scores.2.成绩'：95)\n\nMongoDB查询结果返回过程：find函数查询结果是以多条文档的形式分批来返回查询结果的，返回的文档会缓存到内存中，Cursor在一批数据回来之后遍历，下一批没来时会自动发起下一批请求，然后继续遍历\n\nMongoDB游标：用来遍历结果集中的数据。\n游标的生命周期：创建、使用、销毁\n游标可能会返回那些由于体积变大而被移动到集合末尾的文档而重复返回，可通过对查询快照的方式解决此问题，语法为：db.collection.find().snapshot().\n使用快照之后，查询就会在_id索引上来遍历执行，这样就可以保证每个文档只被返回一次，从而保证获取结果的一致性。\n\n模糊查询：查询条件可以使用正则表达式实现模糊查询，支持正则表达式操作符和正则表达式对象两种。\n正则表达式操作符：$regex\n\n\nfindAndModify函数使用执行分为find和update两步，但可以保证操作的原子性\n\nMongoDB是为分布式存储而设计，_id主键默认使用ObjectId类型的值，比自增方式更适合分布式环境，所以MongoDB默认不支持字段自增长功能\n\nMongoDB索引：数据库索引是对数据表中一列或多列的值进行排序的一种数据结构，使用索引可快速访问数据表中的特定信息。MogonDB索引不仅提高文档查询速度，还有利于排序时节省内存资源。\nMongoDB所有的索引信息被保存在system.indexes集合中，且默认总为_id创建单字段升序具有唯一属性的索引，可通过db.system.indexes.find()查看所有索引\nMongoDB可在单个字段上建立索引，字段可以是普通字段、整个文档以及子文档的某个字段\n对于复合索引，MongoDB支持前缀匹配\n为确保查询只使用复合索引，可以使用映射来指定不要返回_id字段（除非它是复合索引的一部分）\n多键索引：是对数组类型建立的索引，实际上是对数组的每个元素建立索引，而不是数组本身建立索引；当数组元素是文档时，可为文档的某个字段建立多键索引\n哈希索引：只支持等值查询，不支持范围查询，主要用于分片的集合上，可以作为片键来使用，能将数据比较均匀的分散存储在各个分片上，如：db.集合名.createIndex({name:\"hashed\"})\n\nMongoDB索引的属性\n唯一索引:可以确保集合的每一个文档的索引字段都有唯一的值，不会出现重复值，如：db.集合名.createIndex({name:1},{unique:true})，在非空集合创建唯一索引可能会因为已有重复值而失败，可添加dropBups:true删除重复文档\n稀疏索引：只会为索引字段存在的文档建立索引，即使索引字段的值为null，但不会为索引字段不存在的文档建立索引\nTTL(Time To Live)索引：为文档设置一个超时时间，当达到预设置的时间后，该文档会被数据库自动删除，但删除可能有延迟。这种类型的索引对缓存问题非常有用。只能建立在单独非_id字段\n创建了TTL索引后，MongoDB会有一个后台线程来管理文档；在复制集上建立的TTL索引，TTL后台线程只会运行在主节点上\n\nMongoDB索引的管理\n索引的默认命名规则：keyname1_dir1_keyname2_dir2...，其中keynameX是索引字段的名称，dirX是索引方向，1升序-1降序，也可自定义命名\n创建索引：db.集合名.createIndex(keys,options),返回值为一个文档类型。索引一旦创建就不能修改，创建后可通过db.集合名.getIndexes()查看集合所拥有的索引，创建索引有两种方式：\n1foreground:阻塞所有对数据库的读写请求，直到索引创建完成，为默认方式\n2background：创建索引时，如果有新的数据库请求，创建过程会暂停\n删除索引：db.集合.dropIndex(index)\n查询优化器：用来优化查询过程，通过比较返回100条文档速度得到最佳查询计划\nexplain函数：能够提供大量与查询有关的信息，可以很好的评估索引性能，帮助优化索引的使用策略。db.集合.find().explain(mode),支持3种模式：\n1queryPlanner：查询计划，默认\n2executionStatus：查询性能统计\n3allPlansExecution：所有计划统计信息（最优与被拒绝的计划）\nexplain返回结果使用由多个阶段（Stage）组成的树形结构来表示查询计划，查询计划自下而上执行，树的叶节点用来访问文档或索引，内部节点处理下层节点返回文档或索引，根节点输出查询结果\nhint函数：强制MongoDB使用特定索引\n\nMongoDB特殊索引\n地理空间索引：对地理位置数据建立索引，MongoDB支持两种2dsphere球面索引和平面2d索引\n2dSphere球面索引\n2d平面索引\n\n全文索引：又称为倒排索引，用于在大量文本中对每一个词组建立索引，指出该词在整段文本中出现的位置和次数，此技术主要用于搜索引擎和站内搜索等。\n一个集合只能有一个全文索引\n\n\njava对mongodb的使用\n集群搭建：mongodb分布式集群搭建手记\n\n\n\n","slug":"MongoDB","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrx8003yck8hldji874i","content":"<p><a href=\"https://www.jikexueyuan.com/course/mongoDB/\" target=\"_blank\" rel=\"noopener\">https://www.jikexueyuan.com/course/mongoDB/</a></p>\n<p>NoSQL数据库：NoSQL(NoSQL = Not Only SQL )，意即&quot;不仅仅是SQL&quot;，指的是非关系型的数据库</p>\n<p>mongodb官网：<a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/</a><br>\n<a href=\"https://docs.mongodb.com/manual/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/</a></p>\n<p>MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。<br>\nMongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p>\n<p><a href=\"http://www.runoob.com/mongodb/mongodb-tutorial.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/mongodb/mongodb-tutorial.html</a></p>\n<p>NoSQL保证数据的最终一致性，数据由更新延迟</p>\n<p>CAP理论</p>\n<p>适用场景：数据缓存；json格式数据存储；高伸缩性场景；<br>\nMongoDB更多适合大数据量、高并发、弱事务的互联网应用，其内置的水平扩展机制提供了从几百万到十亿级别的数据处理能力，可很好的满足Web2.0和移动互联网应用的s数据存储要求。</p>\n<p>MongoDB由C++编写，支持32位（2G限制）和64位应用，是一个基于分布式文件存储的开源数据库系统。</p>\n<p>MongoDB3.0特性：</p>\n<ol>\n<li>加入WiredTiger存储引擎:<br>\n开源的存储引擎；为现代硬件设计：多核CPU，充分利用内存／芯片级缓存；RAM/SSD/HDD；为大数据设计：高性能，低延迟，高并发稳定性</li>\n<li>MMAPv1:内存映射存储引擎，为默认引擎 ，提供了Collection锁；无缝迁移MMAP</li>\n<li>可插拔引擎API</li>\n<li>基于Web的可视化管理工具：Ops Manager</li>\n</ol>\n<p>MongoDB数据模型<br>\n文档：本质上是一种类JSON的BSON格式的数据，可以理解为在JSON基础上添加了一些新的数据类型，包括Date，正则表达式等。<br>\nBSON官网：<a href=\"http://bsonspec.org/\" target=\"_blank\" rel=\"noopener\">http://bsonspec.org/</a><br>\nBSON是由一组组键值对组成，具有轻量性、可靠性和高效性3个特征。可遍历性是MongoDB将BSON作为数据存储的重要原因<br>\n使用文档时需要注意以下事项：<br>\nMongoDB中写操作的原子性限制在文档级别；<br>\n单个文档占用的存储空间不能超过16MB；<br>\nMongoDB会尽量保持文档被插入时键值对的顺序；<br>\n关于文档命名需要注意的事项：<br>\n_id是系统保留的关键字，他是默认的主键，该值在集合中必须唯一，且不可更改；<br>\n键不能包含空字符或\\0，这个字符用于表示键的结尾；<br>\n不能以$开头且不能包含点号.<br>\n键是区分大小写的且不能重复</p>\n<p>集合：把一组相关的文档放到一起组成了集合，MongoDB的集合是模式自由的，一个集合里面的文档可以是各式各样的<br>\nMogoDB提供了一些特殊的集合：capped collection、system.indexes、system.namespaces等<br>\n集合命名需注意：<br>\n集合名不能是空字符串；<br>\n集合名不能包含空字符串或\\0，该字符表示集合名的结尾<br>\n集合名不能以&quot;system.&quot;开头，此前缀是系统本身保留的<br>\n集合名不能包含$字符，但是可以包含点号.</p>\n<p>数据库：多个文档组成集合，多个集合组成数据库。一个MongoDB实例可承载多个数据库，每个数据库有独立的权限，在磁盘上，不同的数据库也可放置到不通目录<br>\n数据库命名规则：<br>\n不能是空字符串；不能以$开头；不能包含空字符串和点号.;数据库名称区分大小写；建议数据库名全部使用小写；数据库名最长64字节；不要与系统保留数据库名相同</p>\n<p>命名空间：把数据库名添加到集合名前面，中间用点号连接，得到集合的完全限定，就是命名空间<br>\n因为点号可以出现在集合名字中，如：jike.blog.posts 和 jike.blog.authors，可以将posts和authors看作是blog集合的子集合，blog集合甚至可以不存在<br>\n使用子集合的方式，可以是我们更好的组织数据，使数据结构更加清晰明了</p>\n<p>MongoDB数据类型<br>\n基本数据类型<br>\nnull：表示空值或者不存在的字段<br>\n布尔：true／false<br>\n数据类型：32-int,64-int,64-double,注意：JavaScript只支持64位浮点数<br>\n字符串类型：使用UTF-8对字符串进行编码<br>\n二进制数据：可以保存由任意字节组成的字符串，如：图片、视频等<br>\n正则表达式类型：主要用于查询，使用正则表达式作为限定条件<br>\nDate类型：是一个64位整数，它代表距Unix epoch：1970-1-1的毫秒数，MongoDB在存储时间是现转换为UTC时间，北京时间=UTC+8小时，MongoDB Shell会根据本地时间 设置显示日期时间<br>\nTimestap：32bit Unix epoch + 32bit自增序数，只供MongoDB数据库服务内部使用，用于记录操作的详细时间<br>\nObjectId：由24个16精制字符组成，每个字节存储两位16精制数字，总共需12字节存储空间=4字节时间戳+3字节机器标识+2字节pid+3字节计数器，ObjectId(),getTimestamp(),valueOf()<br>\n数组：使用方括号来表示的一组值，数组中可以包含不通数据类型的元素，针对数组，MongoDB提供了许多操作符，如：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mi>o</mi><mi>p</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">pop,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">p</span><span class=\"mpunct\">,</span></span></span></span>push,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">pull,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span></span></span></span>slice,$addToSet等；MongoDB可自动为数组元素建立MultiKey索引<br>\n内嵌文档：文档可以作为键的值，这样的文档成为内嵌文档。内嵌文档可以使数据不用保存成扁平结果的键值对，从而使数据组织形式更加自然。</p>\n<p>内嵌文档模式VS引用文档模式<br>\n子文档比较小或变化不频繁，则使用内嵌文档模式，否则使用引用文档模式</p>\n<p>MongoDB自动将_id字段设置为主键</p>\n<p>MongoDB Shell：是MongoDB自带的JavaScript Shell，随MongoDB一起发布 =JavaScript V8解释器+MongoDB客户端</p>\n<p>help查看帮助<br>\n执行脚本<br>\n直接执行：mongo [–quiet] script.js<br>\n交互执行：load(“script.js”)<br>\n执行命令行程序：run(“ls”)<br>\n.mongorc.js文件，默认会加载<br>\n编辑复合变量EDITOR：在.bashrc中添加后source生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#EDITOR</span><br><span class=\"line\">EDITOR=/usr/bin/vim</span><br></pre></td></tr></table></figure>\n<p>即可使用editor编辑文档</p>\n<p><a href=\"http://www.runoob.com/mongodb/mongodb-intro.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/mongodb/mongodb-intro.html</a><br>\nMongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。<br>\nGridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。<br>\nMongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</p>\n<p>MongoDB数据库安装：</p>\n<ol>\n<li>下载安装文件解压缩并添加bin目录到环境变量</li>\n<li>创建一个data目录，然后在data目录里创建db目录、logs目录</li>\n<li>启动服务端</li>\n<li>启动客户端：mongo</li>\n<li>windows下可以将MongoDB做成系统服务</li>\n</ol>\n<p>mac<br>\n临时添加环境变量：export PATH=/usr/local/mongodb/bin:<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mi>A</mi><mi>T</mi><mi>H</mi><mi mathvariant=\"normal\">编</mi><mi mathvariant=\"normal\">辑</mi><mtext> </mtext><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">.</mi><mi>b</mi><mi>a</mi><mi>s</mi><msub><mi>h</mi><mi>p</mi></msub><mi>r</mi><mi>o</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>e</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">添</mi><mi mathvariant=\"normal\">加</mi><mi mathvariant=\"normal\">：</mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi><mi>P</mi><mi>A</mi><mi>T</mi><mi>H</mi><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">PATH\n编辑~/.bash_profile,添加：export PATH=</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord cjk_fallback\">编</span><span class=\"mord cjk_fallback\">辑</span><span class=\"mspace nobreak\"> </span><span class=\"mord\">/</span><span class=\"mord\">.</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">添</span><span class=\"mord cjk_fallback\">加</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span></span>PATH:/usr/local/mongodb4/bin/:$PATH 即可永久添加环境变量</p>\n<p>连接MongoDB数据库：./mongo + 服务器IP:端口号/数据库名<br>\n关闭MongoDB服务在 ./mongo 进入控制台后，输入 use admin,然后输入 db.shutdownServer()</p>\n<p>Mongodb可以通过命令行方式和配置文件的方式来启动：<br>\n这两种方式都是在前台启动Mongodb进程，如果Session窗口关闭，Mongodb进程也随之停止。<br>\n不过Mongodb同时还提供了一种后台Daemon方式启动，只需要加上一个&quot;–fork&quot;参数即可，用到了&quot;–fork&quot;参数就必须启用&quot;–logpath&quot;参数<br>\n通过命令行： ./bin/mongod --dbpath=/data/db --fork --logpath=/data/logs/mongodb.log<br>\n配置文件方式：./bin/mongod -f mongodb.conf  或 ./bin/mongod --config mongodb.conf  //-f 后面写要使用的配置文件<br>\n./bin/mongod --shutdown -f mongod.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port=27017</span><br><span class=\"line\">dbpath=/usr/local/mongodb/data/</span><br><span class=\"line\">logpath=/usr/local/mongodb/log/mongodb.log  </span><br><span class=\"line\">fork = true</span><br></pre></td></tr></table></figure>\n<p>命令行操作：<br>\nuse mytetDB  //数据库如果不存在则创建<br>\nsave时如果给定了_ObjectId则更新创建整条记录；如果要更新部分字段则使用update方法使用$set<br>\ndb.dropDatabase()<br>\ndb//显示当前数据库<br>\nshow dbs<br>\nshow collections</p>\n<p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。<br>\nadmin： 从权限的角度来看，这是&quot;root&quot;数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。<br>\nlocal: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合<br>\nconfig: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</p>\n<p>MongoDB GridFS文件系统<br>\n分布式文件系统：将固定存储于单台机器上的文件系统，扩展到多台机器上，每个节点负责存储部分数据，众多的存储节点组成一个文件系统网络，各个节点通过网络进行通信和数据传输</p>\n<p>当存储文档大于16M时，可以考虑使用GridFS<br>\nGridFS：是MongoDB制定的如何在数据库中存储大文件的规范，MongoDB并没有实现GridFS，而是交由客户端驱动程序实现<br>\nGridFS使用两个集合（collection）存储文件。一个集合是chunks, 用于存储文件内容的二进制数据；一个集合是files，用于存储文件的元数据。<br>\n使用fs.files存储文件的元数据，包含字段如下：<br>\n使用fs.chunks存储以255K进行分割的文件块，包含字段如下：<br>\nGridFS适用于如下场景：<br>\n存储用户产生的文件且文件数量比较大；需要文件的自动备份和分布式存储；需要访问文件的部分内容；存储16MB以上的文件<br>\nmongofiles是MongoDB安装包中提供的一个工具，专门用来存取文件，包括查询所有文件、查看文件、上传一个文件、获取一个文件、按照_id来获取文件、按文件名删除文件、按_id删除文件。<br>\nmongofiles --help其实有四个主要命令，分别为：<br>\nput —存储命令<br>\nget —获取命令<br>\nlist —列表命令<br>\ndelete —删除命令</p>\n<p>MongoDB聚合管道：聚合操作主要用户批量数据处理，往往将记录按条件分组，然后在每组上分别进行一系列操作，如：求和、求最大小值等<br>\n聚合操作能够对记录进行复杂处理，主要为数理统计和数据挖掘。<br>\nMongoDB提供了3种聚合操作方式：<br>\n聚合管道（Aggregation Pipeline）:MongoDB Shell使用db.collection.aggregate([{…}])来构建和使用聚合管道<br>\n$project:用于修改文档的结构，可以重命名、增加或删除文档字段<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mi>c</mi><mi>h</mi><mo>:</mo><mi mathvariant=\"normal\">用</mi><mi mathvariant=\"normal\">于</mi><mi mathvariant=\"normal\">过</mi><mi mathvariant=\"normal\">滤</mi><mi mathvariant=\"normal\">文</mi><mi mathvariant=\"normal\">档</mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">在</mi></mrow><annotation encoding=\"application/x-tex\">match:用于过滤文档，在</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">用</span><span class=\"mord cjk_fallback\">于</span><span class=\"mord cjk_fallback\">过</span><span class=\"mord cjk_fallback\">滤</span><span class=\"mord cjk_fallback\">文</span><span class=\"mord cjk_fallback\">档</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">在</span></span></span></span>match中不能使用$where,尽量出现在管道的前面，方便借助索引加快查询<br>\n$group:将集合中的文档进行分组，此分组在内存中进行，最大100M，可通过allowDiskUse启用磁盘交换处理<br>\n$sort:将集合中的文档进行排序，此分组在内存中进行，最大100M，可通过allowDiskUse启用磁盘交换处理<br>\n$skip:跳过指定数量的文档<br>\n$unwind:将文档按照数组字段拆分成多条文档，每条文档包含数组的一个元素<br>\n$geoNear:按照由近到远顺序输出接近某一地理位置的文档<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mo>:</mo><mi mathvariant=\"normal\">将</mi><mi mathvariant=\"normal\">聚</mi><mi mathvariant=\"normal\">合</mi><mi mathvariant=\"normal\">结</mi><mi mathvariant=\"normal\">果</mi><mi mathvariant=\"normal\">存</mi><mi mathvariant=\"normal\">储</mi><mi mathvariant=\"normal\">到</mi><mi mathvariant=\"normal\">集</mi><mi mathvariant=\"normal\">合</mi><mi mathvariant=\"normal\">中</mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">参</mi><mi mathvariant=\"normal\">数</mi><mi mathvariant=\"normal\">为</mi><mi mathvariant=\"normal\">集</mi><mi mathvariant=\"normal\">合</mi><mi mathvariant=\"normal\">名</mi><mi mathvariant=\"normal\">称</mi><mi mathvariant=\"normal\">。</mi><mi mathvariant=\"normal\">。</mi><mi mathvariant=\"normal\">。</mi><mi mathvariant=\"normal\">聚</mi><mi mathvariant=\"normal\">合</mi><mi mathvariant=\"normal\">管</mi><mi mathvariant=\"normal\">道</mi><mi mathvariant=\"normal\">表</mi><mi mathvariant=\"normal\">达</mi><mi mathvariant=\"normal\">式</mi><mi mathvariant=\"normal\">：</mi><mi mathvariant=\"normal\">阶</mi><mi mathvariant=\"normal\">段</mi><mi mathvariant=\"normal\">操</mi><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">符</mi><mi mathvariant=\"normal\">可</mi><mi mathvariant=\"normal\">以</mi><mi mathvariant=\"normal\">看</mi><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">是</mi><mi mathvariant=\"normal\">&quot;</mi><mi mathvariant=\"normal\">键</mi><mi mathvariant=\"normal\">&quot;</mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">所</mi><mi mathvariant=\"normal\">对</mi><mi mathvariant=\"normal\">应</mi><mi mathvariant=\"normal\">的</mi><mi mathvariant=\"normal\">&quot;</mi><mi mathvariant=\"normal\">值</mi><mi mathvariant=\"normal\">&quot;</mi><mi mathvariant=\"normal\">称</mi><mi mathvariant=\"normal\">为</mi><mi mathvariant=\"normal\">管</mi><mi mathvariant=\"normal\">道</mi><mi mathvariant=\"normal\">表</mi><mi mathvariant=\"normal\">达</mi><mi mathvariant=\"normal\">式</mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">管</mi><mi mathvariant=\"normal\">道</mi><mi mathvariant=\"normal\">表</mi><mi mathvariant=\"normal\">达</mi><mi mathvariant=\"normal\">式</mi><mi mathvariant=\"normal\">可</mi><mi mathvariant=\"normal\">以</mi><mi mathvariant=\"normal\">看</mi><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">是</mi><mi mathvariant=\"normal\">管</mi><mi mathvariant=\"normal\">道</mi><mi mathvariant=\"normal\">操</mi><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">符</mi><mi mathvariant=\"normal\">的</mi><mi mathvariant=\"normal\">操</mi><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">数</mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">管</mi><mi mathvariant=\"normal\">道</mi><mi mathvariant=\"normal\">表</mi><mi mathvariant=\"normal\">达</mi><mi mathvariant=\"normal\">式</mi><mi mathvariant=\"normal\">是</mi><mi mathvariant=\"normal\">一</mi><mi mathvariant=\"normal\">个</mi><mi mathvariant=\"normal\">文</mi><mi mathvariant=\"normal\">档</mi><mi mathvariant=\"normal\">结</mi><mi mathvariant=\"normal\">构</mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">由</mi><mi mathvariant=\"normal\">字</mi><mi mathvariant=\"normal\">段</mi><mi mathvariant=\"normal\">名</mi><mi mathvariant=\"normal\">、</mi><mi mathvariant=\"normal\">字</mi><mi mathvariant=\"normal\">段</mi><mi mathvariant=\"normal\">值</mi><mi mathvariant=\"normal\">和</mi><mi mathvariant=\"normal\">表</mi><mi mathvariant=\"normal\">达</mi><mi mathvariant=\"normal\">式</mi><mi mathvariant=\"normal\">操</mi><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">符</mi><mi mathvariant=\"normal\">组</mi><mi mathvariant=\"normal\">成</mi><mi mathvariant=\"normal\">。</mi><mi mathvariant=\"normal\">聚</mi><mi mathvariant=\"normal\">合</mi><mi mathvariant=\"normal\">管</mi><mi mathvariant=\"normal\">道</mi><mi mathvariant=\"normal\">使</mi><mi mathvariant=\"normal\">用</mi><mi mathvariant=\"normal\">优</mi><mi mathvariant=\"normal\">化</mi><mi mathvariant=\"normal\">：</mi><mn>1</mn><mi mathvariant=\"normal\">将</mi></mrow><annotation encoding=\"application/x-tex\">out:将聚合结果存储到集合中，参数为集合名称\n    。。。\n    聚合管道表达式：阶段操作符可以看作是&quot;键&quot;，所对应的&quot;值&quot;称为管道表达式，管道表达式可以看作是管道操作符的操作数，管道表达式是一个文档结构，由字段名、字段值和表达式操作符组成。\n    聚合管道使用优化：\n    1将</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">将</span><span class=\"mord cjk_fallback\">聚</span><span class=\"mord cjk_fallback\">合</span><span class=\"mord cjk_fallback\">结</span><span class=\"mord cjk_fallback\">果</span><span class=\"mord cjk_fallback\">存</span><span class=\"mord cjk_fallback\">储</span><span class=\"mord cjk_fallback\">到</span><span class=\"mord cjk_fallback\">集</span><span class=\"mord cjk_fallback\">合</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord cjk_fallback\">集</span><span class=\"mord cjk_fallback\">合</span><span class=\"mord cjk_fallback\">名</span><span class=\"mord cjk_fallback\">称</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">聚</span><span class=\"mord cjk_fallback\">合</span><span class=\"mord cjk_fallback\">管</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">达</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">阶</span><span class=\"mord cjk_fallback\">段</span><span class=\"mord cjk_fallback\">操</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">符</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">看</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord\">&quot;</span><span class=\"mord cjk_fallback\">键</span><span class=\"mord\">&quot;</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">所</span><span class=\"mord cjk_fallback\">对</span><span class=\"mord cjk_fallback\">应</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord\">&quot;</span><span class=\"mord cjk_fallback\">值</span><span class=\"mord\">&quot;</span><span class=\"mord cjk_fallback\">称</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord cjk_fallback\">管</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">达</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">管</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">达</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">看</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">管</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">操</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">符</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">操</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">管</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">达</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">文</span><span class=\"mord cjk_fallback\">档</span><span class=\"mord cjk_fallback\">结</span><span class=\"mord cjk_fallback\">构</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">由</span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">段</span><span class=\"mord cjk_fallback\">名</span><span class=\"mord cjk_fallback\">、</span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">段</span><span class=\"mord cjk_fallback\">值</span><span class=\"mord cjk_fallback\">和</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">达</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">操</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">符</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord cjk_fallback\">成</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">聚</span><span class=\"mord cjk_fallback\">合</span><span class=\"mord cjk_fallback\">管</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">使</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord cjk_fallback\">优</span><span class=\"mord cjk_fallback\">化</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">将</span></span></span></span>match、$sort放到管道开始阶段，有利于利用索引提高文档处理效率<br>\n2提交过滤可减少流经后续阶段的文档数量<br>\n聚合管道的限制：<br>\n1返回文档结果不能超过16M，可通过返回一个游标或存储到集合中跳过此限制<br>\n单目的聚合操作<br>\ncount<br>\ndistinct<br>\ngroup<br>\nMapReduce编程模型</p>\n<p>mongoimport可以导入集合</p>\n<p>MongoDB数据更新<br>\n文档插入和删除：insert、update、delete<br>\nBulk函数：Bulk可将多个数据更新操作放到一个待执行的列表中批量来执行，顺序执行的Bulk（按添加顺序执行，一个有问题则退出）和并执行的Bulk（随机方式并行）<br>\n1初始化Bulk：<br>\n并行：db.集合名.initializeUnorderedBulkOp()<br>\n顺序：db.集合名.initializeOrderedBulkOp()<br>\n2 bulk.inset({…})<br>\n3 bulk.execute()</p>\n<p>MMAPv1的内存分配策略：如果一个更新操作超过了文档在磁盘上预分配的空间，MongoDB会重新在磁盘上为其分配一块更大的连续空间。使用&quot;2的N次方&quot;的方式分配内存，如：32，64，128，256…2M，4M…<br>\n优点：1有利用内存的重用，降低系统碎片的数量；2减少数据移动频率，提高系统数据写效率</p>\n<p>文档修改<br>\nWriteResult = db.集合名.update(query,obj,upsert,multi)<br>\nquery:查询条件，相当于where<br>\nobj：更改的内容，相当于SQL中的set语句<br>\nupsert：当query的文档不存在时是否插入一条新文档<br>\nmulti：当query返回多个文档时是否一次更新满足条件的所有文档，默认只更新一条</p>\n<p>内嵌文档的修改：</p>\n<ol>\n<li>修改整个内嵌文档：{$set:{field1:新内嵌文档}}</li>\n<li>修改内嵌文档的某个字段：{$某个修改操作符:{field1.field2:value}}</li>\n</ol>\n<p>数组元素：MongoDB提供了大量的特定操作符，使得数组既可以作为栈、队列等有序对象使用，也可当作集合等无序对象来使用</p>\n<p>MongoDB的写安全机制<br>\n写过程：使用update、save等操作数据集合中数据时，只是修改了数据再内存中的映像，数据更新并没有同步地保存到磁盘上，而且更新内存中数据之前，更新操作会被记录到journal日志文件中，<br>\n每隔100ms将内存journal中的日志写到磁盘journal日志文件中 ，每隔60s将内存中修改的数据写会到磁盘上<br>\n写入安全级别：写入安全Write Concern是一种客户端设置的，用于控制写入安全级别的机制，通过写入安全机制可提高数据的可靠性。<br>\n分为四个级别，分别是：<br>\n非确认式写入Unacknowledged：写操作不会返回结果，所以无法知道是否写入成功；但速度快、效率高、无阻塞<br>\n确认式写入Acknowledged：写操作必须得到MongoDB服务器的写入确认，如果失败，会返回异常<br>\n日志写入Journaled：写操作要等到操作记录存储到Journal日志文件后才返回结果<br>\n复制集确认写入Replica Acknowledged：写操作不仅要得到主节点的写入确认，还要得到从节点的写入确认，可以设置写入节点的个数（包含主节点）</p>\n<p>journal日志相当于oracle中的redo日志文件，用户故障恢复和持久。Journal默认100ms刷新一次，所以最多丢失100ms数据<br>\n文件位于journal目录中，只能以追加方式添加数据，文件名以&quot;j._&quot;开头，超过1G会自动创建新的；数据库正常关闭时，数据库服务会自动清空journal目录下所有文件</p>\n<p>设置写安全操作级别，其实就是在写操作的性能和可靠性间取一个权衡；使用的写操作级别越高，时间越长，可靠性越高</p>\n<p>使用writeConcern函数作为更新函数的一个参数来设置写安全级别,如：db.集合名称.insert({name:“joe”},{writeConcern:{j:true}}),writeConcern函数参数如下：<br>\nw选项，可选择0，1，2等整数值及&quot;majority&quot;，0-非确认式写入 1-确认式写入（未启用复制集）／主节点确认式写入（启用了复制集），&gt;1只能用于复制集，2-数据至少写到1个从节点后返回，majority 只能用于复制集，表示更新操作用到大多数从节点<br>\nj选项，设置为true来使用journaled日志安全级别<br>\nwtimeout选项，用于设置超时单位为毫秒<br>\n以上选项可组合使用</p>\n<p>数据MongoDB数据查询<br>\nCursor = db.集合名称.find(query,fields,limit,skip)<br>\nquery:查询条件，相当于where<br>\nfields:用于字段映射，语法格式：{field:0}（0表示返回结果不包含此字段）或{field:1}（1表示返回结果不包含此字段），默认包含_id字段,相当于select中后面需要的字段<br>\nlimit：限制查询结果集的数量，指定查询返回结果的数量上限，也可通过limit()实现<br>\nskip:跳过一定数据量的结果，设置第一条返回文档的偏移量，也可通过skip()实现<br>\nfind查询只能正对一个集合；返回的集合默认是无序的</p>\n<p>db.集合名称.findOne()只返回第一条数据</p>\n<p>查询操作符<br>\n比较查询操作符<br>\n逻辑查询操作符<br>\n元素查询操作符<br>\n$where查询操作符：可以将JavaScript表达式的字符串或JavaScript函数作为查询语句的一部分，在js表达式和函数中，可使用this或obj来引用当前操作的文档，当js表达式或函数返回true时，才会返回当前文档</p>\n<p>内嵌文档与数组查询<br>\n内嵌文档查询<br>\n1查询整个内嵌文档：当内嵌文档的键值对数量和键值对顺序都相同时，才会匹配<br>\n2查询文档的某个字段：需要使用.号操作符，如:db.user.find({“address.city”:“BeiJing”})<br>\n数组查询<br>\n1查询整个数组：当数组元素内容和数组元素顺序都相同时，才会匹配<br>\n2查询数组中的元素（普通元素）：<br>\nA与位置无关，查询数组中含有某个值的文档，如：db.user.find({score:80})<br>\nB与位置有关，按照指定的数组索引查询数组元素的值，如：db.user.find({‘scores.2’:80})<br>\n3查询数组中的数组元素是文档时，查询数组元素有两种情况<br>\nA与位置无关，查询数组中满足条件的子文档元素，如：db.user.find(‘scores.成绩’：95)<br>\nB与位置有关，按照指定的数组索引查询数组子文档，如： db.user.find(‘scores.2.成绩’：95)</p>\n<p>MongoDB查询结果返回过程：find函数查询结果是以多条文档的形式分批来返回查询结果的，返回的文档会缓存到内存中，Cursor在一批数据回来之后遍历，下一批没来时会自动发起下一批请求，然后继续遍历</p>\n<p>MongoDB游标：用来遍历结果集中的数据。<br>\n游标的生命周期：创建、使用、销毁<br>\n游标可能会返回那些由于体积变大而被移动到集合末尾的文档而重复返回，可通过对查询快照的方式解决此问题，语法为：db.collection.find().snapshot().<br>\n使用快照之后，查询就会在_id索引上来遍历执行，这样就可以保证每个文档只被返回一次，从而保证获取结果的一致性。</p>\n<p>模糊查询：查询条件可以使用正则表达式实现模糊查询，支持正则表达式操作符和正则表达式对象两种。<br>\n正则表达式操作符：$regex</p>\n<p>findAndModify函数使用执行分为find和update两步，但可以保证操作的原子性</p>\n<p>MongoDB是为分布式存储而设计，_id主键默认使用ObjectId类型的值，比自增方式更适合分布式环境，所以MongoDB默认不支持字段自增长功能</p>\n<p>MongoDB索引：数据库索引是对数据表中一列或多列的值进行排序的一种数据结构，使用索引可快速访问数据表中的特定信息。MogonDB索引不仅提高文档查询速度，还有利于排序时节省内存资源。<br>\nMongoDB所有的索引信息被保存在system.indexes集合中，且默认总为_id创建单字段升序具有唯一属性的索引，可通过db.system.indexes.find()查看所有索引<br>\nMongoDB可在单个字段上建立索引，字段可以是普通字段、整个文档以及子文档的某个字段<br>\n对于复合索引，MongoDB支持前缀匹配<br>\n为确保查询只使用复合索引，可以使用映射来指定不要返回_id字段（除非它是复合索引的一部分）<br>\n多键索引：是对数组类型建立的索引，实际上是对数组的每个元素建立索引，而不是数组本身建立索引；当数组元素是文档时，可为文档的某个字段建立多键索引<br>\n哈希索引：只支持等值查询，不支持范围查询，主要用于分片的集合上，可以作为片键来使用，能将数据比较均匀的分散存储在各个分片上，如：db.集合名.createIndex({name:“hashed”})</p>\n<p>MongoDB索引的属性<br>\n唯一索引:可以确保集合的每一个文档的索引字段都有唯一的值，不会出现重复值，如：db.集合名.createIndex({name:1},{unique:true})，在非空集合创建唯一索引可能会因为已有重复值而失败，可添加dropBups:true删除重复文档<br>\n稀疏索引：只会为索引字段存在的文档建立索引，即使索引字段的值为null，但不会为索引字段不存在的文档建立索引<br>\nTTL(Time To Live)索引：为文档设置一个超时时间，当达到预设置的时间后，该文档会被数据库自动删除，但删除可能有延迟。这种类型的索引对缓存问题非常有用。只能建立在单独非_id字段<br>\n创建了TTL索引后，MongoDB会有一个后台线程来管理文档；在复制集上建立的TTL索引，TTL后台线程只会运行在主节点上</p>\n<p>MongoDB索引的管理<br>\n索引的默认命名规则：keyname1_dir1_keyname2_dir2…，其中keynameX是索引字段的名称，dirX是索引方向，1升序-1降序，也可自定义命名<br>\n创建索引：db.集合名.createIndex(keys,options),返回值为一个文档类型。索引一旦创建就不能修改，创建后可通过db.集合名.getIndexes()查看集合所拥有的索引，创建索引有两种方式：<br>\n1foreground:阻塞所有对数据库的读写请求，直到索引创建完成，为默认方式<br>\n2background：创建索引时，如果有新的数据库请求，创建过程会暂停<br>\n删除索引：db.集合.dropIndex(index)<br>\n查询优化器：用来优化查询过程，通过比较返回100条文档速度得到最佳查询计划<br>\nexplain函数：能够提供大量与查询有关的信息，可以很好的评估索引性能，帮助优化索引的使用策略。db.集合.find().explain(mode),支持3种模式：<br>\n1queryPlanner：查询计划，默认<br>\n2executionStatus：查询性能统计<br>\n3allPlansExecution：所有计划统计信息（最优与被拒绝的计划）<br>\nexplain返回结果使用由多个阶段（Stage）组成的树形结构来表示查询计划，查询计划自下而上执行，树的叶节点用来访问文档或索引，内部节点处理下层节点返回文档或索引，根节点输出查询结果<br>\nhint函数：强制MongoDB使用特定索引</p>\n<p>MongoDB特殊索引<br>\n地理空间索引：对地理位置数据建立索引，MongoDB支持两种2dsphere球面索引和平面2d索引<br>\n2dSphere球面索引<br>\n2d平面索引</p>\n<p>全文索引：又称为倒排索引，用于在大量文本中对每一个词组建立索引，指出该词在整段文本中出现的位置和次数，此技术主要用于搜索引擎和站内搜索等。<br>\n一个集合只能有一个全文索引</p>\n<p>java对mongodb的使用<br>\n集群搭建：mongodb分布式集群搭建手记</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.jikexueyuan.com/course/mongoDB/\" target=\"_blank\" rel=\"noopener\">https://www.jikexueyuan.com/course/mongoDB/</a></p>\n<p>NoSQL数据库：NoSQL(NoSQL = Not Only SQL )，意即&quot;不仅仅是SQL&quot;，指的是非关系型的数据库</p>\n<p>mongodb官网：<a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/</a><br>\n<a href=\"https://docs.mongodb.com/manual/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/</a></p>\n<p>MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。<br>\nMongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p>\n<p><a href=\"http://www.runoob.com/mongodb/mongodb-tutorial.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/mongodb/mongodb-tutorial.html</a></p>\n<p>NoSQL保证数据的最终一致性，数据由更新延迟</p>\n<p>CAP理论</p>\n<p>适用场景：数据缓存；json格式数据存储；高伸缩性场景；<br>\nMongoDB更多适合大数据量、高并发、弱事务的互联网应用，其内置的水平扩展机制提供了从几百万到十亿级别的数据处理能力，可很好的满足Web2.0和移动互联网应用的s数据存储要求。</p>\n<p>MongoDB由C++编写，支持32位（2G限制）和64位应用，是一个基于分布式文件存储的开源数据库系统。</p>\n<p>MongoDB3.0特性：</p>\n<ol>\n<li>加入WiredTiger存储引擎:<br>\n开源的存储引擎；为现代硬件设计：多核CPU，充分利用内存／芯片级缓存；RAM/SSD/HDD；为大数据设计：高性能，低延迟，高并发稳定性</li>\n<li>MMAPv1:内存映射存储引擎，为默认引擎 ，提供了Collection锁；无缝迁移MMAP</li>\n<li>可插拔引擎API</li>\n<li>基于Web的可视化管理工具：Ops Manager</li>\n</ol>\n<p>MongoDB数据模型<br>\n文档：本质上是一种类JSON的BSON格式的数据，可以理解为在JSON基础上添加了一些新的数据类型，包括Date，正则表达式等。<br>\nBSON官网：<a href=\"http://bsonspec.org/\" target=\"_blank\" rel=\"noopener\">http://bsonspec.org/</a><br>\nBSON是由一组组键值对组成，具有轻量性、可靠性和高效性3个特征。可遍历性是MongoDB将BSON作为数据存储的重要原因<br>\n使用文档时需要注意以下事项：<br>\nMongoDB中写操作的原子性限制在文档级别；<br>\n单个文档占用的存储空间不能超过16MB；<br>\nMongoDB会尽量保持文档被插入时键值对的顺序；<br>\n关于文档命名需要注意的事项：<br>\n_id是系统保留的关键字，他是默认的主键，该值在集合中必须唯一，且不可更改；<br>\n键不能包含空字符或\\0，这个字符用于表示键的结尾；<br>\n不能以$开头且不能包含点号.<br>\n键是区分大小写的且不能重复</p>\n<p>集合：把一组相关的文档放到一起组成了集合，MongoDB的集合是模式自由的，一个集合里面的文档可以是各式各样的<br>\nMogoDB提供了一些特殊的集合：capped collection、system.indexes、system.namespaces等<br>\n集合命名需注意：<br>\n集合名不能是空字符串；<br>\n集合名不能包含空字符串或\\0，该字符表示集合名的结尾<br>\n集合名不能以&quot;system.&quot;开头，此前缀是系统本身保留的<br>\n集合名不能包含$字符，但是可以包含点号.</p>\n<p>数据库：多个文档组成集合，多个集合组成数据库。一个MongoDB实例可承载多个数据库，每个数据库有独立的权限，在磁盘上，不同的数据库也可放置到不通目录<br>\n数据库命名规则：<br>\n不能是空字符串；不能以$开头；不能包含空字符串和点号.;数据库名称区分大小写；建议数据库名全部使用小写；数据库名最长64字节；不要与系统保留数据库名相同</p>\n<p>命名空间：把数据库名添加到集合名前面，中间用点号连接，得到集合的完全限定，就是命名空间<br>\n因为点号可以出现在集合名字中，如：jike.blog.posts 和 jike.blog.authors，可以将posts和authors看作是blog集合的子集合，blog集合甚至可以不存在<br>\n使用子集合的方式，可以是我们更好的组织数据，使数据结构更加清晰明了</p>\n<p>MongoDB数据类型<br>\n基本数据类型<br>\nnull：表示空值或者不存在的字段<br>\n布尔：true／false<br>\n数据类型：32-int,64-int,64-double,注意：JavaScript只支持64位浮点数<br>\n字符串类型：使用UTF-8对字符串进行编码<br>\n二进制数据：可以保存由任意字节组成的字符串，如：图片、视频等<br>\n正则表达式类型：主要用于查询，使用正则表达式作为限定条件<br>\nDate类型：是一个64位整数，它代表距Unix epoch：1970-1-1的毫秒数，MongoDB在存储时间是现转换为UTC时间，北京时间=UTC+8小时，MongoDB Shell会根据本地时间 设置显示日期时间<br>\nTimestap：32bit Unix epoch + 32bit自增序数，只供MongoDB数据库服务内部使用，用于记录操作的详细时间<br>\nObjectId：由24个16精制字符组成，每个字节存储两位16精制数字，总共需12字节存储空间=4字节时间戳+3字节机器标识+2字节pid+3字节计数器，ObjectId(),getTimestamp(),valueOf()<br>\n数组：使用方括号来表示的一组值，数组中可以包含不通数据类型的元素，针对数组，MongoDB提供了许多操作符，如：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mi>o</mi><mi>p</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">pop,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">p</span><span class=\"mpunct\">,</span></span></span></span>push,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">pull,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span></span></span></span>slice,$addToSet等；MongoDB可自动为数组元素建立MultiKey索引<br>\n内嵌文档：文档可以作为键的值，这样的文档成为内嵌文档。内嵌文档可以使数据不用保存成扁平结果的键值对，从而使数据组织形式更加自然。</p>\n<p>内嵌文档模式VS引用文档模式<br>\n子文档比较小或变化不频繁，则使用内嵌文档模式，否则使用引用文档模式</p>\n<p>MongoDB自动将_id字段设置为主键</p>\n<p>MongoDB Shell：是MongoDB自带的JavaScript Shell，随MongoDB一起发布 =JavaScript V8解释器+MongoDB客户端</p>\n<p>help查看帮助<br>\n执行脚本<br>\n直接执行：mongo [–quiet] script.js<br>\n交互执行：load(“script.js”)<br>\n执行命令行程序：run(“ls”)<br>\n.mongorc.js文件，默认会加载<br>\n编辑复合变量EDITOR：在.bashrc中添加后source生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#EDITOR</span><br><span class=\"line\">EDITOR=/usr/bin/vim</span><br></pre></td></tr></table></figure>\n<p>即可使用editor编辑文档</p>\n<p><a href=\"http://www.runoob.com/mongodb/mongodb-intro.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/mongodb/mongodb-intro.html</a><br>\nMongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。<br>\nGridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。<br>\nMongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</p>\n<p>MongoDB数据库安装：</p>\n<ol>\n<li>下载安装文件解压缩并添加bin目录到环境变量</li>\n<li>创建一个data目录，然后在data目录里创建db目录、logs目录</li>\n<li>启动服务端</li>\n<li>启动客户端：mongo</li>\n<li>windows下可以将MongoDB做成系统服务</li>\n</ol>\n<p>mac<br>\n临时添加环境变量：export PATH=/usr/local/mongodb/bin:<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mi>A</mi><mi>T</mi><mi>H</mi><mi mathvariant=\"normal\">编</mi><mi mathvariant=\"normal\">辑</mi><mtext> </mtext><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">.</mi><mi>b</mi><mi>a</mi><mi>s</mi><msub><mi>h</mi><mi>p</mi></msub><mi>r</mi><mi>o</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>e</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">添</mi><mi mathvariant=\"normal\">加</mi><mi mathvariant=\"normal\">：</mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi><mi>P</mi><mi>A</mi><mi>T</mi><mi>H</mi><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">PATH\n编辑~/.bash_profile,添加：export PATH=</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord cjk_fallback\">编</span><span class=\"mord cjk_fallback\">辑</span><span class=\"mspace nobreak\"> </span><span class=\"mord\">/</span><span class=\"mord\">.</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">添</span><span class=\"mord cjk_fallback\">加</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span></span>PATH:/usr/local/mongodb4/bin/:$PATH 即可永久添加环境变量</p>\n<p>连接MongoDB数据库：./mongo + 服务器IP:端口号/数据库名<br>\n关闭MongoDB服务在 ./mongo 进入控制台后，输入 use admin,然后输入 db.shutdownServer()</p>\n<p>Mongodb可以通过命令行方式和配置文件的方式来启动：<br>\n这两种方式都是在前台启动Mongodb进程，如果Session窗口关闭，Mongodb进程也随之停止。<br>\n不过Mongodb同时还提供了一种后台Daemon方式启动，只需要加上一个&quot;–fork&quot;参数即可，用到了&quot;–fork&quot;参数就必须启用&quot;–logpath&quot;参数<br>\n通过命令行： ./bin/mongod --dbpath=/data/db --fork --logpath=/data/logs/mongodb.log<br>\n配置文件方式：./bin/mongod -f mongodb.conf  或 ./bin/mongod --config mongodb.conf  //-f 后面写要使用的配置文件<br>\n./bin/mongod --shutdown -f mongod.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port=27017</span><br><span class=\"line\">dbpath=/usr/local/mongodb/data/</span><br><span class=\"line\">logpath=/usr/local/mongodb/log/mongodb.log  </span><br><span class=\"line\">fork = true</span><br></pre></td></tr></table></figure>\n<p>命令行操作：<br>\nuse mytetDB  //数据库如果不存在则创建<br>\nsave时如果给定了_ObjectId则更新创建整条记录；如果要更新部分字段则使用update方法使用$set<br>\ndb.dropDatabase()<br>\ndb//显示当前数据库<br>\nshow dbs<br>\nshow collections</p>\n<p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。<br>\nadmin： 从权限的角度来看，这是&quot;root&quot;数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。<br>\nlocal: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合<br>\nconfig: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</p>\n<p>MongoDB GridFS文件系统<br>\n分布式文件系统：将固定存储于单台机器上的文件系统，扩展到多台机器上，每个节点负责存储部分数据，众多的存储节点组成一个文件系统网络，各个节点通过网络进行通信和数据传输</p>\n<p>当存储文档大于16M时，可以考虑使用GridFS<br>\nGridFS：是MongoDB制定的如何在数据库中存储大文件的规范，MongoDB并没有实现GridFS，而是交由客户端驱动程序实现<br>\nGridFS使用两个集合（collection）存储文件。一个集合是chunks, 用于存储文件内容的二进制数据；一个集合是files，用于存储文件的元数据。<br>\n使用fs.files存储文件的元数据，包含字段如下：<br>\n使用fs.chunks存储以255K进行分割的文件块，包含字段如下：<br>\nGridFS适用于如下场景：<br>\n存储用户产生的文件且文件数量比较大；需要文件的自动备份和分布式存储；需要访问文件的部分内容；存储16MB以上的文件<br>\nmongofiles是MongoDB安装包中提供的一个工具，专门用来存取文件，包括查询所有文件、查看文件、上传一个文件、获取一个文件、按照_id来获取文件、按文件名删除文件、按_id删除文件。<br>\nmongofiles --help其实有四个主要命令，分别为：<br>\nput —存储命令<br>\nget —获取命令<br>\nlist —列表命令<br>\ndelete —删除命令</p>\n<p>MongoDB聚合管道：聚合操作主要用户批量数据处理，往往将记录按条件分组，然后在每组上分别进行一系列操作，如：求和、求最大小值等<br>\n聚合操作能够对记录进行复杂处理，主要为数理统计和数据挖掘。<br>\nMongoDB提供了3种聚合操作方式：<br>\n聚合管道（Aggregation Pipeline）:MongoDB Shell使用db.collection.aggregate([{…}])来构建和使用聚合管道<br>\n$project:用于修改文档的结构，可以重命名、增加或删除文档字段<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mi>c</mi><mi>h</mi><mo>:</mo><mi mathvariant=\"normal\">用</mi><mi mathvariant=\"normal\">于</mi><mi mathvariant=\"normal\">过</mi><mi mathvariant=\"normal\">滤</mi><mi mathvariant=\"normal\">文</mi><mi mathvariant=\"normal\">档</mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">在</mi></mrow><annotation encoding=\"application/x-tex\">match:用于过滤文档，在</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">用</span><span class=\"mord cjk_fallback\">于</span><span class=\"mord cjk_fallback\">过</span><span class=\"mord cjk_fallback\">滤</span><span class=\"mord cjk_fallback\">文</span><span class=\"mord cjk_fallback\">档</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">在</span></span></span></span>match中不能使用$where,尽量出现在管道的前面，方便借助索引加快查询<br>\n$group:将集合中的文档进行分组，此分组在内存中进行，最大100M，可通过allowDiskUse启用磁盘交换处理<br>\n$sort:将集合中的文档进行排序，此分组在内存中进行，最大100M，可通过allowDiskUse启用磁盘交换处理<br>\n$skip:跳过指定数量的文档<br>\n$unwind:将文档按照数组字段拆分成多条文档，每条文档包含数组的一个元素<br>\n$geoNear:按照由近到远顺序输出接近某一地理位置的文档<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mo>:</mo><mi mathvariant=\"normal\">将</mi><mi mathvariant=\"normal\">聚</mi><mi mathvariant=\"normal\">合</mi><mi mathvariant=\"normal\">结</mi><mi mathvariant=\"normal\">果</mi><mi mathvariant=\"normal\">存</mi><mi mathvariant=\"normal\">储</mi><mi mathvariant=\"normal\">到</mi><mi mathvariant=\"normal\">集</mi><mi mathvariant=\"normal\">合</mi><mi mathvariant=\"normal\">中</mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">参</mi><mi mathvariant=\"normal\">数</mi><mi mathvariant=\"normal\">为</mi><mi mathvariant=\"normal\">集</mi><mi mathvariant=\"normal\">合</mi><mi mathvariant=\"normal\">名</mi><mi mathvariant=\"normal\">称</mi><mi mathvariant=\"normal\">。</mi><mi mathvariant=\"normal\">。</mi><mi mathvariant=\"normal\">。</mi><mi mathvariant=\"normal\">聚</mi><mi mathvariant=\"normal\">合</mi><mi mathvariant=\"normal\">管</mi><mi mathvariant=\"normal\">道</mi><mi mathvariant=\"normal\">表</mi><mi mathvariant=\"normal\">达</mi><mi mathvariant=\"normal\">式</mi><mi mathvariant=\"normal\">：</mi><mi mathvariant=\"normal\">阶</mi><mi mathvariant=\"normal\">段</mi><mi mathvariant=\"normal\">操</mi><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">符</mi><mi mathvariant=\"normal\">可</mi><mi mathvariant=\"normal\">以</mi><mi mathvariant=\"normal\">看</mi><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">是</mi><mi mathvariant=\"normal\">&quot;</mi><mi mathvariant=\"normal\">键</mi><mi mathvariant=\"normal\">&quot;</mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">所</mi><mi mathvariant=\"normal\">对</mi><mi mathvariant=\"normal\">应</mi><mi mathvariant=\"normal\">的</mi><mi mathvariant=\"normal\">&quot;</mi><mi mathvariant=\"normal\">值</mi><mi mathvariant=\"normal\">&quot;</mi><mi mathvariant=\"normal\">称</mi><mi mathvariant=\"normal\">为</mi><mi mathvariant=\"normal\">管</mi><mi mathvariant=\"normal\">道</mi><mi mathvariant=\"normal\">表</mi><mi mathvariant=\"normal\">达</mi><mi mathvariant=\"normal\">式</mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">管</mi><mi mathvariant=\"normal\">道</mi><mi mathvariant=\"normal\">表</mi><mi mathvariant=\"normal\">达</mi><mi mathvariant=\"normal\">式</mi><mi mathvariant=\"normal\">可</mi><mi mathvariant=\"normal\">以</mi><mi mathvariant=\"normal\">看</mi><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">是</mi><mi mathvariant=\"normal\">管</mi><mi mathvariant=\"normal\">道</mi><mi mathvariant=\"normal\">操</mi><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">符</mi><mi mathvariant=\"normal\">的</mi><mi mathvariant=\"normal\">操</mi><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">数</mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">管</mi><mi mathvariant=\"normal\">道</mi><mi mathvariant=\"normal\">表</mi><mi mathvariant=\"normal\">达</mi><mi mathvariant=\"normal\">式</mi><mi mathvariant=\"normal\">是</mi><mi mathvariant=\"normal\">一</mi><mi mathvariant=\"normal\">个</mi><mi mathvariant=\"normal\">文</mi><mi mathvariant=\"normal\">档</mi><mi mathvariant=\"normal\">结</mi><mi mathvariant=\"normal\">构</mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">由</mi><mi mathvariant=\"normal\">字</mi><mi mathvariant=\"normal\">段</mi><mi mathvariant=\"normal\">名</mi><mi mathvariant=\"normal\">、</mi><mi mathvariant=\"normal\">字</mi><mi mathvariant=\"normal\">段</mi><mi mathvariant=\"normal\">值</mi><mi mathvariant=\"normal\">和</mi><mi mathvariant=\"normal\">表</mi><mi mathvariant=\"normal\">达</mi><mi mathvariant=\"normal\">式</mi><mi mathvariant=\"normal\">操</mi><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">符</mi><mi mathvariant=\"normal\">组</mi><mi mathvariant=\"normal\">成</mi><mi mathvariant=\"normal\">。</mi><mi mathvariant=\"normal\">聚</mi><mi mathvariant=\"normal\">合</mi><mi mathvariant=\"normal\">管</mi><mi mathvariant=\"normal\">道</mi><mi mathvariant=\"normal\">使</mi><mi mathvariant=\"normal\">用</mi><mi mathvariant=\"normal\">优</mi><mi mathvariant=\"normal\">化</mi><mi mathvariant=\"normal\">：</mi><mn>1</mn><mi mathvariant=\"normal\">将</mi></mrow><annotation encoding=\"application/x-tex\">out:将聚合结果存储到集合中，参数为集合名称\n    。。。\n    聚合管道表达式：阶段操作符可以看作是&quot;键&quot;，所对应的&quot;值&quot;称为管道表达式，管道表达式可以看作是管道操作符的操作数，管道表达式是一个文档结构，由字段名、字段值和表达式操作符组成。\n    聚合管道使用优化：\n    1将</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">将</span><span class=\"mord cjk_fallback\">聚</span><span class=\"mord cjk_fallback\">合</span><span class=\"mord cjk_fallback\">结</span><span class=\"mord cjk_fallback\">果</span><span class=\"mord cjk_fallback\">存</span><span class=\"mord cjk_fallback\">储</span><span class=\"mord cjk_fallback\">到</span><span class=\"mord cjk_fallback\">集</span><span class=\"mord cjk_fallback\">合</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord cjk_fallback\">集</span><span class=\"mord cjk_fallback\">合</span><span class=\"mord cjk_fallback\">名</span><span class=\"mord cjk_fallback\">称</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">聚</span><span class=\"mord cjk_fallback\">合</span><span class=\"mord cjk_fallback\">管</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">达</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">阶</span><span class=\"mord cjk_fallback\">段</span><span class=\"mord cjk_fallback\">操</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">符</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">看</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord\">&quot;</span><span class=\"mord cjk_fallback\">键</span><span class=\"mord\">&quot;</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">所</span><span class=\"mord cjk_fallback\">对</span><span class=\"mord cjk_fallback\">应</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord\">&quot;</span><span class=\"mord cjk_fallback\">值</span><span class=\"mord\">&quot;</span><span class=\"mord cjk_fallback\">称</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord cjk_fallback\">管</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">达</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">管</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">达</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">看</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">管</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">操</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">符</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">操</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">管</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">达</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">文</span><span class=\"mord cjk_fallback\">档</span><span class=\"mord cjk_fallback\">结</span><span class=\"mord cjk_fallback\">构</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">由</span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">段</span><span class=\"mord cjk_fallback\">名</span><span class=\"mord cjk_fallback\">、</span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">段</span><span class=\"mord cjk_fallback\">值</span><span class=\"mord cjk_fallback\">和</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">达</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">操</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">符</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord cjk_fallback\">成</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">聚</span><span class=\"mord cjk_fallback\">合</span><span class=\"mord cjk_fallback\">管</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">使</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord cjk_fallback\">优</span><span class=\"mord cjk_fallback\">化</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">将</span></span></span></span>match、$sort放到管道开始阶段，有利于利用索引提高文档处理效率<br>\n2提交过滤可减少流经后续阶段的文档数量<br>\n聚合管道的限制：<br>\n1返回文档结果不能超过16M，可通过返回一个游标或存储到集合中跳过此限制<br>\n单目的聚合操作<br>\ncount<br>\ndistinct<br>\ngroup<br>\nMapReduce编程模型</p>\n<p>mongoimport可以导入集合</p>\n<p>MongoDB数据更新<br>\n文档插入和删除：insert、update、delete<br>\nBulk函数：Bulk可将多个数据更新操作放到一个待执行的列表中批量来执行，顺序执行的Bulk（按添加顺序执行，一个有问题则退出）和并执行的Bulk（随机方式并行）<br>\n1初始化Bulk：<br>\n并行：db.集合名.initializeUnorderedBulkOp()<br>\n顺序：db.集合名.initializeOrderedBulkOp()<br>\n2 bulk.inset({…})<br>\n3 bulk.execute()</p>\n<p>MMAPv1的内存分配策略：如果一个更新操作超过了文档在磁盘上预分配的空间，MongoDB会重新在磁盘上为其分配一块更大的连续空间。使用&quot;2的N次方&quot;的方式分配内存，如：32，64，128，256…2M，4M…<br>\n优点：1有利用内存的重用，降低系统碎片的数量；2减少数据移动频率，提高系统数据写效率</p>\n<p>文档修改<br>\nWriteResult = db.集合名.update(query,obj,upsert,multi)<br>\nquery:查询条件，相当于where<br>\nobj：更改的内容，相当于SQL中的set语句<br>\nupsert：当query的文档不存在时是否插入一条新文档<br>\nmulti：当query返回多个文档时是否一次更新满足条件的所有文档，默认只更新一条</p>\n<p>内嵌文档的修改：</p>\n<ol>\n<li>修改整个内嵌文档：{$set:{field1:新内嵌文档}}</li>\n<li>修改内嵌文档的某个字段：{$某个修改操作符:{field1.field2:value}}</li>\n</ol>\n<p>数组元素：MongoDB提供了大量的特定操作符，使得数组既可以作为栈、队列等有序对象使用，也可当作集合等无序对象来使用</p>\n<p>MongoDB的写安全机制<br>\n写过程：使用update、save等操作数据集合中数据时，只是修改了数据再内存中的映像，数据更新并没有同步地保存到磁盘上，而且更新内存中数据之前，更新操作会被记录到journal日志文件中，<br>\n每隔100ms将内存journal中的日志写到磁盘journal日志文件中 ，每隔60s将内存中修改的数据写会到磁盘上<br>\n写入安全级别：写入安全Write Concern是一种客户端设置的，用于控制写入安全级别的机制，通过写入安全机制可提高数据的可靠性。<br>\n分为四个级别，分别是：<br>\n非确认式写入Unacknowledged：写操作不会返回结果，所以无法知道是否写入成功；但速度快、效率高、无阻塞<br>\n确认式写入Acknowledged：写操作必须得到MongoDB服务器的写入确认，如果失败，会返回异常<br>\n日志写入Journaled：写操作要等到操作记录存储到Journal日志文件后才返回结果<br>\n复制集确认写入Replica Acknowledged：写操作不仅要得到主节点的写入确认，还要得到从节点的写入确认，可以设置写入节点的个数（包含主节点）</p>\n<p>journal日志相当于oracle中的redo日志文件，用户故障恢复和持久。Journal默认100ms刷新一次，所以最多丢失100ms数据<br>\n文件位于journal目录中，只能以追加方式添加数据，文件名以&quot;j._&quot;开头，超过1G会自动创建新的；数据库正常关闭时，数据库服务会自动清空journal目录下所有文件</p>\n<p>设置写安全操作级别，其实就是在写操作的性能和可靠性间取一个权衡；使用的写操作级别越高，时间越长，可靠性越高</p>\n<p>使用writeConcern函数作为更新函数的一个参数来设置写安全级别,如：db.集合名称.insert({name:“joe”},{writeConcern:{j:true}}),writeConcern函数参数如下：<br>\nw选项，可选择0，1，2等整数值及&quot;majority&quot;，0-非确认式写入 1-确认式写入（未启用复制集）／主节点确认式写入（启用了复制集），&gt;1只能用于复制集，2-数据至少写到1个从节点后返回，majority 只能用于复制集，表示更新操作用到大多数从节点<br>\nj选项，设置为true来使用journaled日志安全级别<br>\nwtimeout选项，用于设置超时单位为毫秒<br>\n以上选项可组合使用</p>\n<p>数据MongoDB数据查询<br>\nCursor = db.集合名称.find(query,fields,limit,skip)<br>\nquery:查询条件，相当于where<br>\nfields:用于字段映射，语法格式：{field:0}（0表示返回结果不包含此字段）或{field:1}（1表示返回结果不包含此字段），默认包含_id字段,相当于select中后面需要的字段<br>\nlimit：限制查询结果集的数量，指定查询返回结果的数量上限，也可通过limit()实现<br>\nskip:跳过一定数据量的结果，设置第一条返回文档的偏移量，也可通过skip()实现<br>\nfind查询只能正对一个集合；返回的集合默认是无序的</p>\n<p>db.集合名称.findOne()只返回第一条数据</p>\n<p>查询操作符<br>\n比较查询操作符<br>\n逻辑查询操作符<br>\n元素查询操作符<br>\n$where查询操作符：可以将JavaScript表达式的字符串或JavaScript函数作为查询语句的一部分，在js表达式和函数中，可使用this或obj来引用当前操作的文档，当js表达式或函数返回true时，才会返回当前文档</p>\n<p>内嵌文档与数组查询<br>\n内嵌文档查询<br>\n1查询整个内嵌文档：当内嵌文档的键值对数量和键值对顺序都相同时，才会匹配<br>\n2查询文档的某个字段：需要使用.号操作符，如:db.user.find({“address.city”:“BeiJing”})<br>\n数组查询<br>\n1查询整个数组：当数组元素内容和数组元素顺序都相同时，才会匹配<br>\n2查询数组中的元素（普通元素）：<br>\nA与位置无关，查询数组中含有某个值的文档，如：db.user.find({score:80})<br>\nB与位置有关，按照指定的数组索引查询数组元素的值，如：db.user.find({‘scores.2’:80})<br>\n3查询数组中的数组元素是文档时，查询数组元素有两种情况<br>\nA与位置无关，查询数组中满足条件的子文档元素，如：db.user.find(‘scores.成绩’：95)<br>\nB与位置有关，按照指定的数组索引查询数组子文档，如： db.user.find(‘scores.2.成绩’：95)</p>\n<p>MongoDB查询结果返回过程：find函数查询结果是以多条文档的形式分批来返回查询结果的，返回的文档会缓存到内存中，Cursor在一批数据回来之后遍历，下一批没来时会自动发起下一批请求，然后继续遍历</p>\n<p>MongoDB游标：用来遍历结果集中的数据。<br>\n游标的生命周期：创建、使用、销毁<br>\n游标可能会返回那些由于体积变大而被移动到集合末尾的文档而重复返回，可通过对查询快照的方式解决此问题，语法为：db.collection.find().snapshot().<br>\n使用快照之后，查询就会在_id索引上来遍历执行，这样就可以保证每个文档只被返回一次，从而保证获取结果的一致性。</p>\n<p>模糊查询：查询条件可以使用正则表达式实现模糊查询，支持正则表达式操作符和正则表达式对象两种。<br>\n正则表达式操作符：$regex</p>\n<p>findAndModify函数使用执行分为find和update两步，但可以保证操作的原子性</p>\n<p>MongoDB是为分布式存储而设计，_id主键默认使用ObjectId类型的值，比自增方式更适合分布式环境，所以MongoDB默认不支持字段自增长功能</p>\n<p>MongoDB索引：数据库索引是对数据表中一列或多列的值进行排序的一种数据结构，使用索引可快速访问数据表中的特定信息。MogonDB索引不仅提高文档查询速度，还有利于排序时节省内存资源。<br>\nMongoDB所有的索引信息被保存在system.indexes集合中，且默认总为_id创建单字段升序具有唯一属性的索引，可通过db.system.indexes.find()查看所有索引<br>\nMongoDB可在单个字段上建立索引，字段可以是普通字段、整个文档以及子文档的某个字段<br>\n对于复合索引，MongoDB支持前缀匹配<br>\n为确保查询只使用复合索引，可以使用映射来指定不要返回_id字段（除非它是复合索引的一部分）<br>\n多键索引：是对数组类型建立的索引，实际上是对数组的每个元素建立索引，而不是数组本身建立索引；当数组元素是文档时，可为文档的某个字段建立多键索引<br>\n哈希索引：只支持等值查询，不支持范围查询，主要用于分片的集合上，可以作为片键来使用，能将数据比较均匀的分散存储在各个分片上，如：db.集合名.createIndex({name:“hashed”})</p>\n<p>MongoDB索引的属性<br>\n唯一索引:可以确保集合的每一个文档的索引字段都有唯一的值，不会出现重复值，如：db.集合名.createIndex({name:1},{unique:true})，在非空集合创建唯一索引可能会因为已有重复值而失败，可添加dropBups:true删除重复文档<br>\n稀疏索引：只会为索引字段存在的文档建立索引，即使索引字段的值为null，但不会为索引字段不存在的文档建立索引<br>\nTTL(Time To Live)索引：为文档设置一个超时时间，当达到预设置的时间后，该文档会被数据库自动删除，但删除可能有延迟。这种类型的索引对缓存问题非常有用。只能建立在单独非_id字段<br>\n创建了TTL索引后，MongoDB会有一个后台线程来管理文档；在复制集上建立的TTL索引，TTL后台线程只会运行在主节点上</p>\n<p>MongoDB索引的管理<br>\n索引的默认命名规则：keyname1_dir1_keyname2_dir2…，其中keynameX是索引字段的名称，dirX是索引方向，1升序-1降序，也可自定义命名<br>\n创建索引：db.集合名.createIndex(keys,options),返回值为一个文档类型。索引一旦创建就不能修改，创建后可通过db.集合名.getIndexes()查看集合所拥有的索引，创建索引有两种方式：<br>\n1foreground:阻塞所有对数据库的读写请求，直到索引创建完成，为默认方式<br>\n2background：创建索引时，如果有新的数据库请求，创建过程会暂停<br>\n删除索引：db.集合.dropIndex(index)<br>\n查询优化器：用来优化查询过程，通过比较返回100条文档速度得到最佳查询计划<br>\nexplain函数：能够提供大量与查询有关的信息，可以很好的评估索引性能，帮助优化索引的使用策略。db.集合.find().explain(mode),支持3种模式：<br>\n1queryPlanner：查询计划，默认<br>\n2executionStatus：查询性能统计<br>\n3allPlansExecution：所有计划统计信息（最优与被拒绝的计划）<br>\nexplain返回结果使用由多个阶段（Stage）组成的树形结构来表示查询计划，查询计划自下而上执行，树的叶节点用来访问文档或索引，内部节点处理下层节点返回文档或索引，根节点输出查询结果<br>\nhint函数：强制MongoDB使用特定索引</p>\n<p>MongoDB特殊索引<br>\n地理空间索引：对地理位置数据建立索引，MongoDB支持两种2dsphere球面索引和平面2d索引<br>\n2dSphere球面索引<br>\n2d平面索引</p>\n<p>全文索引：又称为倒排索引，用于在大量文本中对每一个词组建立索引，指出该词在整段文本中出现的位置和次数，此技术主要用于搜索引擎和站内搜索等。<br>\n一个集合只能有一个全文索引</p>\n<p>java对mongodb的使用<br>\n集群搭建：mongodb分布式集群搭建手记</p>\n"},{"title":"ASP.NET MVC学习笔记","copyright":true,"comments":1,"toc":true,"date":"2018-10-05T12:08:31.000Z","password":null,"_content":"# 申明\n文章内容记录自：http://www.w3school.com.cn/aspnet/mvc_intro.asp， 为个人学习笔记记录。\n\n# MVC项目文件夹 \n典型的 ASP.NET MVC web 应用程序拥有如下文件夹内容：\n<img src=\"/pub-images/ASPMVC.png\" width=256 height=256 />\n~~~\n应用程序信息\n* Properties\n* 引用\n\n应用程序文件夹\n* App_Data 文件夹  //用于存储应用程序数据\n* App_Start 文件夹 //含应用程序的配置逻辑文件\n ** BundleConfig.cs: 注册所使用的捆绑的CSS 和 JS文件。\n ** FilterConfig.cs: 注册外部/全局过滤器，这些过滤器可以被应用到每个Action和Controller中去.\n ** RouteConfig.cs: 配置MVC应用程序的系统路由路径。\n ** Startup.Auth.cs: 配置MVC应用程序的安全信息，包括Authentication和Authorization配置  \n* Content 文件夹   //用于静态文件，比如样式表（CSS 文件）、图表和图像\n* Controllers 文件夹   //包含负责处理用户输入和响应的控制器类,名称必须以 \"Controller\" 结尾\n* Models 文件夹    //包含表示应用程序模型的类。模型存有并操作应用程序的数据\n* Scripts 文件夹   //存储应用程序的 JavaScript 文件\n* Views 文件夹 //存有与应用程序的显示相关的 HTML 文件 \n ** Shared   //用于存储控制器间分享的视图\n ** [名称]   //每个控制器对应的一个文件夹\n ** _ViewStart.cshtml //其内代码被自动添加到由应用程序显示的所有视图。\n\n配置文件\n* Global.asax   //主要是web应用程序的全局设置文件，该文件包含响应 ASP.NET 或HTTP模块所引发的应用程序级别和会话级别事件的代码。Global.asax 文件驻留在 ASP.NET 应用程序的根目录中。运行时，分析 Global.asax 并将其编译到一个动态生成的 .NET Framework 类，该类是从HttpApplication基类派生的。配置 ASP.NET，以便自动拒绝对 Global.asax 文件的任何直接的 URL 请求；外部用户不能下载或查看其中的代码。Global.asax 文件是可选的。只在希望处理应用程序事件或会话事件时，才应创建它.\n* packages.config   //NuGet管理用的\n* Web.config\n~~~\n> 控制器位于 Controllers 文件夹，视图位于 Views 文件夹，模型位于 Models 文件夹。您不必在应用程序代码中使用文件夹名称\n\n# 控制器Controllers\n1. web 服务器通常会将进入的 URL 请求直接映射到服务器上的磁盘文件.某个 URL 请求（比如 \"http://www.abc.cn/index.asp\"）将映射到服务器根目录上的文件 \"index.asp\"。\n> MVC 框架的映射方式有所不同。\n2. MVC 将 URL 映射到方法。这些方法在类中被称为“控制器”。控制器负责处理进入的请求、处理输入、保存数据、并把响应发送回客户端。\n3. 在mvc中所有的controller类都必须使用\"Controller\"后缀来命名,并且对Action也有一定的要求：\n* 必须是一个public方法\n* 必须是实例方法\n* 没有标志NonActionAttribute特性的(NoAction)\n* 不能被重载\n* 必须返回ActionResult类型\n> 具体可返回数据类型请参考：https://blog.csdn.net/pasic/article/details/7110134\n\n# 模型Models\n模型包含所有应用程序逻辑（业务逻辑、验证逻辑、数据访问逻辑），除了纯视图和控制器逻辑。\n\n# HTML帮助器\nHTML 帮助器用于修改 HTML 输出。\n## HTML 链接\n通过 MVC，Html.ActionLink() 不连接到视图。它创建控制器操作（controller action）的连接。\n\n## HTML 表单元素\n* BeginForm()\n* EndForm()\n* TextArea()\n* TextBox()\n* CheckBox()\n* RadioButton()\n* ListBox()\n* DropDownList()\n* Hidden()\n* Password()\n\n~~~\n<%= Html.ValidationSummary(\"Create was unsuccessful. Please correct the errors and \ntry again.\") %>\n<% using (Html.BeginForm()){%>\n<p>\n<label for=\"FirstName\">First Name:</label>\n<%= Html.TextBox(\"FirstName\") %>\n<%= Html.ValidationMessage(\"FirstName\", \"*\") %>\n</p>\n<p>\n<label for=\"LastName\">Last Name:</label>\n<%= Html.TextBox(\"LastName\") %>\n<%= Html.ValidationMessage(\"LastName\", \"*\") %>\n</p>\n<p>\n<label for=\"Password\">Password:</label>\n<%= Html.Password(\"Password\") %>\n<%= Html.ValidationMessage(\"Password\", \"*\") %>\n</p>\n<p>\n<label for=\"Password\">Confirm Password:</label>\n<%= Html.Password(\"ConfirmPassword\") %>\n<%= Html.ValidationMessage(\"ConfirmPassword\", \"*\") %>\n</p>\n<p>\n<label for=\"Profile\">Profile:</label>\n<%= Html.TextArea(\"Profile\", new {cols=60, rows=10})%>\n</p>\n<p>\n<%= Html.CheckBox(\"ReceiveNewsletter\") %>\n<label for=\"ReceiveNewsletter\" style=\"display:inline\">Receive Newsletter?</label>\n</p>\n<p>\n<input type=\"submit\" value=\"Register\" />\n</p>\n<%}%>\n~~~\n\n# MVC参考手册\nhttp://www.w3school.com.cn/aspnet/mvc_reference.asp","source":"_posts/C#开发/2018-10-05-ASP-NET-MVC使用.md","raw":"---\ntitle: ASP.NET MVC学习笔记\ntags:\n  - ASP.NET\n  - MVC\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-05 20:08:31\ncategories: C#\npassword:\n---\n# 申明\n文章内容记录自：http://www.w3school.com.cn/aspnet/mvc_intro.asp， 为个人学习笔记记录。\n\n# MVC项目文件夹 \n典型的 ASP.NET MVC web 应用程序拥有如下文件夹内容：\n<img src=\"/pub-images/ASPMVC.png\" width=256 height=256 />\n~~~\n应用程序信息\n* Properties\n* 引用\n\n应用程序文件夹\n* App_Data 文件夹  //用于存储应用程序数据\n* App_Start 文件夹 //含应用程序的配置逻辑文件\n ** BundleConfig.cs: 注册所使用的捆绑的CSS 和 JS文件。\n ** FilterConfig.cs: 注册外部/全局过滤器，这些过滤器可以被应用到每个Action和Controller中去.\n ** RouteConfig.cs: 配置MVC应用程序的系统路由路径。\n ** Startup.Auth.cs: 配置MVC应用程序的安全信息，包括Authentication和Authorization配置  \n* Content 文件夹   //用于静态文件，比如样式表（CSS 文件）、图表和图像\n* Controllers 文件夹   //包含负责处理用户输入和响应的控制器类,名称必须以 \"Controller\" 结尾\n* Models 文件夹    //包含表示应用程序模型的类。模型存有并操作应用程序的数据\n* Scripts 文件夹   //存储应用程序的 JavaScript 文件\n* Views 文件夹 //存有与应用程序的显示相关的 HTML 文件 \n ** Shared   //用于存储控制器间分享的视图\n ** [名称]   //每个控制器对应的一个文件夹\n ** _ViewStart.cshtml //其内代码被自动添加到由应用程序显示的所有视图。\n\n配置文件\n* Global.asax   //主要是web应用程序的全局设置文件，该文件包含响应 ASP.NET 或HTTP模块所引发的应用程序级别和会话级别事件的代码。Global.asax 文件驻留在 ASP.NET 应用程序的根目录中。运行时，分析 Global.asax 并将其编译到一个动态生成的 .NET Framework 类，该类是从HttpApplication基类派生的。配置 ASP.NET，以便自动拒绝对 Global.asax 文件的任何直接的 URL 请求；外部用户不能下载或查看其中的代码。Global.asax 文件是可选的。只在希望处理应用程序事件或会话事件时，才应创建它.\n* packages.config   //NuGet管理用的\n* Web.config\n~~~\n> 控制器位于 Controllers 文件夹，视图位于 Views 文件夹，模型位于 Models 文件夹。您不必在应用程序代码中使用文件夹名称\n\n# 控制器Controllers\n1. web 服务器通常会将进入的 URL 请求直接映射到服务器上的磁盘文件.某个 URL 请求（比如 \"http://www.abc.cn/index.asp\"）将映射到服务器根目录上的文件 \"index.asp\"。\n> MVC 框架的映射方式有所不同。\n2. MVC 将 URL 映射到方法。这些方法在类中被称为“控制器”。控制器负责处理进入的请求、处理输入、保存数据、并把响应发送回客户端。\n3. 在mvc中所有的controller类都必须使用\"Controller\"后缀来命名,并且对Action也有一定的要求：\n* 必须是一个public方法\n* 必须是实例方法\n* 没有标志NonActionAttribute特性的(NoAction)\n* 不能被重载\n* 必须返回ActionResult类型\n> 具体可返回数据类型请参考：https://blog.csdn.net/pasic/article/details/7110134\n\n# 模型Models\n模型包含所有应用程序逻辑（业务逻辑、验证逻辑、数据访问逻辑），除了纯视图和控制器逻辑。\n\n# HTML帮助器\nHTML 帮助器用于修改 HTML 输出。\n## HTML 链接\n通过 MVC，Html.ActionLink() 不连接到视图。它创建控制器操作（controller action）的连接。\n\n## HTML 表单元素\n* BeginForm()\n* EndForm()\n* TextArea()\n* TextBox()\n* CheckBox()\n* RadioButton()\n* ListBox()\n* DropDownList()\n* Hidden()\n* Password()\n\n~~~\n<%= Html.ValidationSummary(\"Create was unsuccessful. Please correct the errors and \ntry again.\") %>\n<% using (Html.BeginForm()){%>\n<p>\n<label for=\"FirstName\">First Name:</label>\n<%= Html.TextBox(\"FirstName\") %>\n<%= Html.ValidationMessage(\"FirstName\", \"*\") %>\n</p>\n<p>\n<label for=\"LastName\">Last Name:</label>\n<%= Html.TextBox(\"LastName\") %>\n<%= Html.ValidationMessage(\"LastName\", \"*\") %>\n</p>\n<p>\n<label for=\"Password\">Password:</label>\n<%= Html.Password(\"Password\") %>\n<%= Html.ValidationMessage(\"Password\", \"*\") %>\n</p>\n<p>\n<label for=\"Password\">Confirm Password:</label>\n<%= Html.Password(\"ConfirmPassword\") %>\n<%= Html.ValidationMessage(\"ConfirmPassword\", \"*\") %>\n</p>\n<p>\n<label for=\"Profile\">Profile:</label>\n<%= Html.TextArea(\"Profile\", new {cols=60, rows=10})%>\n</p>\n<p>\n<%= Html.CheckBox(\"ReceiveNewsletter\") %>\n<label for=\"ReceiveNewsletter\" style=\"display:inline\">Receive Newsletter?</label>\n</p>\n<p>\n<input type=\"submit\" value=\"Register\" />\n</p>\n<%}%>\n~~~\n\n# MVC参考手册\nhttp://www.w3school.com.cn/aspnet/mvc_reference.asp","slug":"C-开发-2018-10-05-ASP-NET-MVC使用","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrx9003zck8h4s6vn9z0","content":"<h1 id=\"申明\"><a class=\"markdownIt-Anchor\" href=\"#申明\"></a> 申明</h1>\n<p>文章内容记录自：<a href=\"http://www.w3school.com.cn/aspnet/mvc_intro.asp%EF%BC%8C\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/aspnet/mvc_intro.asp，</a> 为个人学习笔记记录。</p>\n<h1 id=\"mvc项目文件夹\"><a class=\"markdownIt-Anchor\" href=\"#mvc项目文件夹\"></a> MVC项目文件夹</h1>\n<p>典型的 <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> MVC web 应用程序拥有如下文件夹内容：<br>\n<img src=\"/pub-images/ASPMVC.png\" width=\"256\" height=\"256\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">应用程序信息</span><br><span class=\"line\">* Properties</span><br><span class=\"line\">* 引用</span><br><span class=\"line\"></span><br><span class=\"line\">应用程序文件夹</span><br><span class=\"line\">* App_Data 文件夹  //用于存储应用程序数据</span><br><span class=\"line\">* App_Start 文件夹 //含应用程序的配置逻辑文件</span><br><span class=\"line\"> ** BundleConfig.cs: 注册所使用的捆绑的CSS 和 JS文件。</span><br><span class=\"line\"> ** FilterConfig.cs: 注册外部/全局过滤器，这些过滤器可以被应用到每个Action和Controller中去.</span><br><span class=\"line\"> ** RouteConfig.cs: 配置MVC应用程序的系统路由路径。</span><br><span class=\"line\"> ** Startup.Auth.cs: 配置MVC应用程序的安全信息，包括Authentication和Authorization配置  </span><br><span class=\"line\">* Content 文件夹   //用于静态文件，比如样式表（CSS 文件）、图表和图像</span><br><span class=\"line\">* Controllers 文件夹   //包含负责处理用户输入和响应的控制器类,名称必须以 &quot;Controller&quot; 结尾</span><br><span class=\"line\">* Models 文件夹    //包含表示应用程序模型的类。模型存有并操作应用程序的数据</span><br><span class=\"line\">* Scripts 文件夹   //存储应用程序的 JavaScript 文件</span><br><span class=\"line\">* Views 文件夹 //存有与应用程序的显示相关的 HTML 文件 </span><br><span class=\"line\"> ** Shared   //用于存储控制器间分享的视图</span><br><span class=\"line\"> ** [名称]   //每个控制器对应的一个文件夹</span><br><span class=\"line\"> ** _ViewStart.cshtml //其内代码被自动添加到由应用程序显示的所有视图。</span><br><span class=\"line\"></span><br><span class=\"line\">配置文件</span><br><span class=\"line\">* Global.asax   //主要是web应用程序的全局设置文件，该文件包含响应 ASP.NET 或HTTP模块所引发的应用程序级别和会话级别事件的代码。Global.asax 文件驻留在 ASP.NET 应用程序的根目录中。运行时，分析 Global.asax 并将其编译到一个动态生成的 .NET Framework 类，该类是从HttpApplication基类派生的。配置 ASP.NET，以便自动拒绝对 Global.asax 文件的任何直接的 URL 请求；外部用户不能下载或查看其中的代码。Global.asax 文件是可选的。只在希望处理应用程序事件或会话事件时，才应创建它.</span><br><span class=\"line\">* packages.config   //NuGet管理用的</span><br><span class=\"line\">* Web.config</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>控制器位于 Controllers 文件夹，视图位于 Views 文件夹，模型位于 Models 文件夹。您不必在应用程序代码中使用文件夹名称</p>\n</blockquote>\n<h1 id=\"控制器controllers\"><a class=\"markdownIt-Anchor\" href=\"#控制器controllers\"></a> 控制器Controllers</h1>\n<ol>\n<li>web 服务器通常会将进入的 URL 请求直接映射到服务器上的磁盘文件.某个 URL 请求（比如 “<a href=\"http://www.abc.cn/index.asp\" target=\"_blank\" rel=\"noopener\">http://www.abc.cn/index.asp</a>”）将映射到服务器根目录上的文件 “index.asp”。</li>\n</ol>\n<blockquote>\n<p>MVC 框架的映射方式有所不同。</p>\n</blockquote>\n<ol start=\"2\">\n<li>MVC 将 URL 映射到方法。这些方法在类中被称为“控制器”。控制器负责处理进入的请求、处理输入、保存数据、并把响应发送回客户端。</li>\n<li>在mvc中所有的controller类都必须使用&quot;Controller&quot;后缀来命名,并且对Action也有一定的要求：</li>\n</ol>\n<ul>\n<li>必须是一个public方法</li>\n<li>必须是实例方法</li>\n<li>没有标志NonActionAttribute特性的(NoAction)</li>\n<li>不能被重载</li>\n<li>必须返回ActionResult类型</li>\n</ul>\n<blockquote>\n<p>具体可返回数据类型请参考：<a href=\"https://blog.csdn.net/pasic/article/details/7110134\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/pasic/article/details/7110134</a></p>\n</blockquote>\n<h1 id=\"模型models\"><a class=\"markdownIt-Anchor\" href=\"#模型models\"></a> 模型Models</h1>\n<p>模型包含所有应用程序逻辑（业务逻辑、验证逻辑、数据访问逻辑），除了纯视图和控制器逻辑。</p>\n<h1 id=\"html帮助器\"><a class=\"markdownIt-Anchor\" href=\"#html帮助器\"></a> HTML帮助器</h1>\n<p>HTML 帮助器用于修改 HTML 输出。</p>\n<h2 id=\"html-链接\"><a class=\"markdownIt-Anchor\" href=\"#html-链接\"></a> HTML 链接</h2>\n<p>通过 MVC，Html.ActionLink() 不连接到视图。它创建控制器操作（controller action）的连接。</p>\n<h2 id=\"html-表单元素\"><a class=\"markdownIt-Anchor\" href=\"#html-表单元素\"></a> HTML 表单元素</h2>\n<ul>\n<li>BeginForm()</li>\n<li>EndForm()</li>\n<li>TextArea()</li>\n<li>TextBox()</li>\n<li>CheckBox()</li>\n<li>RadioButton()</li>\n<li>ListBox()</li>\n<li>DropDownList()</li>\n<li>Hidden()</li>\n<li>Password()</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%= Html.ValidationSummary(&quot;Create was unsuccessful. Please correct the errors and </span><br><span class=\"line\">try again.&quot;) %&gt;</span><br><span class=\"line\">&lt;% using (Html.BeginForm())&#123;%&gt;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">&lt;label for=&quot;FirstName&quot;&gt;First Name:&lt;/label&gt;</span><br><span class=\"line\">&lt;%= Html.TextBox(&quot;FirstName&quot;) %&gt;</span><br><span class=\"line\">&lt;%= Html.ValidationMessage(&quot;FirstName&quot;, &quot;*&quot;) %&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">&lt;label for=&quot;LastName&quot;&gt;Last Name:&lt;/label&gt;</span><br><span class=\"line\">&lt;%= Html.TextBox(&quot;LastName&quot;) %&gt;</span><br><span class=\"line\">&lt;%= Html.ValidationMessage(&quot;LastName&quot;, &quot;*&quot;) %&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">&lt;label for=&quot;Password&quot;&gt;Password:&lt;/label&gt;</span><br><span class=\"line\">&lt;%= Html.Password(&quot;Password&quot;) %&gt;</span><br><span class=\"line\">&lt;%= Html.ValidationMessage(&quot;Password&quot;, &quot;*&quot;) %&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">&lt;label for=&quot;Password&quot;&gt;Confirm Password:&lt;/label&gt;</span><br><span class=\"line\">&lt;%= Html.Password(&quot;ConfirmPassword&quot;) %&gt;</span><br><span class=\"line\">&lt;%= Html.ValidationMessage(&quot;ConfirmPassword&quot;, &quot;*&quot;) %&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">&lt;label for=&quot;Profile&quot;&gt;Profile:&lt;/label&gt;</span><br><span class=\"line\">&lt;%= Html.TextArea(&quot;Profile&quot;, new &#123;cols=60, rows=10&#125;)%&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">&lt;%= Html.CheckBox(&quot;ReceiveNewsletter&quot;) %&gt;</span><br><span class=\"line\">&lt;label for=&quot;ReceiveNewsletter&quot; style=&quot;display:inline&quot;&gt;Receive Newsletter?&lt;/label&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">&lt;input type=&quot;submit&quot; value=&quot;Register&quot; /&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"mvc参考手册\"><a class=\"markdownIt-Anchor\" href=\"#mvc参考手册\"></a> MVC参考手册</h1>\n<p><a href=\"http://www.w3school.com.cn/aspnet/mvc_reference.asp\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/aspnet/mvc_reference.asp</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"申明\"><a class=\"markdownIt-Anchor\" href=\"#申明\"></a> 申明</h1>\n<p>文章内容记录自：<a href=\"http://www.w3school.com.cn/aspnet/mvc_intro.asp%EF%BC%8C\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/aspnet/mvc_intro.asp，</a> 为个人学习笔记记录。</p>\n<h1 id=\"mvc项目文件夹\"><a class=\"markdownIt-Anchor\" href=\"#mvc项目文件夹\"></a> MVC项目文件夹</h1>\n<p>典型的 <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> MVC web 应用程序拥有如下文件夹内容：<br>\n<img src=\"/pub-images/ASPMVC.png\" width=\"256\" height=\"256\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">应用程序信息</span><br><span class=\"line\">* Properties</span><br><span class=\"line\">* 引用</span><br><span class=\"line\"></span><br><span class=\"line\">应用程序文件夹</span><br><span class=\"line\">* App_Data 文件夹  //用于存储应用程序数据</span><br><span class=\"line\">* App_Start 文件夹 //含应用程序的配置逻辑文件</span><br><span class=\"line\"> ** BundleConfig.cs: 注册所使用的捆绑的CSS 和 JS文件。</span><br><span class=\"line\"> ** FilterConfig.cs: 注册外部/全局过滤器，这些过滤器可以被应用到每个Action和Controller中去.</span><br><span class=\"line\"> ** RouteConfig.cs: 配置MVC应用程序的系统路由路径。</span><br><span class=\"line\"> ** Startup.Auth.cs: 配置MVC应用程序的安全信息，包括Authentication和Authorization配置  </span><br><span class=\"line\">* Content 文件夹   //用于静态文件，比如样式表（CSS 文件）、图表和图像</span><br><span class=\"line\">* Controllers 文件夹   //包含负责处理用户输入和响应的控制器类,名称必须以 &quot;Controller&quot; 结尾</span><br><span class=\"line\">* Models 文件夹    //包含表示应用程序模型的类。模型存有并操作应用程序的数据</span><br><span class=\"line\">* Scripts 文件夹   //存储应用程序的 JavaScript 文件</span><br><span class=\"line\">* Views 文件夹 //存有与应用程序的显示相关的 HTML 文件 </span><br><span class=\"line\"> ** Shared   //用于存储控制器间分享的视图</span><br><span class=\"line\"> ** [名称]   //每个控制器对应的一个文件夹</span><br><span class=\"line\"> ** _ViewStart.cshtml //其内代码被自动添加到由应用程序显示的所有视图。</span><br><span class=\"line\"></span><br><span class=\"line\">配置文件</span><br><span class=\"line\">* Global.asax   //主要是web应用程序的全局设置文件，该文件包含响应 ASP.NET 或HTTP模块所引发的应用程序级别和会话级别事件的代码。Global.asax 文件驻留在 ASP.NET 应用程序的根目录中。运行时，分析 Global.asax 并将其编译到一个动态生成的 .NET Framework 类，该类是从HttpApplication基类派生的。配置 ASP.NET，以便自动拒绝对 Global.asax 文件的任何直接的 URL 请求；外部用户不能下载或查看其中的代码。Global.asax 文件是可选的。只在希望处理应用程序事件或会话事件时，才应创建它.</span><br><span class=\"line\">* packages.config   //NuGet管理用的</span><br><span class=\"line\">* Web.config</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>控制器位于 Controllers 文件夹，视图位于 Views 文件夹，模型位于 Models 文件夹。您不必在应用程序代码中使用文件夹名称</p>\n</blockquote>\n<h1 id=\"控制器controllers\"><a class=\"markdownIt-Anchor\" href=\"#控制器controllers\"></a> 控制器Controllers</h1>\n<ol>\n<li>web 服务器通常会将进入的 URL 请求直接映射到服务器上的磁盘文件.某个 URL 请求（比如 “<a href=\"http://www.abc.cn/index.asp\" target=\"_blank\" rel=\"noopener\">http://www.abc.cn/index.asp</a>”）将映射到服务器根目录上的文件 “index.asp”。</li>\n</ol>\n<blockquote>\n<p>MVC 框架的映射方式有所不同。</p>\n</blockquote>\n<ol start=\"2\">\n<li>MVC 将 URL 映射到方法。这些方法在类中被称为“控制器”。控制器负责处理进入的请求、处理输入、保存数据、并把响应发送回客户端。</li>\n<li>在mvc中所有的controller类都必须使用&quot;Controller&quot;后缀来命名,并且对Action也有一定的要求：</li>\n</ol>\n<ul>\n<li>必须是一个public方法</li>\n<li>必须是实例方法</li>\n<li>没有标志NonActionAttribute特性的(NoAction)</li>\n<li>不能被重载</li>\n<li>必须返回ActionResult类型</li>\n</ul>\n<blockquote>\n<p>具体可返回数据类型请参考：<a href=\"https://blog.csdn.net/pasic/article/details/7110134\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/pasic/article/details/7110134</a></p>\n</blockquote>\n<h1 id=\"模型models\"><a class=\"markdownIt-Anchor\" href=\"#模型models\"></a> 模型Models</h1>\n<p>模型包含所有应用程序逻辑（业务逻辑、验证逻辑、数据访问逻辑），除了纯视图和控制器逻辑。</p>\n<h1 id=\"html帮助器\"><a class=\"markdownIt-Anchor\" href=\"#html帮助器\"></a> HTML帮助器</h1>\n<p>HTML 帮助器用于修改 HTML 输出。</p>\n<h2 id=\"html-链接\"><a class=\"markdownIt-Anchor\" href=\"#html-链接\"></a> HTML 链接</h2>\n<p>通过 MVC，Html.ActionLink() 不连接到视图。它创建控制器操作（controller action）的连接。</p>\n<h2 id=\"html-表单元素\"><a class=\"markdownIt-Anchor\" href=\"#html-表单元素\"></a> HTML 表单元素</h2>\n<ul>\n<li>BeginForm()</li>\n<li>EndForm()</li>\n<li>TextArea()</li>\n<li>TextBox()</li>\n<li>CheckBox()</li>\n<li>RadioButton()</li>\n<li>ListBox()</li>\n<li>DropDownList()</li>\n<li>Hidden()</li>\n<li>Password()</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%= Html.ValidationSummary(&quot;Create was unsuccessful. Please correct the errors and </span><br><span class=\"line\">try again.&quot;) %&gt;</span><br><span class=\"line\">&lt;% using (Html.BeginForm())&#123;%&gt;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">&lt;label for=&quot;FirstName&quot;&gt;First Name:&lt;/label&gt;</span><br><span class=\"line\">&lt;%= Html.TextBox(&quot;FirstName&quot;) %&gt;</span><br><span class=\"line\">&lt;%= Html.ValidationMessage(&quot;FirstName&quot;, &quot;*&quot;) %&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">&lt;label for=&quot;LastName&quot;&gt;Last Name:&lt;/label&gt;</span><br><span class=\"line\">&lt;%= Html.TextBox(&quot;LastName&quot;) %&gt;</span><br><span class=\"line\">&lt;%= Html.ValidationMessage(&quot;LastName&quot;, &quot;*&quot;) %&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">&lt;label for=&quot;Password&quot;&gt;Password:&lt;/label&gt;</span><br><span class=\"line\">&lt;%= Html.Password(&quot;Password&quot;) %&gt;</span><br><span class=\"line\">&lt;%= Html.ValidationMessage(&quot;Password&quot;, &quot;*&quot;) %&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">&lt;label for=&quot;Password&quot;&gt;Confirm Password:&lt;/label&gt;</span><br><span class=\"line\">&lt;%= Html.Password(&quot;ConfirmPassword&quot;) %&gt;</span><br><span class=\"line\">&lt;%= Html.ValidationMessage(&quot;ConfirmPassword&quot;, &quot;*&quot;) %&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">&lt;label for=&quot;Profile&quot;&gt;Profile:&lt;/label&gt;</span><br><span class=\"line\">&lt;%= Html.TextArea(&quot;Profile&quot;, new &#123;cols=60, rows=10&#125;)%&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">&lt;%= Html.CheckBox(&quot;ReceiveNewsletter&quot;) %&gt;</span><br><span class=\"line\">&lt;label for=&quot;ReceiveNewsletter&quot; style=&quot;display:inline&quot;&gt;Receive Newsletter?&lt;/label&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">&lt;input type=&quot;submit&quot; value=&quot;Register&quot; /&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"mvc参考手册\"><a class=\"markdownIt-Anchor\" href=\"#mvc参考手册\"></a> MVC参考手册</h1>\n<p><a href=\"http://www.w3school.com.cn/aspnet/mvc_reference.asp\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/aspnet/mvc_reference.asp</a></p>\n"},{"title":"ASP.NET简介","copyright":true,"comments":1,"toc":true,"date":"2018-10-05T02:22:55.000Z","password":null,"_content":"\n# 申明\n文章内容记录自：http://www.w3school.com.cn/aspnet/index.asp， 为个人学习笔记记录。\n\n# 简介\nASP.NET 是一个开发框架，用于通过 HTML、CSS、JavaScript 以及服务器脚本来构建网页和网站。\nASP.NET 是新一代的 ASP。它无法兼容经典 ASP，但 ASP.NET 可以引用 ASP。\n当浏览器请求 ASP.NET 文件时，ASP.NET 引擎读取该文件，编译并执行文件中的脚本，然后以纯 HTML 向浏览器返回结果。\nASP.NET 支持三种开发模式／服务器技术：\n* Web Pages：单页面模型\n* MVC：模型视图控制器\n* Web Forms：事件驱动模型\n\n\n# ASP.NET 文件扩展名\n* ASP 文件的文件扩展名是 .asp\n* ASP.NET 文件的文件扩展名是 .aspx\n* ASP.NET 文件使用 C# 语法的文件扩展名是 .cshtml\n* ASP.NET 文件使用 Razor VB 语法的文件扩展名是 .vbhtml\n\n# 版本区别\n* 2009年发行ASP.NET MVC 1.0版\n* 2010年发行ASP.NET MVC 2.0版，VS2010\n* 2011年发行ASP.NET MVC 3.0版+EF4，需要.Net4.0支持，VS2011\n* 2012年发行ASP.NET MVC 4.0版+EF5，需要.Net4.0支持，VS2012\n* 2013年发行ASP.NET MVC 5.0版+EF6，需要.Net4.5支持，VS2013\n* 2015年发行ASP.NET MVC 6.0版+EF7，需要.Net5.0支持，VS2015\n\n* ASP.NET 5.0　　　　　　将改名为　　ASP.NET Core 1.0\n* ASP.NET MVC 6　　　　 将改名为　　ASP.NET MVC Core 1.0\n* Entity Framework 7.0    将改名为　　Entity Framework Core 1.0\n\n* .NET新的跨平台版本将命名为.NET Core 1.0\n\n# 推荐文章\nWebForms vs. MVC： http://www.cnblogs.com/heyuquan/p/webForms-vs-mvc.html\n\n","source":"_posts/C#开发/2018-10-05-ASP-NET.md","raw":"---\ntitle: ASP.NET简介\ntags:\n  - ASP.NET\n  - C#\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-05 10:22:55\ncategories: C#\npassword:\n---\n\n# 申明\n文章内容记录自：http://www.w3school.com.cn/aspnet/index.asp， 为个人学习笔记记录。\n\n# 简介\nASP.NET 是一个开发框架，用于通过 HTML、CSS、JavaScript 以及服务器脚本来构建网页和网站。\nASP.NET 是新一代的 ASP。它无法兼容经典 ASP，但 ASP.NET 可以引用 ASP。\n当浏览器请求 ASP.NET 文件时，ASP.NET 引擎读取该文件，编译并执行文件中的脚本，然后以纯 HTML 向浏览器返回结果。\nASP.NET 支持三种开发模式／服务器技术：\n* Web Pages：单页面模型\n* MVC：模型视图控制器\n* Web Forms：事件驱动模型\n\n\n# ASP.NET 文件扩展名\n* ASP 文件的文件扩展名是 .asp\n* ASP.NET 文件的文件扩展名是 .aspx\n* ASP.NET 文件使用 C# 语法的文件扩展名是 .cshtml\n* ASP.NET 文件使用 Razor VB 语法的文件扩展名是 .vbhtml\n\n# 版本区别\n* 2009年发行ASP.NET MVC 1.0版\n* 2010年发行ASP.NET MVC 2.0版，VS2010\n* 2011年发行ASP.NET MVC 3.0版+EF4，需要.Net4.0支持，VS2011\n* 2012年发行ASP.NET MVC 4.0版+EF5，需要.Net4.0支持，VS2012\n* 2013年发行ASP.NET MVC 5.0版+EF6，需要.Net4.5支持，VS2013\n* 2015年发行ASP.NET MVC 6.0版+EF7，需要.Net5.0支持，VS2015\n\n* ASP.NET 5.0　　　　　　将改名为　　ASP.NET Core 1.0\n* ASP.NET MVC 6　　　　 将改名为　　ASP.NET MVC Core 1.0\n* Entity Framework 7.0    将改名为　　Entity Framework Core 1.0\n\n* .NET新的跨平台版本将命名为.NET Core 1.0\n\n# 推荐文章\nWebForms vs. MVC： http://www.cnblogs.com/heyuquan/p/webForms-vs-mvc.html\n\n","slug":"C-开发-2018-10-05-ASP-NET","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrxa0041ck8hvteanw3e","content":"<h1 id=\"申明\"><a class=\"markdownIt-Anchor\" href=\"#申明\"></a> 申明</h1>\n<p>文章内容记录自：<a href=\"http://www.w3school.com.cn/aspnet/index.asp%EF%BC%8C\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/aspnet/index.asp，</a> 为个人学习笔记记录。</p>\n<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<p><a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 是一个开发框架，用于通过 HTML、CSS、JavaScript 以及服务器脚本来构建网页和网站。<br>\n<a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 是新一代的 ASP。它无法兼容经典 ASP，但 <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 可以引用 ASP。<br>\n当浏览器请求 <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 文件时，<a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 引擎读取该文件，编译并执行文件中的脚本，然后以纯 HTML 向浏览器返回结果。<br>\n<a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 支持三种开发模式／服务器技术：</p>\n<ul>\n<li>Web Pages：单页面模型</li>\n<li>MVC：模型视图控制器</li>\n<li>Web Forms：事件驱动模型</li>\n</ul>\n<h1 id=\"aspnet\"><a class=\"markdownIt-Anchor\" href=\"#aspnet\"></a> <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 文件扩展名</h1>\n<ul>\n<li>ASP 文件的文件扩展名是 .asp</li>\n<li><a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 文件的文件扩展名是 .aspx</li>\n<li><a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 文件使用 C# 语法的文件扩展名是 .cshtml</li>\n<li><a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 文件使用 Razor VB 语法的文件扩展名是 .vbhtml</li>\n</ul>\n<h1 id=\"版本区别\"><a class=\"markdownIt-Anchor\" href=\"#版本区别\"></a> 版本区别</h1>\n<ul>\n<li>\n<p><a href=\"http://xn--2009ASP-lk3lq40fvu9g.NET\" target=\"_blank\" rel=\"noopener\">2009年发行ASP.NET</a> MVC 1.0版</p>\n</li>\n<li>\n<p><a href=\"http://xn--2010ASP-lk3lq40fvu9g.NET\" target=\"_blank\" rel=\"noopener\">2010年发行ASP.NET</a> MVC 2.0版，VS2010</p>\n</li>\n<li>\n<p><a href=\"http://xn--2011ASP-lk3lq40fvu9g.NET\" target=\"_blank\" rel=\"noopener\">2011年发行ASP.NET</a> MVC 3.0版+EF4，需要.Net4.0支持，VS2011</p>\n</li>\n<li>\n<p><a href=\"http://xn--2012ASP-lk3lq40fvu9g.NET\" target=\"_blank\" rel=\"noopener\">2012年发行ASP.NET</a> MVC 4.0版+EF5，需要.Net4.0支持，VS2012</p>\n</li>\n<li>\n<p><a href=\"http://xn--2013ASP-lk3lq40fvu9g.NET\" target=\"_blank\" rel=\"noopener\">2013年发行ASP.NET</a> MVC 5.0版+EF6，需要.Net4.5支持，VS2013</p>\n</li>\n<li>\n<p><a href=\"http://xn--2015ASP-lk3lq40fvu9g.NET\" target=\"_blank\" rel=\"noopener\">2015年发行ASP.NET</a> MVC 6.0版+EF7，需要.Net5.0支持，VS2015</p>\n</li>\n<li>\n<p><a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 5.0　　　　　　将改名为　　<a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> Core 1.0</p>\n</li>\n<li>\n<p><a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> MVC 6　　　　 将改名为　　<a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> MVC Core 1.0</p>\n</li>\n<li>\n<p>Entity Framework 7.0    将改名为　　Entity Framework Core 1.0</p>\n</li>\n<li>\n<p>.NET新的跨平台版本将命名为.NET Core 1.0</p>\n</li>\n</ul>\n<h1 id=\"推荐文章\"><a class=\"markdownIt-Anchor\" href=\"#推荐文章\"></a> 推荐文章</h1>\n<p>WebForms vs. MVC： <a href=\"http://www.cnblogs.com/heyuquan/p/webForms-vs-mvc.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/heyuquan/p/webForms-vs-mvc.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"申明\"><a class=\"markdownIt-Anchor\" href=\"#申明\"></a> 申明</h1>\n<p>文章内容记录自：<a href=\"http://www.w3school.com.cn/aspnet/index.asp%EF%BC%8C\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/aspnet/index.asp，</a> 为个人学习笔记记录。</p>\n<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<p><a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 是一个开发框架，用于通过 HTML、CSS、JavaScript 以及服务器脚本来构建网页和网站。<br>\n<a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 是新一代的 ASP。它无法兼容经典 ASP，但 <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 可以引用 ASP。<br>\n当浏览器请求 <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 文件时，<a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 引擎读取该文件，编译并执行文件中的脚本，然后以纯 HTML 向浏览器返回结果。<br>\n<a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 支持三种开发模式／服务器技术：</p>\n<ul>\n<li>Web Pages：单页面模型</li>\n<li>MVC：模型视图控制器</li>\n<li>Web Forms：事件驱动模型</li>\n</ul>\n<h1 id=\"aspnet\"><a class=\"markdownIt-Anchor\" href=\"#aspnet\"></a> <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 文件扩展名</h1>\n<ul>\n<li>ASP 文件的文件扩展名是 .asp</li>\n<li><a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 文件的文件扩展名是 .aspx</li>\n<li><a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 文件使用 C# 语法的文件扩展名是 .cshtml</li>\n<li><a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 文件使用 Razor VB 语法的文件扩展名是 .vbhtml</li>\n</ul>\n<h1 id=\"版本区别\"><a class=\"markdownIt-Anchor\" href=\"#版本区别\"></a> 版本区别</h1>\n<ul>\n<li>\n<p><a href=\"http://xn--2009ASP-lk3lq40fvu9g.NET\" target=\"_blank\" rel=\"noopener\">2009年发行ASP.NET</a> MVC 1.0版</p>\n</li>\n<li>\n<p><a href=\"http://xn--2010ASP-lk3lq40fvu9g.NET\" target=\"_blank\" rel=\"noopener\">2010年发行ASP.NET</a> MVC 2.0版，VS2010</p>\n</li>\n<li>\n<p><a href=\"http://xn--2011ASP-lk3lq40fvu9g.NET\" target=\"_blank\" rel=\"noopener\">2011年发行ASP.NET</a> MVC 3.0版+EF4，需要.Net4.0支持，VS2011</p>\n</li>\n<li>\n<p><a href=\"http://xn--2012ASP-lk3lq40fvu9g.NET\" target=\"_blank\" rel=\"noopener\">2012年发行ASP.NET</a> MVC 4.0版+EF5，需要.Net4.0支持，VS2012</p>\n</li>\n<li>\n<p><a href=\"http://xn--2013ASP-lk3lq40fvu9g.NET\" target=\"_blank\" rel=\"noopener\">2013年发行ASP.NET</a> MVC 5.0版+EF6，需要.Net4.5支持，VS2013</p>\n</li>\n<li>\n<p><a href=\"http://xn--2015ASP-lk3lq40fvu9g.NET\" target=\"_blank\" rel=\"noopener\">2015年发行ASP.NET</a> MVC 6.0版+EF7，需要.Net5.0支持，VS2015</p>\n</li>\n<li>\n<p><a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 5.0　　　　　　将改名为　　<a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> Core 1.0</p>\n</li>\n<li>\n<p><a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> MVC 6　　　　 将改名为　　<a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> MVC Core 1.0</p>\n</li>\n<li>\n<p>Entity Framework 7.0    将改名为　　Entity Framework Core 1.0</p>\n</li>\n<li>\n<p>.NET新的跨平台版本将命名为.NET Core 1.0</p>\n</li>\n</ul>\n<h1 id=\"推荐文章\"><a class=\"markdownIt-Anchor\" href=\"#推荐文章\"></a> 推荐文章</h1>\n<p>WebForms vs. MVC： <a href=\"http://www.cnblogs.com/heyuquan/p/webForms-vs-mvc.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/heyuquan/p/webForms-vs-mvc.html</a></p>\n"},{"title":"ASP.NET WebForms学习笔记","copyright":true,"comments":1,"toc":true,"date":"2018-10-05T14:56:59.000Z","password":null,"_content":"# 申明\n文章内容记录自：http://www.w3school.com.cn/aspnet/aspnet_intro.asp， 为个人学习笔记记录。\n\n# 说明\nWebForms可类比WinForm开发，通过可视化拖动的方式快速完成Web页面开发.","source":"_posts/C#开发/2018-10-05-ASP-NET-WebForms使用.md","raw":"---\ntitle: ASP.NET WebForms学习笔记\ntags:\n  - ASP.NET\n  - WebForms\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-05 22:56:59\ncategories: C#\npassword:\n---\n# 申明\n文章内容记录自：http://www.w3school.com.cn/aspnet/aspnet_intro.asp， 为个人学习笔记记录。\n\n# 说明\nWebForms可类比WinForm开发，通过可视化拖动的方式快速完成Web页面开发.","slug":"C-开发-2018-10-05-ASP-NET-WebForms使用","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrxc0042ck8hreyhivgd","content":"<h1 id=\"申明\"><a class=\"markdownIt-Anchor\" href=\"#申明\"></a> 申明</h1>\n<p>文章内容记录自：<a href=\"http://www.w3school.com.cn/aspnet/aspnet_intro.asp%EF%BC%8C\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/aspnet/aspnet_intro.asp，</a> 为个人学习笔记记录。</p>\n<h1 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\"></a> 说明</h1>\n<p>WebForms可类比WinForm开发，通过可视化拖动的方式快速完成Web页面开发.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"申明\"><a class=\"markdownIt-Anchor\" href=\"#申明\"></a> 申明</h1>\n<p>文章内容记录自：<a href=\"http://www.w3school.com.cn/aspnet/aspnet_intro.asp%EF%BC%8C\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/aspnet/aspnet_intro.asp，</a> 为个人学习笔记记录。</p>\n<h1 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\"></a> 说明</h1>\n<p>WebForms可类比WinForm开发，通过可视化拖动的方式快速完成Web页面开发.</p>\n"},{"title":"Razor使用","copyright":true,"comments":1,"toc":true,"date":"2018-10-05T11:58:54.000Z","password":null,"_content":"\n# 申明\n文章内容记录自：http://www.w3school.com.cn/aspnet/razor_intro.asp， 为个人学习笔记记录。\n\n# 说明\nRazor 是一种允许您向网页中嵌入基于服务器的代码的标记语法。Razor 基于 ASP.NET，它为 web 应用程序的创建而设计。\n> 当网页被写入浏览器时，基于服务器的代码能够创建动态内容。在网页加载时，服务器在向浏览器返回页面之前，会执行页面内的基于服务器代码。由于是在服务器上运行，这种代码能执行复杂的任务，比如访问数据库。\n\n# C# 的主要 Razor 语法规则\n* Razor 代码块由 @{ ... } 包围\n* 行内表达式（变量和函数）以 @ 开始\n* 代码语句以分号结束\n* 变量通过 var 关键词进行声明\n* 字符串用引用来包围\n* C# 代码对大小写敏感\n* C# 文件的扩展名是 .cshtml\n\n# 编程\nRazor编程支持变量、循环、逻辑。\n\n## 变量\n~~~\nvar myString = '103';\nint counter = 103; \n\nif (myString.IsInt())\n{\n    myInt=myString.AsInt();\n}\n~~~\n## 循环\n~~~\n<body>\n@for(var i = 10; i < 21; i++)\n    {<p>Line @i</p>}\n</body>\n~~~\n\n~~~\n<body>\n<ul>\n@foreach (var x in Request.ServerVariables)\n    {<li>@x</li>}\n</ul>\n</body>\n~~~\n\n~~~\n<body>\n@{\nvar i = 0;\nwhile (i < 5)\n    {\n    i += 1;\n    <p>Line #@i</p>\n    }\n}\n</body>\n~~~\n\n~~~\n@{var price=25;}\n<html>\n<body>\n@if (price>=30)\n  {\n  <p>The price is high.</p>\n  }\nelse if (price>20 && price<30) \n  {\n  <p>The price is OK.</p>\n  }\nelse\n  {\n  <p>The price is low.</p>\n  }    \n</body>\n</html>\n~~~\n\n~~~\n@{\nvar weekday=DateTime.Now.DayOfWeek;\nvar day=weekday.ToString();\nvar message=\"\";\n}\n<html>\n<body>\n@switch(day)\n{\ncase \"Monday\":\n    message=\"This is the first weekday.\";\n    break;\ncase \"Thursday\":\n    message=\"Only one day before weekend.\";\n    break;\ncase \"Friday\":\n    message=\"Tomorrow is weekend!\";\n    break;\ndefault:\n    message=\"Today is \" + day;\n    break;\n}\n<p>@message</p>\n</body>\n</html>\n~~~","source":"_posts/C#开发/2018-10-05-Razor使用.md","raw":"---\ntitle: Razor使用\ntags:\n  - ASP.NET\n  - Razor\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-05 19:58:54\ncategories: C#\npassword:\n---\n\n# 申明\n文章内容记录自：http://www.w3school.com.cn/aspnet/razor_intro.asp， 为个人学习笔记记录。\n\n# 说明\nRazor 是一种允许您向网页中嵌入基于服务器的代码的标记语法。Razor 基于 ASP.NET，它为 web 应用程序的创建而设计。\n> 当网页被写入浏览器时，基于服务器的代码能够创建动态内容。在网页加载时，服务器在向浏览器返回页面之前，会执行页面内的基于服务器代码。由于是在服务器上运行，这种代码能执行复杂的任务，比如访问数据库。\n\n# C# 的主要 Razor 语法规则\n* Razor 代码块由 @{ ... } 包围\n* 行内表达式（变量和函数）以 @ 开始\n* 代码语句以分号结束\n* 变量通过 var 关键词进行声明\n* 字符串用引用来包围\n* C# 代码对大小写敏感\n* C# 文件的扩展名是 .cshtml\n\n# 编程\nRazor编程支持变量、循环、逻辑。\n\n## 变量\n~~~\nvar myString = '103';\nint counter = 103; \n\nif (myString.IsInt())\n{\n    myInt=myString.AsInt();\n}\n~~~\n## 循环\n~~~\n<body>\n@for(var i = 10; i < 21; i++)\n    {<p>Line @i</p>}\n</body>\n~~~\n\n~~~\n<body>\n<ul>\n@foreach (var x in Request.ServerVariables)\n    {<li>@x</li>}\n</ul>\n</body>\n~~~\n\n~~~\n<body>\n@{\nvar i = 0;\nwhile (i < 5)\n    {\n    i += 1;\n    <p>Line #@i</p>\n    }\n}\n</body>\n~~~\n\n~~~\n@{var price=25;}\n<html>\n<body>\n@if (price>=30)\n  {\n  <p>The price is high.</p>\n  }\nelse if (price>20 && price<30) \n  {\n  <p>The price is OK.</p>\n  }\nelse\n  {\n  <p>The price is low.</p>\n  }    \n</body>\n</html>\n~~~\n\n~~~\n@{\nvar weekday=DateTime.Now.DayOfWeek;\nvar day=weekday.ToString();\nvar message=\"\";\n}\n<html>\n<body>\n@switch(day)\n{\ncase \"Monday\":\n    message=\"This is the first weekday.\";\n    break;\ncase \"Thursday\":\n    message=\"Only one day before weekend.\";\n    break;\ncase \"Friday\":\n    message=\"Tomorrow is weekend!\";\n    break;\ndefault:\n    message=\"Today is \" + day;\n    break;\n}\n<p>@message</p>\n</body>\n</html>\n~~~","slug":"C-开发-2018-10-05-Razor使用","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrxd0044ck8hyehjmlwu","content":"<h1 id=\"申明\"><a class=\"markdownIt-Anchor\" href=\"#申明\"></a> 申明</h1>\n<p>文章内容记录自：<a href=\"http://www.w3school.com.cn/aspnet/razor_intro.asp%EF%BC%8C\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/aspnet/razor_intro.asp，</a> 为个人学习笔记记录。</p>\n<h1 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\"></a> 说明</h1>\n<p>Razor 是一种允许您向网页中嵌入基于服务器的代码的标记语法。Razor 基于 <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a>，它为 web 应用程序的创建而设计。</p>\n<blockquote>\n<p>当网页被写入浏览器时，基于服务器的代码能够创建动态内容。在网页加载时，服务器在向浏览器返回页面之前，会执行页面内的基于服务器代码。由于是在服务器上运行，这种代码能执行复杂的任务，比如访问数据库。</p>\n</blockquote>\n<h1 id=\"c-的主要-razor-语法规则\"><a class=\"markdownIt-Anchor\" href=\"#c-的主要-razor-语法规则\"></a> C# 的主要 Razor 语法规则</h1>\n<ul>\n<li>Razor 代码块由 @{ … } 包围</li>\n<li>行内表达式（变量和函数）以 @ 开始</li>\n<li>代码语句以分号结束</li>\n<li>变量通过 var 关键词进行声明</li>\n<li>字符串用引用来包围</li>\n<li>C# 代码对大小写敏感</li>\n<li>C# 文件的扩展名是 .cshtml</li>\n</ul>\n<h1 id=\"编程\"><a class=\"markdownIt-Anchor\" href=\"#编程\"></a> 编程</h1>\n<p>Razor编程支持变量、循环、逻辑。</p>\n<h2 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\"></a> 变量</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myString = &apos;103&apos;;</span><br><span class=\"line\">int counter = 103; </span><br><span class=\"line\"></span><br><span class=\"line\">if (myString.IsInt())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    myInt=myString.AsInt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"循环\"><a class=\"markdownIt-Anchor\" href=\"#循环\"></a> 循环</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">@for(var i = 10; i &lt; 21; i++)</span><br><span class=\"line\">    &#123;&lt;p&gt;Line @i&lt;/p&gt;&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">@foreach (var x in Request.ServerVariables)</span><br><span class=\"line\">    &#123;&lt;li&gt;@x&lt;/li&gt;&#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">@&#123;</span><br><span class=\"line\">var i = 0;</span><br><span class=\"line\">while (i &lt; 5)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    i += 1;</span><br><span class=\"line\">    &lt;p&gt;Line #@i&lt;/p&gt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&#123;var price=25;&#125;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">@if (price&gt;=30)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &lt;p&gt;The price is high.&lt;/p&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">else if (price&gt;20 &amp;&amp; price&lt;30) </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &lt;p&gt;The price is OK.&lt;/p&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &lt;p&gt;The price is low.&lt;/p&gt;</span><br><span class=\"line\">  &#125;    </span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&#123;</span><br><span class=\"line\">var weekday=DateTime.Now.DayOfWeek;</span><br><span class=\"line\">var day=weekday.ToString();</span><br><span class=\"line\">var message=&quot;&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">@switch(day)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">case &quot;Monday&quot;:</span><br><span class=\"line\">    message=&quot;This is the first weekday.&quot;;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">case &quot;Thursday&quot;:</span><br><span class=\"line\">    message=&quot;Only one day before weekend.&quot;;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">case &quot;Friday&quot;:</span><br><span class=\"line\">    message=&quot;Tomorrow is weekend!&quot;;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">default:</span><br><span class=\"line\">    message=&quot;Today is &quot; + day;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;p&gt;@message&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"申明\"><a class=\"markdownIt-Anchor\" href=\"#申明\"></a> 申明</h1>\n<p>文章内容记录自：<a href=\"http://www.w3school.com.cn/aspnet/razor_intro.asp%EF%BC%8C\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/aspnet/razor_intro.asp，</a> 为个人学习笔记记录。</p>\n<h1 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\"></a> 说明</h1>\n<p>Razor 是一种允许您向网页中嵌入基于服务器的代码的标记语法。Razor 基于 <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a>，它为 web 应用程序的创建而设计。</p>\n<blockquote>\n<p>当网页被写入浏览器时，基于服务器的代码能够创建动态内容。在网页加载时，服务器在向浏览器返回页面之前，会执行页面内的基于服务器代码。由于是在服务器上运行，这种代码能执行复杂的任务，比如访问数据库。</p>\n</blockquote>\n<h1 id=\"c-的主要-razor-语法规则\"><a class=\"markdownIt-Anchor\" href=\"#c-的主要-razor-语法规则\"></a> C# 的主要 Razor 语法规则</h1>\n<ul>\n<li>Razor 代码块由 @{ … } 包围</li>\n<li>行内表达式（变量和函数）以 @ 开始</li>\n<li>代码语句以分号结束</li>\n<li>变量通过 var 关键词进行声明</li>\n<li>字符串用引用来包围</li>\n<li>C# 代码对大小写敏感</li>\n<li>C# 文件的扩展名是 .cshtml</li>\n</ul>\n<h1 id=\"编程\"><a class=\"markdownIt-Anchor\" href=\"#编程\"></a> 编程</h1>\n<p>Razor编程支持变量、循环、逻辑。</p>\n<h2 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\"></a> 变量</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myString = &apos;103&apos;;</span><br><span class=\"line\">int counter = 103; </span><br><span class=\"line\"></span><br><span class=\"line\">if (myString.IsInt())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    myInt=myString.AsInt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"循环\"><a class=\"markdownIt-Anchor\" href=\"#循环\"></a> 循环</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">@for(var i = 10; i &lt; 21; i++)</span><br><span class=\"line\">    &#123;&lt;p&gt;Line @i&lt;/p&gt;&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">@foreach (var x in Request.ServerVariables)</span><br><span class=\"line\">    &#123;&lt;li&gt;@x&lt;/li&gt;&#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">@&#123;</span><br><span class=\"line\">var i = 0;</span><br><span class=\"line\">while (i &lt; 5)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    i += 1;</span><br><span class=\"line\">    &lt;p&gt;Line #@i&lt;/p&gt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&#123;var price=25;&#125;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">@if (price&gt;=30)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &lt;p&gt;The price is high.&lt;/p&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">else if (price&gt;20 &amp;&amp; price&lt;30) </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &lt;p&gt;The price is OK.&lt;/p&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &lt;p&gt;The price is low.&lt;/p&gt;</span><br><span class=\"line\">  &#125;    </span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&#123;</span><br><span class=\"line\">var weekday=DateTime.Now.DayOfWeek;</span><br><span class=\"line\">var day=weekday.ToString();</span><br><span class=\"line\">var message=&quot;&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">@switch(day)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">case &quot;Monday&quot;:</span><br><span class=\"line\">    message=&quot;This is the first weekday.&quot;;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">case &quot;Thursday&quot;:</span><br><span class=\"line\">    message=&quot;Only one day before weekend.&quot;;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">case &quot;Friday&quot;:</span><br><span class=\"line\">    message=&quot;Tomorrow is weekend!&quot;;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">default:</span><br><span class=\"line\">    message=&quot;Today is &quot; + day;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;p&gt;@message&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ASP.NET WebPages学习笔记","copyright":true,"comments":1,"toc":true,"date":"2018-10-05T03:37:50.000Z","password":null,"_content":"# 申明\n文章内容记录自：http://www.w3school.com.cn/aspnet/webpages_intro.asp， 为个人学习笔记记录。\n\n# 说明\nWeb Pages 是三种 ASP.NET 编程模型中的一种，用于创建 ASP.NET 网站和 web 应用程序。\n\n# 布局\n在因特网上，您会发现很多拥有统一外观的网站：\n* 每页拥有相同的页眉\n* 每页拥有相同的页脚\n* 每页拥有相同的样式和布局\n\n可以通过以下方式实现：\n1. 使用 @RenderPage() 方法从不同的文件导入内容\n \n~~~html \n<html>\n<body>\n@RenderPage(\"header.cshtml\")\n<h1>Hello Web Pages</h1>  \n@RenderPage(\"footer.cshtml\")\n</body>\n</html>\n~~~\n\n2. 使用布局页面\n布局网页包含网页的结构，而不是内容。当网页（内容页）链接到布局页时，它会根据布局页（模板）来显示。布局页类似普通的网页，但是会在引用内容页的位置调用 @RenderBody() 方法。每个内容页必须以 Layout 指令开头。\n\n布局页面：\n~~~html\n<html>\n<body> \n@RenderBody() \n</body>\n</html>\n~~~\n\n任意网页：\n~~~html\n@{Layout=\"Layout.cshtml\";}\n<h1>Welcome to W3Schools</h1> \n~~~\n\n# 防止代码泄露\n在 ASP.NET 中，名称以下划线开头的文件无法通过 web 来浏览。如果您希望禁止用户查看内容块或布局文件，请对文件重新命名,如：_Layout.cshtml\n\n# ~ 操作符 与 Href 方法\n* 使用 ~ 操作符在编程代码中规定虚拟根目录,作为项目资源路径根路径，如：var myImagesFolder = \"~/images\";\n* Href 方法把代码中的路径转换为浏览器能够理解的路径（浏览器无法理解 ~ 操作符），如：\n~~~\n@{var myStyleSheet = \"~/Shared/Site.css\";}\n<!-- 创建指向 CSS 文件的链接 -->\n<link rel=\"stylesheet\" type=\"text/css\" href=\"@Href(myStyleSheet)\" />\n~~~\n\n# Page对象\nPage对象为内置对象，类似与JSP中的Request等对象\n方法|\t描述\n--|--\nhref|\t使用指定的参数构建 URL。\nRenderBody()|\t在布局页中，将呈现不在指定部分中的内容页部分。\nRenderPage(page)|\t在其他页内呈现某一页的内容。\nRenderSection(section)|\t在布局页中，将呈现指定部分的内容。\nWrite(object)|\t将指定的对象作为 HTML 编码的字符串写入。\nWriteLiteral|\t无需先对指定的对象进行 HTML 编码，即可将其写入。\n\n属性|\t描述\n--|--\nisPost|\t返回一个值（true 或 false），指示客户端用来请求网页的 HTTP 数据传输方法是否为 POST 请求。\nLayout|\t获取或设置布局页的路径。\nPage|\t提供对页面、布局页和分页之间共享的页数据的类似属性的访问。\nRequest|\t获得当前 HTTP 请求的 HttpRequest 对象。\nServer|\t获取 HttpServerUtility 对象，该对象所提供的方法能够在网页处理过程中使用。\n\n# Web Pages帮助器\nWeb Helpers 极大地简化了 web 开发和常见的编程任务。其内部实现了表格、图表等内容显示的逻辑及样式，进行了特定封装。\n\n# Web Pages参考手册\nhttp://www.w3school.com.cn/aspnet/webpages_ref_classes.asp","source":"_posts/C#开发/2018-10-05-WebPages.md","raw":"---\ntitle: ASP.NET WebPages学习笔记\ntags:\n  - ASP.NET\n  - WebPages\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-05 11:37:50\ncategories: C#\npassword:\n---\n# 申明\n文章内容记录自：http://www.w3school.com.cn/aspnet/webpages_intro.asp， 为个人学习笔记记录。\n\n# 说明\nWeb Pages 是三种 ASP.NET 编程模型中的一种，用于创建 ASP.NET 网站和 web 应用程序。\n\n# 布局\n在因特网上，您会发现很多拥有统一外观的网站：\n* 每页拥有相同的页眉\n* 每页拥有相同的页脚\n* 每页拥有相同的样式和布局\n\n可以通过以下方式实现：\n1. 使用 @RenderPage() 方法从不同的文件导入内容\n \n~~~html \n<html>\n<body>\n@RenderPage(\"header.cshtml\")\n<h1>Hello Web Pages</h1>  \n@RenderPage(\"footer.cshtml\")\n</body>\n</html>\n~~~\n\n2. 使用布局页面\n布局网页包含网页的结构，而不是内容。当网页（内容页）链接到布局页时，它会根据布局页（模板）来显示。布局页类似普通的网页，但是会在引用内容页的位置调用 @RenderBody() 方法。每个内容页必须以 Layout 指令开头。\n\n布局页面：\n~~~html\n<html>\n<body> \n@RenderBody() \n</body>\n</html>\n~~~\n\n任意网页：\n~~~html\n@{Layout=\"Layout.cshtml\";}\n<h1>Welcome to W3Schools</h1> \n~~~\n\n# 防止代码泄露\n在 ASP.NET 中，名称以下划线开头的文件无法通过 web 来浏览。如果您希望禁止用户查看内容块或布局文件，请对文件重新命名,如：_Layout.cshtml\n\n# ~ 操作符 与 Href 方法\n* 使用 ~ 操作符在编程代码中规定虚拟根目录,作为项目资源路径根路径，如：var myImagesFolder = \"~/images\";\n* Href 方法把代码中的路径转换为浏览器能够理解的路径（浏览器无法理解 ~ 操作符），如：\n~~~\n@{var myStyleSheet = \"~/Shared/Site.css\";}\n<!-- 创建指向 CSS 文件的链接 -->\n<link rel=\"stylesheet\" type=\"text/css\" href=\"@Href(myStyleSheet)\" />\n~~~\n\n# Page对象\nPage对象为内置对象，类似与JSP中的Request等对象\n方法|\t描述\n--|--\nhref|\t使用指定的参数构建 URL。\nRenderBody()|\t在布局页中，将呈现不在指定部分中的内容页部分。\nRenderPage(page)|\t在其他页内呈现某一页的内容。\nRenderSection(section)|\t在布局页中，将呈现指定部分的内容。\nWrite(object)|\t将指定的对象作为 HTML 编码的字符串写入。\nWriteLiteral|\t无需先对指定的对象进行 HTML 编码，即可将其写入。\n\n属性|\t描述\n--|--\nisPost|\t返回一个值（true 或 false），指示客户端用来请求网页的 HTTP 数据传输方法是否为 POST 请求。\nLayout|\t获取或设置布局页的路径。\nPage|\t提供对页面、布局页和分页之间共享的页数据的类似属性的访问。\nRequest|\t获得当前 HTTP 请求的 HttpRequest 对象。\nServer|\t获取 HttpServerUtility 对象，该对象所提供的方法能够在网页处理过程中使用。\n\n# Web Pages帮助器\nWeb Helpers 极大地简化了 web 开发和常见的编程任务。其内部实现了表格、图表等内容显示的逻辑及样式，进行了特定封装。\n\n# Web Pages参考手册\nhttp://www.w3school.com.cn/aspnet/webpages_ref_classes.asp","slug":"C-开发-2018-10-05-WebPages","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrxg0048ck8hy2h57zl2","content":"<h1 id=\"申明\"><a class=\"markdownIt-Anchor\" href=\"#申明\"></a> 申明</h1>\n<p>文章内容记录自：<a href=\"http://www.w3school.com.cn/aspnet/webpages_intro.asp%EF%BC%8C\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/aspnet/webpages_intro.asp，</a> 为个人学习笔记记录。</p>\n<h1 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\"></a> 说明</h1>\n<p>Web Pages 是三种 <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 编程模型中的一种，用于创建 <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 网站和 web 应用程序。</p>\n<h1 id=\"布局\"><a class=\"markdownIt-Anchor\" href=\"#布局\"></a> 布局</h1>\n<p>在因特网上，您会发现很多拥有统一外观的网站：</p>\n<ul>\n<li>每页拥有相同的页眉</li>\n<li>每页拥有相同的页脚</li>\n<li>每页拥有相同的样式和布局</li>\n</ul>\n<p>可以通过以下方式实现：</p>\n<ol>\n<li>使用 @RenderPage() 方法从不同的文件导入内容</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">@RenderPage(\"header.cshtml\")</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Web Pages<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>  </span><br><span class=\"line\">@RenderPage(\"footer.cshtml\")</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用布局页面<br>\n布局网页包含网页的结构，而不是内容。当网页（内容页）链接到布局页时，它会根据布局页（模板）来显示。布局页类似普通的网页，但是会在引用内容页的位置调用 @RenderBody() 方法。每个内容页必须以 Layout 指令开头。</li>\n</ol>\n<p>布局页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\">@RenderBody() </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>任意网页：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&#123;Layout=\"Layout.cshtml\";&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to W3Schools<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"防止代码泄露\"><a class=\"markdownIt-Anchor\" href=\"#防止代码泄露\"></a> 防止代码泄露</h1>\n<p>在 <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 中，名称以下划线开头的文件无法通过 web 来浏览。如果您希望禁止用户查看内容块或布局文件，请对文件重新命名,如：_Layout.cshtml</p>\n<h1 id=\"~-操作符-与-href-方法\"><a class=\"markdownIt-Anchor\" href=\"#~-操作符-与-href-方法\"></a> ~ 操作符 与 Href 方法</h1>\n<ul>\n<li>使用 ~ 操作符在编程代码中规定虚拟根目录,作为项目资源路径根路径，如：var myImagesFolder = “~/images”;</li>\n<li>Href 方法把代码中的路径转换为浏览器能够理解的路径（浏览器无法理解 ~ 操作符），如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&#123;var myStyleSheet = &quot;~/Shared/Site.css&quot;;&#125;</span><br><span class=\"line\">&lt;!-- 创建指向 CSS 文件的链接 --&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;@Href(myStyleSheet)&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"page对象\"><a class=\"markdownIt-Anchor\" href=\"#page对象\"></a> Page对象</h1>\n<p>Page对象为内置对象，类似与JSP中的Request等对象</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>href</td>\n<td>使用指定的参数构建 URL。</td>\n</tr>\n<tr>\n<td>RenderBody()</td>\n<td>在布局页中，将呈现不在指定部分中的内容页部分。</td>\n</tr>\n<tr>\n<td>RenderPage(page)</td>\n<td>在其他页内呈现某一页的内容。</td>\n</tr>\n<tr>\n<td>RenderSection(section)</td>\n<td>在布局页中，将呈现指定部分的内容。</td>\n</tr>\n<tr>\n<td>Write(object)</td>\n<td>将指定的对象作为 HTML 编码的字符串写入。</td>\n</tr>\n<tr>\n<td>WriteLiteral</td>\n<td>无需先对指定的对象进行 HTML 编码，即可将其写入。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>isPost</td>\n<td>返回一个值（true 或 false），指示客户端用来请求网页的 HTTP 数据传输方法是否为 POST 请求。</td>\n</tr>\n<tr>\n<td>Layout</td>\n<td>获取或设置布局页的路径。</td>\n</tr>\n<tr>\n<td>Page</td>\n<td>提供对页面、布局页和分页之间共享的页数据的类似属性的访问。</td>\n</tr>\n<tr>\n<td>Request</td>\n<td>获得当前 HTTP 请求的 HttpRequest 对象。</td>\n</tr>\n<tr>\n<td>Server</td>\n<td>获取 HttpServerUtility 对象，该对象所提供的方法能够在网页处理过程中使用。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"web-pages帮助器\"><a class=\"markdownIt-Anchor\" href=\"#web-pages帮助器\"></a> Web Pages帮助器</h1>\n<p>Web Helpers 极大地简化了 web 开发和常见的编程任务。其内部实现了表格、图表等内容显示的逻辑及样式，进行了特定封装。</p>\n<h1 id=\"web-pages参考手册\"><a class=\"markdownIt-Anchor\" href=\"#web-pages参考手册\"></a> Web Pages参考手册</h1>\n<p><a href=\"http://www.w3school.com.cn/aspnet/webpages_ref_classes.asp\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/aspnet/webpages_ref_classes.asp</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"申明\"><a class=\"markdownIt-Anchor\" href=\"#申明\"></a> 申明</h1>\n<p>文章内容记录自：<a href=\"http://www.w3school.com.cn/aspnet/webpages_intro.asp%EF%BC%8C\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/aspnet/webpages_intro.asp，</a> 为个人学习笔记记录。</p>\n<h1 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\"></a> 说明</h1>\n<p>Web Pages 是三种 <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 编程模型中的一种，用于创建 <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 网站和 web 应用程序。</p>\n<h1 id=\"布局\"><a class=\"markdownIt-Anchor\" href=\"#布局\"></a> 布局</h1>\n<p>在因特网上，您会发现很多拥有统一外观的网站：</p>\n<ul>\n<li>每页拥有相同的页眉</li>\n<li>每页拥有相同的页脚</li>\n<li>每页拥有相同的样式和布局</li>\n</ul>\n<p>可以通过以下方式实现：</p>\n<ol>\n<li>使用 @RenderPage() 方法从不同的文件导入内容</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">@RenderPage(\"header.cshtml\")</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Web Pages<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>  </span><br><span class=\"line\">@RenderPage(\"footer.cshtml\")</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用布局页面<br>\n布局网页包含网页的结构，而不是内容。当网页（内容页）链接到布局页时，它会根据布局页（模板）来显示。布局页类似普通的网页，但是会在引用内容页的位置调用 @RenderBody() 方法。每个内容页必须以 Layout 指令开头。</li>\n</ol>\n<p>布局页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\">@RenderBody() </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>任意网页：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&#123;Layout=\"Layout.cshtml\";&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to W3Schools<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"防止代码泄露\"><a class=\"markdownIt-Anchor\" href=\"#防止代码泄露\"></a> 防止代码泄露</h1>\n<p>在 <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> 中，名称以下划线开头的文件无法通过 web 来浏览。如果您希望禁止用户查看内容块或布局文件，请对文件重新命名,如：_Layout.cshtml</p>\n<h1 id=\"~-操作符-与-href-方法\"><a class=\"markdownIt-Anchor\" href=\"#~-操作符-与-href-方法\"></a> ~ 操作符 与 Href 方法</h1>\n<ul>\n<li>使用 ~ 操作符在编程代码中规定虚拟根目录,作为项目资源路径根路径，如：var myImagesFolder = “~/images”;</li>\n<li>Href 方法把代码中的路径转换为浏览器能够理解的路径（浏览器无法理解 ~ 操作符），如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&#123;var myStyleSheet = &quot;~/Shared/Site.css&quot;;&#125;</span><br><span class=\"line\">&lt;!-- 创建指向 CSS 文件的链接 --&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;@Href(myStyleSheet)&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"page对象\"><a class=\"markdownIt-Anchor\" href=\"#page对象\"></a> Page对象</h1>\n<p>Page对象为内置对象，类似与JSP中的Request等对象</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>href</td>\n<td>使用指定的参数构建 URL。</td>\n</tr>\n<tr>\n<td>RenderBody()</td>\n<td>在布局页中，将呈现不在指定部分中的内容页部分。</td>\n</tr>\n<tr>\n<td>RenderPage(page)</td>\n<td>在其他页内呈现某一页的内容。</td>\n</tr>\n<tr>\n<td>RenderSection(section)</td>\n<td>在布局页中，将呈现指定部分的内容。</td>\n</tr>\n<tr>\n<td>Write(object)</td>\n<td>将指定的对象作为 HTML 编码的字符串写入。</td>\n</tr>\n<tr>\n<td>WriteLiteral</td>\n<td>无需先对指定的对象进行 HTML 编码，即可将其写入。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>isPost</td>\n<td>返回一个值（true 或 false），指示客户端用来请求网页的 HTTP 数据传输方法是否为 POST 请求。</td>\n</tr>\n<tr>\n<td>Layout</td>\n<td>获取或设置布局页的路径。</td>\n</tr>\n<tr>\n<td>Page</td>\n<td>提供对页面、布局页和分页之间共享的页数据的类似属性的访问。</td>\n</tr>\n<tr>\n<td>Request</td>\n<td>获得当前 HTTP 请求的 HttpRequest 对象。</td>\n</tr>\n<tr>\n<td>Server</td>\n<td>获取 HttpServerUtility 对象，该对象所提供的方法能够在网页处理过程中使用。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"web-pages帮助器\"><a class=\"markdownIt-Anchor\" href=\"#web-pages帮助器\"></a> Web Pages帮助器</h1>\n<p>Web Helpers 极大地简化了 web 开发和常见的编程任务。其内部实现了表格、图表等内容显示的逻辑及样式，进行了特定封装。</p>\n<h1 id=\"web-pages参考手册\"><a class=\"markdownIt-Anchor\" href=\"#web-pages参考手册\"></a> Web Pages参考手册</h1>\n<p><a href=\"http://www.w3school.com.cn/aspnet/webpages_ref_classes.asp\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/aspnet/webpages_ref_classes.asp</a></p>\n"},{"title":"Windows下SVN服务器搭建及VS2015插件安装联动","copyright":true,"comments":1,"toc":true,"date":"2018-10-05T02:06:35.000Z","password":null,"_content":"\nSVN服务端软件下载：https://www.visualsvn.com/server/download/\n VisualSVN-Server-3.9.1-x64以管理员权限（有的话）安装,一路默认，选择standard版本,其他都是默认\n\nSVN客户端软件下载：https://www.visualsvn.com/visualsvn/download/tortoisesvn/\n默认安装\n\nVS2015插件下载： https://www.visualsvn.com/visualsvn/download/\n\n\n","source":"_posts/C#开发/2018-10-05-Windows下SVN服务器搭建及VS2015插件安装联动.md","raw":"---\ntitle: Windows下SVN服务器搭建及VS2015插件安装联动\ntags:\n  - 工具\n  - 版本控制\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-05 10:06:35\ncategories: 工具\npassword:\n---\n\nSVN服务端软件下载：https://www.visualsvn.com/server/download/\n VisualSVN-Server-3.9.1-x64以管理员权限（有的话）安装,一路默认，选择standard版本,其他都是默认\n\nSVN客户端软件下载：https://www.visualsvn.com/visualsvn/download/tortoisesvn/\n默认安装\n\nVS2015插件下载： https://www.visualsvn.com/visualsvn/download/\n\n\n","slug":"C-开发-2018-10-05-Windows下SVN服务器搭建及VS2015插件安装联动","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrxs004ack8he19xge2j","content":"<p>SVN服务端软件下载：<a href=\"https://www.visualsvn.com/server/download/\" target=\"_blank\" rel=\"noopener\">https://www.visualsvn.com/server/download/</a><br>\nVisualSVN-Server-3.9.1-x64以管理员权限（有的话）安装,一路默认，选择standard版本,其他都是默认</p>\n<p>SVN客户端软件下载：<a href=\"https://www.visualsvn.com/visualsvn/download/tortoisesvn/\" target=\"_blank\" rel=\"noopener\">https://www.visualsvn.com/visualsvn/download/tortoisesvn/</a><br>\n默认安装</p>\n<p>VS2015插件下载： <a href=\"https://www.visualsvn.com/visualsvn/download/\" target=\"_blank\" rel=\"noopener\">https://www.visualsvn.com/visualsvn/download/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>SVN服务端软件下载：<a href=\"https://www.visualsvn.com/server/download/\" target=\"_blank\" rel=\"noopener\">https://www.visualsvn.com/server/download/</a><br>\nVisualSVN-Server-3.9.1-x64以管理员权限（有的话）安装,一路默认，选择standard版本,其他都是默认</p>\n<p>SVN客户端软件下载：<a href=\"https://www.visualsvn.com/visualsvn/download/tortoisesvn/\" target=\"_blank\" rel=\"noopener\">https://www.visualsvn.com/visualsvn/download/tortoisesvn/</a><br>\n默认安装</p>\n<p>VS2015插件下载： <a href=\"https://www.visualsvn.com/visualsvn/download/\" target=\"_blank\" rel=\"noopener\">https://www.visualsvn.com/visualsvn/download/</a></p>\n"},{"title":"ASP.NET HTML表单元素","copyright":true,"comments":1,"toc":true,"date":"2018-10-06T02:30:42.000Z","password":null,"_content":"\n# BeginForm\nhttps://www.cnblogs.com/sheng-jie/p/6305385.html","source":"_posts/C#开发/2018-10-06-ASP-NET-HTML表单元素.md","raw":"---\ntitle: ASP.NET HTML表单元素\ntags:\n  - ASP.NET\n  - HTML表单元素\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-06 10:30:42\ncategories: C#\npassword:\n---\n\n# BeginForm\nhttps://www.cnblogs.com/sheng-jie/p/6305385.html","slug":"C-开发-2018-10-06-ASP-NET-HTML表单元素","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrxu004dck8hgn6rmfyf","content":"<h1 id=\"beginform\"><a class=\"markdownIt-Anchor\" href=\"#beginform\"></a> BeginForm</h1>\n<p><a href=\"https://www.cnblogs.com/sheng-jie/p/6305385.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/sheng-jie/p/6305385.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"beginform\"><a class=\"markdownIt-Anchor\" href=\"#beginform\"></a> BeginForm</h1>\n<p><a href=\"https://www.cnblogs.com/sheng-jie/p/6305385.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/sheng-jie/p/6305385.html</a></p>\n"},{"title":"mac系统安装","copyright":true,"comments":1,"toc":true,"date":"2018-12-19T07:29:55.000Z","password":null,"_content":"\nhttps://www.cnblogs.com/GO-NO-1/p/9084713.html","source":"_posts/Linux/01_linux 配置文件启动顺序.md","raw":"---\ntitle: mac系统安装\ntags:\n  - 环境搭建\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-12-19 15:29:55\ncategories:\npassword:\n---\n\nhttps://www.cnblogs.com/GO-NO-1/p/9084713.html","slug":"Linux-01-linux-配置文件启动顺序","published":1,"updated":"2019-01-17T05:38:36.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrxv004fck8hj9ogtwn8","content":"<p><a href=\"https://www.cnblogs.com/GO-NO-1/p/9084713.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/GO-NO-1/p/9084713.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.cnblogs.com/GO-NO-1/p/9084713.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/GO-NO-1/p/9084713.html</a></p>\n"},{"title":"Jenkins","copyright":true,"comments":1,"toc":true,"date":"2018-10-05T02:04:03.000Z","password":null,"_content":"  \n# Jenkins\n官网下载：https://jenkins.io/download/ ,注意下载的版本要与jdk的版本对应\n> Jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，功能包括：持续的软件版本发布/测试项目；监控外部调用执行的工作\n* 持续集成：指开发者在代码的开发过程中，可以频繁的将代码部署集成到主干，并进程自动化测试 \n* 持续交付：指的是在持续集成的环境基础之上，将代码部署到预生产环境\n* 持续部署：在持续交付的基础上，把部署到生产环境的过程自动化，持续部署和持续交付的区别就是最终部署到生产环境是自动化的","source":"_posts/CI/Jekins.md","raw":"---\ntitle: Jenkins\ntags:\n  - 持续集成 \ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-05 10:04:03\ncategories: 数据库\npassword:\n---\n  \n# Jenkins\n官网下载：https://jenkins.io/download/ ,注意下载的版本要与jdk的版本对应\n> Jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，功能包括：持续的软件版本发布/测试项目；监控外部调用执行的工作\n* 持续集成：指开发者在代码的开发过程中，可以频繁的将代码部署集成到主干，并进程自动化测试 \n* 持续交付：指的是在持续集成的环境基础之上，将代码部署到预生产环境\n* 持续部署：在持续交付的基础上，把部署到生产环境的过程自动化，持续部署和持续交付的区别就是最终部署到生产环境是自动化的","slug":"CI-Jekins","published":1,"updated":"2019-01-28T15:13:49.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrxx004ick8hb8j6v80p","content":"<h1 id=\"jenkins\"><a class=\"markdownIt-Anchor\" href=\"#jenkins\"></a> Jenkins</h1>\n<p>官网下载：<a href=\"https://jenkins.io/download/\" target=\"_blank\" rel=\"noopener\">https://jenkins.io/download/</a> ,注意下载的版本要与jdk的版本对应</p>\n<blockquote>\n<p>Jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，功能包括：持续的软件版本发布/测试项目；监控外部调用执行的工作</p>\n</blockquote>\n<ul>\n<li>持续集成：指开发者在代码的开发过程中，可以频繁的将代码部署集成到主干，并进程自动化测试</li>\n<li>持续交付：指的是在持续集成的环境基础之上，将代码部署到预生产环境</li>\n<li>持续部署：在持续交付的基础上，把部署到生产环境的过程自动化，持续部署和持续交付的区别就是最终部署到生产环境是自动化的</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"jenkins\"><a class=\"markdownIt-Anchor\" href=\"#jenkins\"></a> Jenkins</h1>\n<p>官网下载：<a href=\"https://jenkins.io/download/\" target=\"_blank\" rel=\"noopener\">https://jenkins.io/download/</a> ,注意下载的版本要与jdk的版本对应</p>\n<blockquote>\n<p>Jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，功能包括：持续的软件版本发布/测试项目；监控外部调用执行的工作</p>\n</blockquote>\n<ul>\n<li>持续集成：指开发者在代码的开发过程中，可以频繁的将代码部署集成到主干，并进程自动化测试</li>\n<li>持续交付：指的是在持续集成的环境基础之上，将代码部署到预生产环境</li>\n<li>持续部署：在持续交付的基础上，把部署到生产环境的过程自动化，持续部署和持续交付的区别就是最终部署到生产环境是自动化的</li>\n</ul>\n"},{"title":"RxJava从源码到应用移动端开发效率秒提速","copyright":true,"comments":1,"toc":true,"date":"2018-10-02T14:10:23.000Z","password":null,"_content":"\n# 响应式编程思想概述\n* 响应式编程：是一种面向数据流和变化传播的编程范式\n* 数据流：只能以事先规定好的顺序被读取一次的数据的一个序列\n* 变化传播：类似观察者模式，变化了要通知别人\n\n# RxJava源码分析\n## 基本元素\nRxJava是一个基于回调的异步的库，是一个基于事件分发和消息传递的库\n\n## Operator操作符变换原理\n\n## Scheduler线程变换原理\n\n## 整体变换compose和transformer原理\n\n\n\n\n\n","source":"_posts/android/RxJava.md","raw":"---\ntitle: RxJava从源码到应用移动端开发效率秒提速\ntags: \n  - andrioid \n  - RxJava\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-02 22:10:23\ncategories:  \npassword:\n---\n\n# 响应式编程思想概述\n* 响应式编程：是一种面向数据流和变化传播的编程范式\n* 数据流：只能以事先规定好的顺序被读取一次的数据的一个序列\n* 变化传播：类似观察者模式，变化了要通知别人\n\n# RxJava源码分析\n## 基本元素\nRxJava是一个基于回调的异步的库，是一个基于事件分发和消息传递的库\n\n## Operator操作符变换原理\n\n## Scheduler线程变换原理\n\n## 整体变换compose和transformer原理\n\n\n\n\n\n","slug":"android-RxJava","published":1,"updated":"2019-01-28T15:41:55.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrxy004lck8hpuun93sz","content":"<h1 id=\"响应式编程思想概述\"><a class=\"markdownIt-Anchor\" href=\"#响应式编程思想概述\"></a> 响应式编程思想概述</h1>\n<ul>\n<li>响应式编程：是一种面向数据流和变化传播的编程范式</li>\n<li>数据流：只能以事先规定好的顺序被读取一次的数据的一个序列</li>\n<li>变化传播：类似观察者模式，变化了要通知别人</li>\n</ul>\n<h1 id=\"rxjava源码分析\"><a class=\"markdownIt-Anchor\" href=\"#rxjava源码分析\"></a> RxJava源码分析</h1>\n<h2 id=\"基本元素\"><a class=\"markdownIt-Anchor\" href=\"#基本元素\"></a> 基本元素</h2>\n<p>RxJava是一个基于回调的异步的库，是一个基于事件分发和消息传递的库</p>\n<h2 id=\"operator操作符变换原理\"><a class=\"markdownIt-Anchor\" href=\"#operator操作符变换原理\"></a> Operator操作符变换原理</h2>\n<h2 id=\"scheduler线程变换原理\"><a class=\"markdownIt-Anchor\" href=\"#scheduler线程变换原理\"></a> Scheduler线程变换原理</h2>\n<h2 id=\"整体变换compose和transformer原理\"><a class=\"markdownIt-Anchor\" href=\"#整体变换compose和transformer原理\"></a> 整体变换compose和transformer原理</h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"响应式编程思想概述\"><a class=\"markdownIt-Anchor\" href=\"#响应式编程思想概述\"></a> 响应式编程思想概述</h1>\n<ul>\n<li>响应式编程：是一种面向数据流和变化传播的编程范式</li>\n<li>数据流：只能以事先规定好的顺序被读取一次的数据的一个序列</li>\n<li>变化传播：类似观察者模式，变化了要通知别人</li>\n</ul>\n<h1 id=\"rxjava源码分析\"><a class=\"markdownIt-Anchor\" href=\"#rxjava源码分析\"></a> RxJava源码分析</h1>\n<h2 id=\"基本元素\"><a class=\"markdownIt-Anchor\" href=\"#基本元素\"></a> 基本元素</h2>\n<p>RxJava是一个基于回调的异步的库，是一个基于事件分发和消息传递的库</p>\n<h2 id=\"operator操作符变换原理\"><a class=\"markdownIt-Anchor\" href=\"#operator操作符变换原理\"></a> Operator操作符变换原理</h2>\n<h2 id=\"scheduler线程变换原理\"><a class=\"markdownIt-Anchor\" href=\"#scheduler线程变换原理\"></a> Scheduler线程变换原理</h2>\n<h2 id=\"整体变换compose和transformer原理\"><a class=\"markdownIt-Anchor\" href=\"#整体变换compose和transformer原理\"></a> 整体变换compose和transformer原理</h2>\n"},{"title":"mac系统安装","copyright":true,"comments":1,"toc":true,"date":"2018-12-19T07:29:55.000Z","password":null,"_content":"\n# U盘启动\nU盘启动：目的是为了在没有装系统的情况下进行临时启动，它可以启动DOS、备份还原软件或内存中运行的PE系统。现在大部分的电脑都支持U盘启动。U盘启动在系统奔溃和快速安装系统时能起到很大的作用。\n\n\n# mac系统安装启动盘制作\n1. 准备一个 8GB 或更大容量的 U盘，并备份好里面的所有资料\n2. 下载好需要安装的系统。在App Store中搜索系统，如：MacOS Sierra，完成下载。\n3. 打开 “应用程序 → 实用工具 → 磁盘工具”，将U盘「抹掉」(格式化) 成「Mac OS X 扩展（日志式）」格式、GUID 分区图，并将U盘命名为「Sierra」。(注意：这个盘符名称将会与后面的命令一一对应，如果你改了这盘符的名字，必须保证后面的命令里的名称也要一致)\n4. 打开 “应用程序→实用工具→终端”，将下面的一段命令复制并粘贴进去：\n~~~\nsudo /Applications/Install\\ macOS\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/Sierra --applicationpath /Applications/Install\\ macOS\\ Sierra.app --nointeraction\n~~~\n\n回车并执行该命令，这时会提示让你输入管理员密码，便会开始制作过程了：\n![image](/pub-images/macOS制作U盘启动.png)\n\n如上图，这时系统已经在制作中了，请耐心等待直到屏幕最后出现 Done. 字样即表示大功告成了\n\n# mac系统U盘安装\n0. （此步骤可选：如果想格式化磁盘则进行此操作）启动时按住[command + r]，进入磁盘管理工具抹掉磁盘即可\n1. 先在目标电脑上插上 U 盘，然后重启你的 Mac，然后一直按住[option」(alt)] 按键不放，直到屏幕显示多出一个 USB 启动盘的选项。\n2. 选择 U 盘的图标回车，即可通过 U 盘来安装 macOS Sierra 了！这时，你可以直接覆盖安装系统(升级)，也可以在磁盘工具里面格式化抹掉整个硬盘，或者重新分区等实现全新的干净的安装\n3. 启动过程中电脑会重启，重启的时候，拔掉U盘\n\n\n# 安装软件\n* 在登陆App Store之后，往常安装过的软件在\"已购项目\"列表中有，不用每次安装系统后再一一去查找安装过的程序。\n\n非App Store安装的程序，在安装时，又是会提示app出现某些安装包已损坏、显示未激活、打开崩溃等的提示！！这种多是因为新系统屏蔽了任何来源的设置，所以需要大家打开“允许任何来源”方可安装，可按如下方式操作\n* 步骤1：Spotlight搜索(快捷键：command+空格或右上角搜索的符号)：搜索 “终端”\n* 步骤2：直接复制粘贴 sudo spctl --master-disable   回车\n* 步骤3：输入你的 开机密码\n* 步骤4：回到系统偏好设置 的“安全与隐私”，勾选 “允许任何来源”完成安装.\n\n\n# macOS一些其他维护相关知识\n官方技术支持网址：https://support.apple.com/zh-cn\n1. 关于 Mac 启动时您看到的屏幕：在从 OS X 启动 Mac 时，系统会显示不同的屏幕，以让您了解 Mac 的启动方式，或是启动可能未完成的原因。\nhttps://support.apple.com/zh-cn/HT204156\n\n2. 启动 Mac 时显示闪烁的问号\n如果启动时在 Mac 屏幕上看到闪烁的问号，这意味着您的 Mac 无法找到自身的系统软件。\nhttps://support.apple.com/zh-cn/HT204323\n\n3. 如何重新安装 macOS\nhttps://support.apple.com/zh-cn/HT204904\n\n4. 关于 macOS 恢复功能\nhttps://support.apple.com/zh-cn/HT201314\n\n5. 使用 Time Machine 备份或恢复 Mac\nhttps://support.apple.com/zh-cn/HT201250\n\n6. 如何重置 Mac 上的 NVRAM        Command-Option-P-R \nhttps://support.apple.com/zh-cn/HT204063\n\n7. 重置 Mac 上的系统管理控制器 (SMC)       Shift-Control-Option\nhttps://support.apple.com/zh-cn/HT201295\n\n8. 如何识别 MacBook Pro 机型\nhttps://support.apple.com/zh-cn/HT201300","source":"_posts/环境搭建/01_mac系统安装.md","raw":"---\ntitle: mac系统安装\ntags:\n  - 环境搭建\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-12-19 15:29:55\ncategories: 环境搭建\npassword:\n---\n\n# U盘启动\nU盘启动：目的是为了在没有装系统的情况下进行临时启动，它可以启动DOS、备份还原软件或内存中运行的PE系统。现在大部分的电脑都支持U盘启动。U盘启动在系统奔溃和快速安装系统时能起到很大的作用。\n\n\n# mac系统安装启动盘制作\n1. 准备一个 8GB 或更大容量的 U盘，并备份好里面的所有资料\n2. 下载好需要安装的系统。在App Store中搜索系统，如：MacOS Sierra，完成下载。\n3. 打开 “应用程序 → 实用工具 → 磁盘工具”，将U盘「抹掉」(格式化) 成「Mac OS X 扩展（日志式）」格式、GUID 分区图，并将U盘命名为「Sierra」。(注意：这个盘符名称将会与后面的命令一一对应，如果你改了这盘符的名字，必须保证后面的命令里的名称也要一致)\n4. 打开 “应用程序→实用工具→终端”，将下面的一段命令复制并粘贴进去：\n~~~\nsudo /Applications/Install\\ macOS\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/Sierra --applicationpath /Applications/Install\\ macOS\\ Sierra.app --nointeraction\n~~~\n\n回车并执行该命令，这时会提示让你输入管理员密码，便会开始制作过程了：\n![image](/pub-images/macOS制作U盘启动.png)\n\n如上图，这时系统已经在制作中了，请耐心等待直到屏幕最后出现 Done. 字样即表示大功告成了\n\n# mac系统U盘安装\n0. （此步骤可选：如果想格式化磁盘则进行此操作）启动时按住[command + r]，进入磁盘管理工具抹掉磁盘即可\n1. 先在目标电脑上插上 U 盘，然后重启你的 Mac，然后一直按住[option」(alt)] 按键不放，直到屏幕显示多出一个 USB 启动盘的选项。\n2. 选择 U 盘的图标回车，即可通过 U 盘来安装 macOS Sierra 了！这时，你可以直接覆盖安装系统(升级)，也可以在磁盘工具里面格式化抹掉整个硬盘，或者重新分区等实现全新的干净的安装\n3. 启动过程中电脑会重启，重启的时候，拔掉U盘\n\n\n# 安装软件\n* 在登陆App Store之后，往常安装过的软件在\"已购项目\"列表中有，不用每次安装系统后再一一去查找安装过的程序。\n\n非App Store安装的程序，在安装时，又是会提示app出现某些安装包已损坏、显示未激活、打开崩溃等的提示！！这种多是因为新系统屏蔽了任何来源的设置，所以需要大家打开“允许任何来源”方可安装，可按如下方式操作\n* 步骤1：Spotlight搜索(快捷键：command+空格或右上角搜索的符号)：搜索 “终端”\n* 步骤2：直接复制粘贴 sudo spctl --master-disable   回车\n* 步骤3：输入你的 开机密码\n* 步骤4：回到系统偏好设置 的“安全与隐私”，勾选 “允许任何来源”完成安装.\n\n\n# macOS一些其他维护相关知识\n官方技术支持网址：https://support.apple.com/zh-cn\n1. 关于 Mac 启动时您看到的屏幕：在从 OS X 启动 Mac 时，系统会显示不同的屏幕，以让您了解 Mac 的启动方式，或是启动可能未完成的原因。\nhttps://support.apple.com/zh-cn/HT204156\n\n2. 启动 Mac 时显示闪烁的问号\n如果启动时在 Mac 屏幕上看到闪烁的问号，这意味着您的 Mac 无法找到自身的系统软件。\nhttps://support.apple.com/zh-cn/HT204323\n\n3. 如何重新安装 macOS\nhttps://support.apple.com/zh-cn/HT204904\n\n4. 关于 macOS 恢复功能\nhttps://support.apple.com/zh-cn/HT201314\n\n5. 使用 Time Machine 备份或恢复 Mac\nhttps://support.apple.com/zh-cn/HT201250\n\n6. 如何重置 Mac 上的 NVRAM        Command-Option-P-R \nhttps://support.apple.com/zh-cn/HT204063\n\n7. 重置 Mac 上的系统管理控制器 (SMC)       Shift-Control-Option\nhttps://support.apple.com/zh-cn/HT201295\n\n8. 如何识别 MacBook Pro 机型\nhttps://support.apple.com/zh-cn/HT201300","slug":"环境搭建-01-mac系统安装","published":1,"updated":"2019-02-14T01:47:26.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytry0004pck8hqh5litcd","content":"<h1 id=\"u盘启动\"><a class=\"markdownIt-Anchor\" href=\"#u盘启动\"></a> U盘启动</h1>\n<p>U盘启动：目的是为了在没有装系统的情况下进行临时启动，它可以启动DOS、备份还原软件或内存中运行的PE系统。现在大部分的电脑都支持U盘启动。U盘启动在系统奔溃和快速安装系统时能起到很大的作用。</p>\n<h1 id=\"mac系统安装启动盘制作\"><a class=\"markdownIt-Anchor\" href=\"#mac系统安装启动盘制作\"></a> mac系统安装启动盘制作</h1>\n<ol>\n<li>准备一个 8GB 或更大容量的 U盘，并备份好里面的所有资料</li>\n<li>下载好需要安装的系统。在App Store中搜索系统，如：MacOS Sierra，完成下载。</li>\n<li>打开 “应用程序 → 实用工具 → 磁盘工具”，将U盘「抹掉」(格式化) 成「Mac OS X 扩展（日志式）」格式、GUID 分区图，并将U盘命名为「Sierra」。(注意：这个盘符名称将会与后面的命令一一对应，如果你改了这盘符的名字，必须保证后面的命令里的名称也要一致)</li>\n<li>打开 “应用程序→实用工具→终端”，将下面的一段命令复制并粘贴进去：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /Applications/Install\\ macOS\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/Sierra --applicationpath /Applications/Install\\ macOS\\ Sierra.app --nointeraction</span><br></pre></td></tr></table></figure>\n<p>回车并执行该命令，这时会提示让你输入管理员密码，便会开始制作过程了：<br>\n<img src=\"/pub-images/macOS%E5%88%B6%E4%BD%9CU%E7%9B%98%E5%90%AF%E5%8A%A8.png\" alt=\"image\"></p>\n<p>如上图，这时系统已经在制作中了，请耐心等待直到屏幕最后出现 Done. 字样即表示大功告成了</p>\n<h1 id=\"mac系统u盘安装\"><a class=\"markdownIt-Anchor\" href=\"#mac系统u盘安装\"></a> mac系统U盘安装</h1>\n<ol start=\"0\">\n<li>（此步骤可选：如果想格式化磁盘则进行此操作）启动时按住[command + r]，进入磁盘管理工具抹掉磁盘即可</li>\n<li>先在目标电脑上插上 U 盘，然后重启你的 Mac，然后一直按住[option」(alt)] 按键不放，直到屏幕显示多出一个 USB 启动盘的选项。</li>\n<li>选择 U 盘的图标回车，即可通过 U 盘来安装 macOS Sierra 了！这时，你可以直接覆盖安装系统(升级)，也可以在磁盘工具里面格式化抹掉整个硬盘，或者重新分区等实现全新的干净的安装</li>\n<li>启动过程中电脑会重启，重启的时候，拔掉U盘</li>\n</ol>\n<h1 id=\"安装软件\"><a class=\"markdownIt-Anchor\" href=\"#安装软件\"></a> 安装软件</h1>\n<ul>\n<li>在登陆App Store之后，往常安装过的软件在&quot;已购项目&quot;列表中有，不用每次安装系统后再一一去查找安装过的程序。</li>\n</ul>\n<p>非App Store安装的程序，在安装时，又是会提示app出现某些安装包已损坏、显示未激活、打开崩溃等的提示！！这种多是因为新系统屏蔽了任何来源的设置，所以需要大家打开“允许任何来源”方可安装，可按如下方式操作</p>\n<ul>\n<li>步骤1：Spotlight搜索(快捷键：command+空格或右上角搜索的符号)：搜索 “终端”</li>\n<li>步骤2：直接复制粘贴 sudo spctl --master-disable   回车</li>\n<li>步骤3：输入你的 开机密码</li>\n<li>步骤4：回到系统偏好设置 的“安全与隐私”，勾选 “允许任何来源”完成安装.</li>\n</ul>\n<h1 id=\"macos一些其他维护相关知识\"><a class=\"markdownIt-Anchor\" href=\"#macos一些其他维护相关知识\"></a> macOS一些其他维护相关知识</h1>\n<p>官方技术支持网址：<a href=\"https://support.apple.com/zh-cn\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn</a></p>\n<ol>\n<li>\n<p>关于 Mac 启动时您看到的屏幕：在从 OS X 启动 Mac 时，系统会显示不同的屏幕，以让您了解 Mac 的启动方式，或是启动可能未完成的原因。<br>\n<a href=\"https://support.apple.com/zh-cn/HT204156\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT204156</a></p>\n</li>\n<li>\n<p>启动 Mac 时显示闪烁的问号<br>\n如果启动时在 Mac 屏幕上看到闪烁的问号，这意味着您的 Mac 无法找到自身的系统软件。<br>\n<a href=\"https://support.apple.com/zh-cn/HT204323\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT204323</a></p>\n</li>\n<li>\n<p>如何重新安装 macOS<br>\n<a href=\"https://support.apple.com/zh-cn/HT204904\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT204904</a></p>\n</li>\n<li>\n<p>关于 macOS 恢复功能<br>\n<a href=\"https://support.apple.com/zh-cn/HT201314\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201314</a></p>\n</li>\n<li>\n<p>使用 Time Machine 备份或恢复 Mac<br>\n<a href=\"https://support.apple.com/zh-cn/HT201250\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201250</a></p>\n</li>\n<li>\n<p>如何重置 Mac 上的 NVRAM        Command-Option-P-R<br>\n<a href=\"https://support.apple.com/zh-cn/HT204063\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT204063</a></p>\n</li>\n<li>\n<p>重置 Mac 上的系统管理控制器 (SMC)       Shift-Control-Option<br>\n<a href=\"https://support.apple.com/zh-cn/HT201295\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201295</a></p>\n</li>\n<li>\n<p>如何识别 MacBook Pro 机型<br>\n<a href=\"https://support.apple.com/zh-cn/HT201300\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201300</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"u盘启动\"><a class=\"markdownIt-Anchor\" href=\"#u盘启动\"></a> U盘启动</h1>\n<p>U盘启动：目的是为了在没有装系统的情况下进行临时启动，它可以启动DOS、备份还原软件或内存中运行的PE系统。现在大部分的电脑都支持U盘启动。U盘启动在系统奔溃和快速安装系统时能起到很大的作用。</p>\n<h1 id=\"mac系统安装启动盘制作\"><a class=\"markdownIt-Anchor\" href=\"#mac系统安装启动盘制作\"></a> mac系统安装启动盘制作</h1>\n<ol>\n<li>准备一个 8GB 或更大容量的 U盘，并备份好里面的所有资料</li>\n<li>下载好需要安装的系统。在App Store中搜索系统，如：MacOS Sierra，完成下载。</li>\n<li>打开 “应用程序 → 实用工具 → 磁盘工具”，将U盘「抹掉」(格式化) 成「Mac OS X 扩展（日志式）」格式、GUID 分区图，并将U盘命名为「Sierra」。(注意：这个盘符名称将会与后面的命令一一对应，如果你改了这盘符的名字，必须保证后面的命令里的名称也要一致)</li>\n<li>打开 “应用程序→实用工具→终端”，将下面的一段命令复制并粘贴进去：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /Applications/Install\\ macOS\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/Sierra --applicationpath /Applications/Install\\ macOS\\ Sierra.app --nointeraction</span><br></pre></td></tr></table></figure>\n<p>回车并执行该命令，这时会提示让你输入管理员密码，便会开始制作过程了：<br>\n<img src=\"/pub-images/macOS%E5%88%B6%E4%BD%9CU%E7%9B%98%E5%90%AF%E5%8A%A8.png\" alt=\"image\"></p>\n<p>如上图，这时系统已经在制作中了，请耐心等待直到屏幕最后出现 Done. 字样即表示大功告成了</p>\n<h1 id=\"mac系统u盘安装\"><a class=\"markdownIt-Anchor\" href=\"#mac系统u盘安装\"></a> mac系统U盘安装</h1>\n<ol start=\"0\">\n<li>（此步骤可选：如果想格式化磁盘则进行此操作）启动时按住[command + r]，进入磁盘管理工具抹掉磁盘即可</li>\n<li>先在目标电脑上插上 U 盘，然后重启你的 Mac，然后一直按住[option」(alt)] 按键不放，直到屏幕显示多出一个 USB 启动盘的选项。</li>\n<li>选择 U 盘的图标回车，即可通过 U 盘来安装 macOS Sierra 了！这时，你可以直接覆盖安装系统(升级)，也可以在磁盘工具里面格式化抹掉整个硬盘，或者重新分区等实现全新的干净的安装</li>\n<li>启动过程中电脑会重启，重启的时候，拔掉U盘</li>\n</ol>\n<h1 id=\"安装软件\"><a class=\"markdownIt-Anchor\" href=\"#安装软件\"></a> 安装软件</h1>\n<ul>\n<li>在登陆App Store之后，往常安装过的软件在&quot;已购项目&quot;列表中有，不用每次安装系统后再一一去查找安装过的程序。</li>\n</ul>\n<p>非App Store安装的程序，在安装时，又是会提示app出现某些安装包已损坏、显示未激活、打开崩溃等的提示！！这种多是因为新系统屏蔽了任何来源的设置，所以需要大家打开“允许任何来源”方可安装，可按如下方式操作</p>\n<ul>\n<li>步骤1：Spotlight搜索(快捷键：command+空格或右上角搜索的符号)：搜索 “终端”</li>\n<li>步骤2：直接复制粘贴 sudo spctl --master-disable   回车</li>\n<li>步骤3：输入你的 开机密码</li>\n<li>步骤4：回到系统偏好设置 的“安全与隐私”，勾选 “允许任何来源”完成安装.</li>\n</ul>\n<h1 id=\"macos一些其他维护相关知识\"><a class=\"markdownIt-Anchor\" href=\"#macos一些其他维护相关知识\"></a> macOS一些其他维护相关知识</h1>\n<p>官方技术支持网址：<a href=\"https://support.apple.com/zh-cn\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn</a></p>\n<ol>\n<li>\n<p>关于 Mac 启动时您看到的屏幕：在从 OS X 启动 Mac 时，系统会显示不同的屏幕，以让您了解 Mac 的启动方式，或是启动可能未完成的原因。<br>\n<a href=\"https://support.apple.com/zh-cn/HT204156\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT204156</a></p>\n</li>\n<li>\n<p>启动 Mac 时显示闪烁的问号<br>\n如果启动时在 Mac 屏幕上看到闪烁的问号，这意味着您的 Mac 无法找到自身的系统软件。<br>\n<a href=\"https://support.apple.com/zh-cn/HT204323\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT204323</a></p>\n</li>\n<li>\n<p>如何重新安装 macOS<br>\n<a href=\"https://support.apple.com/zh-cn/HT204904\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT204904</a></p>\n</li>\n<li>\n<p>关于 macOS 恢复功能<br>\n<a href=\"https://support.apple.com/zh-cn/HT201314\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201314</a></p>\n</li>\n<li>\n<p>使用 Time Machine 备份或恢复 Mac<br>\n<a href=\"https://support.apple.com/zh-cn/HT201250\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201250</a></p>\n</li>\n<li>\n<p>如何重置 Mac 上的 NVRAM        Command-Option-P-R<br>\n<a href=\"https://support.apple.com/zh-cn/HT204063\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT204063</a></p>\n</li>\n<li>\n<p>重置 Mac 上的系统管理控制器 (SMC)       Shift-Control-Option<br>\n<a href=\"https://support.apple.com/zh-cn/HT201295\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201295</a></p>\n</li>\n<li>\n<p>如何识别 MacBook Pro 机型<br>\n<a href=\"https://support.apple.com/zh-cn/HT201300\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201300</a></p>\n</li>\n</ol>\n"},{"title":"mac系统神奇：Homebrew","copyright":true,"comments":1,"toc":true,"date":"2018-12-19T07:29:55.000Z","password":null,"_content":"\n# Homebrew\nHomebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。\n\n可以类比Homebrew的功能类似于前端技术的npm，RetHat系列的yum，Ubuntu系统的apt-get\n\n# 安装\n参考官网，使用非常简单： https://brew.sh/index_zh-cn\n安装完之后可更新源： brew update/brew upgrade \n\n# Homebrew使用\n搜索软件：brew search 软件名，如brew search wget\n安装软件：brew install 软件名，如brew install wget\n卸载软件：brew remove 软件名，如brew remove wget\n\n在macOS系统上，git、node都推荐通过Homebrew安装","source":"_posts/环境搭建/02_Homebrew.md","raw":"---\ntitle: mac系统神奇：Homebrew\ntags:\n  - 环境搭建\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-12-19 15:29:55\ncategories:\npassword:\n---\n\n# Homebrew\nHomebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。\n\n可以类比Homebrew的功能类似于前端技术的npm，RetHat系列的yum，Ubuntu系统的apt-get\n\n# 安装\n参考官网，使用非常简单： https://brew.sh/index_zh-cn\n安装完之后可更新源： brew update/brew upgrade \n\n# Homebrew使用\n搜索软件：brew search 软件名，如brew search wget\n安装软件：brew install 软件名，如brew install wget\n卸载软件：brew remove 软件名，如brew remove wget\n\n在macOS系统上，git、node都推荐通过Homebrew安装","slug":"环境搭建-02-Homebrew","published":1,"updated":"2019-01-10T17:26:38.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytry1004rck8h3t8zdn54","content":"<h1 id=\"homebrew\"><a class=\"markdownIt-Anchor\" href=\"#homebrew\"></a> Homebrew</h1>\n<p>Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。</p>\n<p>可以类比Homebrew的功能类似于前端技术的npm，RetHat系列的yum，Ubuntu系统的apt-get</p>\n<h1 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h1>\n<p>参考官网，使用非常简单： <a href=\"https://brew.sh/index_zh-cn\" target=\"_blank\" rel=\"noopener\">https://brew.sh/index_zh-cn</a><br>\n安装完之后可更新源： brew update/brew upgrade</p>\n<h1 id=\"homebrew使用\"><a class=\"markdownIt-Anchor\" href=\"#homebrew使用\"></a> Homebrew使用</h1>\n<p>搜索软件：brew search 软件名，如brew search wget<br>\n安装软件：brew install 软件名，如brew install wget<br>\n卸载软件：brew remove 软件名，如brew remove wget</p>\n<p>在macOS系统上，git、node都推荐通过Homebrew安装</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"homebrew\"><a class=\"markdownIt-Anchor\" href=\"#homebrew\"></a> Homebrew</h1>\n<p>Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。</p>\n<p>可以类比Homebrew的功能类似于前端技术的npm，RetHat系列的yum，Ubuntu系统的apt-get</p>\n<h1 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h1>\n<p>参考官网，使用非常简单： <a href=\"https://brew.sh/index_zh-cn\" target=\"_blank\" rel=\"noopener\">https://brew.sh/index_zh-cn</a><br>\n安装完之后可更新源： brew update/brew upgrade</p>\n<h1 id=\"homebrew使用\"><a class=\"markdownIt-Anchor\" href=\"#homebrew使用\"></a> Homebrew使用</h1>\n<p>搜索软件：brew search 软件名，如brew search wget<br>\n安装软件：brew install 软件名，如brew install wget<br>\n卸载软件：brew remove 软件名，如brew remove wget</p>\n<p>在macOS系统上，git、node都推荐通过Homebrew安装</p>\n"},{"title":"node安装配置","copyright":true,"comments":1,"toc":true,"date":"2018-12-19T07:29:55.000Z","password":null,"_content":"\n# 相关概念\nnodejs：在项目开发时的所需要的代码库\nnvm：nodejs 版本管理工具。\nnpm：nodejs包管理工具，在安装的 nodejs 的时候，npm也会跟着一起安装，它是包管理工具，管理nodejs中的第三方插件\nyarn：Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具 ， 是为了弥补 npm 的一些缺陷而出现的\n即：一个nvm可以管理多个node版本和npm版本\n\n# nvm安装\n官网： https://github.com/creationix/nvm\n安装：curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash\n安装完成后的提示界面会有类似一下的提示信息：\n~~~\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n~~~\n在~/.bash_profile中添加以上内容(如果没有这个文件则创建)后保存；通过source ~/.bash_profile使设置生效。 \n安装完成后关闭终端，重新打开终端输入 nvm 验证一下是否安装成功\n\n注：curl看系统是否已安装，如果没有安装则：sudo apt-get install curl\n\n# nvm常用命令\nnvm install stable ## 安装最新稳定版 node，当前是node v9.5.0 (npm v5.6.0)\nnvm install <version> ## 安装指定版本，可模糊安装，如：安装v4.4.0，既可nvm install v4.4.0，又可nvm install 4.4\nnvm uninstall <version> ## 删除已安装的指定版本，语法与install类似\nnvm use <version> ## 切换使用指定的版本node\nnvm ls ## 列出所有安装的版本\nnvm ls-remote ## 列出所有远程服务器的版本（官方node version list）\nnvm current ## 显示当前的版本\nnvm alias <name> <version> ## 给不同的版本号添加别名\nnvm unalias <name> ## 删除已定义的别名\nnvm reinstall-packages <version> ## 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包 \n\n# nvm安装node\nnvm install stable\n\n# yarn\n快速、可靠、安全的依赖管理工具\n## 安装\nbrew install yarn\nbrew install yarn --without-node\n\n# Yarn和npm命令对比\nnpm |\tyarn\n----|-------\nnpm install |\tyarn install\nnpm install react --save |\tyarn add react\nnpm uninstall react --save |\tyarn remove react\nnpm install react --save-dev |\tyarn add react --dev\nnpm update --save |\tyarn upgrade\n\n ","source":"_posts/环境搭建/05_node安装.md","raw":"---\ntitle: node安装配置\ntags:\n  - 环境搭建\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-12-19 15:29:55\ncategories:\npassword:\n---\n\n# 相关概念\nnodejs：在项目开发时的所需要的代码库\nnvm：nodejs 版本管理工具。\nnpm：nodejs包管理工具，在安装的 nodejs 的时候，npm也会跟着一起安装，它是包管理工具，管理nodejs中的第三方插件\nyarn：Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具 ， 是为了弥补 npm 的一些缺陷而出现的\n即：一个nvm可以管理多个node版本和npm版本\n\n# nvm安装\n官网： https://github.com/creationix/nvm\n安装：curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash\n安装完成后的提示界面会有类似一下的提示信息：\n~~~\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n~~~\n在~/.bash_profile中添加以上内容(如果没有这个文件则创建)后保存；通过source ~/.bash_profile使设置生效。 \n安装完成后关闭终端，重新打开终端输入 nvm 验证一下是否安装成功\n\n注：curl看系统是否已安装，如果没有安装则：sudo apt-get install curl\n\n# nvm常用命令\nnvm install stable ## 安装最新稳定版 node，当前是node v9.5.0 (npm v5.6.0)\nnvm install <version> ## 安装指定版本，可模糊安装，如：安装v4.4.0，既可nvm install v4.4.0，又可nvm install 4.4\nnvm uninstall <version> ## 删除已安装的指定版本，语法与install类似\nnvm use <version> ## 切换使用指定的版本node\nnvm ls ## 列出所有安装的版本\nnvm ls-remote ## 列出所有远程服务器的版本（官方node version list）\nnvm current ## 显示当前的版本\nnvm alias <name> <version> ## 给不同的版本号添加别名\nnvm unalias <name> ## 删除已定义的别名\nnvm reinstall-packages <version> ## 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包 \n\n# nvm安装node\nnvm install stable\n\n# yarn\n快速、可靠、安全的依赖管理工具\n## 安装\nbrew install yarn\nbrew install yarn --without-node\n\n# Yarn和npm命令对比\nnpm |\tyarn\n----|-------\nnpm install |\tyarn install\nnpm install react --save |\tyarn add react\nnpm uninstall react --save |\tyarn remove react\nnpm install react --save-dev |\tyarn add react --dev\nnpm update --save |\tyarn upgrade\n\n ","slug":"环境搭建-05-node安装","published":1,"updated":"2019-01-21T08:52:33.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytry3004wck8h15dro8ip","content":"<h1 id=\"相关概念\"><a class=\"markdownIt-Anchor\" href=\"#相关概念\"></a> 相关概念</h1>\n<p>nodejs：在项目开发时的所需要的代码库<br>\nnvm：nodejs 版本管理工具。<br>\nnpm：nodejs包管理工具，在安装的 nodejs 的时候，npm也会跟着一起安装，它是包管理工具，管理nodejs中的第三方插件<br>\nyarn：Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具 ， 是为了弥补 npm 的一些缺陷而出现的<br>\n即：一个nvm可以管理多个node版本和npm版本</p>\n<h1 id=\"nvm安装\"><a class=\"markdownIt-Anchor\" href=\"#nvm安装\"></a> nvm安装</h1>\n<p>官网： <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">https://github.com/creationix/nvm</a><br>\n安装：curl -o- <a href=\"https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh</a> | bash<br>\n安装完成后的提示界面会有类似一下的提示信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class=\"line\">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br></pre></td></tr></table></figure>\n<p>在~/.bash_profile中添加以上内容(如果没有这个文件则创建)后保存；通过source ~/.bash_profile使设置生效。<br>\n安装完成后关闭终端，重新打开终端输入 nvm 验证一下是否安装成功</p>\n<p>注：curl看系统是否已安装，如果没有安装则：sudo apt-get install curl</p>\n<h1 id=\"nvm常用命令\"><a class=\"markdownIt-Anchor\" href=\"#nvm常用命令\"></a> nvm常用命令</h1>\n<p>nvm install stable ## 安装最新稳定版 node，当前是node v9.5.0 (npm v5.6.0)<br>\nnvm install <version> ## 安装指定版本，可模糊安装，如：安装v4.4.0，既可nvm install v4.4.0，又可nvm install 4.4<br>\nnvm uninstall <version> ## 删除已安装的指定版本，语法与install类似<br>\nnvm use <version> ## 切换使用指定的版本node<br>\nnvm ls ## 列出所有安装的版本<br>\nnvm ls-remote ## 列出所有远程服务器的版本（官方node version list）<br>\nnvm current ## 显示当前的版本<br>\nnvm alias <name> <version> ## 给不同的版本号添加别名<br>\nnvm unalias <name> ## 删除已定义的别名<br>\nnvm reinstall-packages <version> ## 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包</version></name></version></name></version></version></version></p>\n<h1 id=\"nvm安装node\"><a class=\"markdownIt-Anchor\" href=\"#nvm安装node\"></a> nvm安装node</h1>\n<p>nvm install stable</p>\n<h1 id=\"yarn\"><a class=\"markdownIt-Anchor\" href=\"#yarn\"></a> yarn</h1>\n<p>快速、可靠、安全的依赖管理工具</p>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h2>\n<p>brew install yarn<br>\nbrew install yarn --without-node</p>\n<h1 id=\"yarn和npm命令对比\"><a class=\"markdownIt-Anchor\" href=\"#yarn和npm命令对比\"></a> Yarn和npm命令对比</h1>\n<table>\n<thead>\n<tr>\n<th>npm</th>\n<th>yarn</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>npm install</td>\n<td>yarn install</td>\n</tr>\n<tr>\n<td>npm install react --save</td>\n<td>yarn add react</td>\n</tr>\n<tr>\n<td>npm uninstall react --save</td>\n<td>yarn remove react</td>\n</tr>\n<tr>\n<td>npm install react --save-dev</td>\n<td>yarn add react --dev</td>\n</tr>\n<tr>\n<td>npm update --save</td>\n<td>yarn upgrade</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"相关概念\"><a class=\"markdownIt-Anchor\" href=\"#相关概念\"></a> 相关概念</h1>\n<p>nodejs：在项目开发时的所需要的代码库<br>\nnvm：nodejs 版本管理工具。<br>\nnpm：nodejs包管理工具，在安装的 nodejs 的时候，npm也会跟着一起安装，它是包管理工具，管理nodejs中的第三方插件<br>\nyarn：Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具 ， 是为了弥补 npm 的一些缺陷而出现的<br>\n即：一个nvm可以管理多个node版本和npm版本</p>\n<h1 id=\"nvm安装\"><a class=\"markdownIt-Anchor\" href=\"#nvm安装\"></a> nvm安装</h1>\n<p>官网： <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">https://github.com/creationix/nvm</a><br>\n安装：curl -o- <a href=\"https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh</a> | bash<br>\n安装完成后的提示界面会有类似一下的提示信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class=\"line\">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br></pre></td></tr></table></figure>\n<p>在~/.bash_profile中添加以上内容(如果没有这个文件则创建)后保存；通过source ~/.bash_profile使设置生效。<br>\n安装完成后关闭终端，重新打开终端输入 nvm 验证一下是否安装成功</p>\n<p>注：curl看系统是否已安装，如果没有安装则：sudo apt-get install curl</p>\n<h1 id=\"nvm常用命令\"><a class=\"markdownIt-Anchor\" href=\"#nvm常用命令\"></a> nvm常用命令</h1>\n<p>nvm install stable ## 安装最新稳定版 node，当前是node v9.5.0 (npm v5.6.0)<br>\nnvm install <version> ## 安装指定版本，可模糊安装，如：安装v4.4.0，既可nvm install v4.4.0，又可nvm install 4.4<br>\nnvm uninstall <version> ## 删除已安装的指定版本，语法与install类似<br>\nnvm use <version> ## 切换使用指定的版本node<br>\nnvm ls ## 列出所有安装的版本<br>\nnvm ls-remote ## 列出所有远程服务器的版本（官方node version list）<br>\nnvm current ## 显示当前的版本<br>\nnvm alias <name> <version> ## 给不同的版本号添加别名<br>\nnvm unalias <name> ## 删除已定义的别名<br>\nnvm reinstall-packages <version> ## 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包</version></name></version></name></version></version></version></p>\n<h1 id=\"nvm安装node\"><a class=\"markdownIt-Anchor\" href=\"#nvm安装node\"></a> nvm安装node</h1>\n<p>nvm install stable</p>\n<h1 id=\"yarn\"><a class=\"markdownIt-Anchor\" href=\"#yarn\"></a> yarn</h1>\n<p>快速、可靠、安全的依赖管理工具</p>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h2>\n<p>brew install yarn<br>\nbrew install yarn --without-node</p>\n<h1 id=\"yarn和npm命令对比\"><a class=\"markdownIt-Anchor\" href=\"#yarn和npm命令对比\"></a> Yarn和npm命令对比</h1>\n<table>\n<thead>\n<tr>\n<th>npm</th>\n<th>yarn</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>npm install</td>\n<td>yarn install</td>\n</tr>\n<tr>\n<td>npm install react --save</td>\n<td>yarn add react</td>\n</tr>\n<tr>\n<td>npm uninstall react --save</td>\n<td>yarn remove react</td>\n</tr>\n<tr>\n<td>npm install react --save-dev</td>\n<td>yarn add react --dev</td>\n</tr>\n<tr>\n<td>npm update --save</td>\n<td>yarn upgrade</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"mac虚拟机安装及设置","copyright":true,"comments":1,"toc":true,"date":"2018-12-19T07:29:55.000Z","password":null,"_content":"\n# 简介\nParallels Desktop是一款运行在 Mac 电脑上的极为优秀的虚拟机软件。用户可以在 Mac OS X 下非常方便运行 Windows、Linux 等操作系统及应用。\n\n# 安装\nPD为收费软件，链接: https://pan.baidu.com/s/1CBa7tIghlF7JIiJTtuqdYQ 提取码: es9m，有经济能力的希望支持正版\n\nPD安装操作系统需准备一个系统ISO镜像,虚拟机系统安装过程和普通系统安装过程基本一致。\nwindows10镜像下载： https://www.microsoft.com/zh-cn/software-download/windows10ISO/\n\n系统安装完成之后，需安装Parallels Tools，否则使用时鼠标使用等方面会有很多不便，注意安装Parallels Tools时注意PD版本，防止有和系统不兼容。\n如下图：\n![image](/pub-images/Parallels%20Tools.png)\n\n# PD使用注意事项\n1. 虚拟机系统安装完之后在虚拟机系统的【配置】中进行系统内存、硬盘相关参数设置\n2. 虚拟机系统安装完之后在虚拟机系统的【配置】中进行系统共享文件夹设置，方便系统间数据共享\n3. 虚拟机初试安装后，再进行系统其他重要软件安装前，请先保存快照，再进行操作，操作不成功还可回退\n4. 虚拟机系统更新、相关开发环境设置完成之后，建议移动硬盘保存虚拟机，方便后期恢复和循环使用\n5. 虚拟机系统文件在右键【显示包内容】后，如下\n![image](/pub-images/虚拟机文件结构.png)\n其中.hdd文件为硬盘文件，可在虚拟机系统故障时优先保存此文件，或者将此文件复制替换到备份的虚拟机系统即可恢复\n\n\n\n\n\n\n ","source":"_posts/环境搭建/03_mac虚拟机安装系统及设置.md","raw":"---\ntitle: mac虚拟机安装及设置\ntags:\n  - 环境搭建\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-12-19 15:29:55\ncategories:\npassword:\n---\n\n# 简介\nParallels Desktop是一款运行在 Mac 电脑上的极为优秀的虚拟机软件。用户可以在 Mac OS X 下非常方便运行 Windows、Linux 等操作系统及应用。\n\n# 安装\nPD为收费软件，链接: https://pan.baidu.com/s/1CBa7tIghlF7JIiJTtuqdYQ 提取码: es9m，有经济能力的希望支持正版\n\nPD安装操作系统需准备一个系统ISO镜像,虚拟机系统安装过程和普通系统安装过程基本一致。\nwindows10镜像下载： https://www.microsoft.com/zh-cn/software-download/windows10ISO/\n\n系统安装完成之后，需安装Parallels Tools，否则使用时鼠标使用等方面会有很多不便，注意安装Parallels Tools时注意PD版本，防止有和系统不兼容。\n如下图：\n![image](/pub-images/Parallels%20Tools.png)\n\n# PD使用注意事项\n1. 虚拟机系统安装完之后在虚拟机系统的【配置】中进行系统内存、硬盘相关参数设置\n2. 虚拟机系统安装完之后在虚拟机系统的【配置】中进行系统共享文件夹设置，方便系统间数据共享\n3. 虚拟机初试安装后，再进行系统其他重要软件安装前，请先保存快照，再进行操作，操作不成功还可回退\n4. 虚拟机系统更新、相关开发环境设置完成之后，建议移动硬盘保存虚拟机，方便后期恢复和循环使用\n5. 虚拟机系统文件在右键【显示包内容】后，如下\n![image](/pub-images/虚拟机文件结构.png)\n其中.hdd文件为硬盘文件，可在虚拟机系统故障时优先保存此文件，或者将此文件复制替换到备份的虚拟机系统即可恢复\n\n\n\n\n\n\n ","slug":"环境搭建-03-mac虚拟机安装系统及设置","published":1,"updated":"2019-02-14T01:41:31.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytry3004xck8hpfokhpry","content":"<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<p>Parallels Desktop是一款运行在 Mac 电脑上的极为优秀的虚拟机软件。用户可以在 Mac OS X 下非常方便运行 Windows、Linux 等操作系统及应用。</p>\n<h1 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h1>\n<p>PD为收费软件，链接: <a href=\"https://pan.baidu.com/s/1CBa7tIghlF7JIiJTtuqdYQ\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1CBa7tIghlF7JIiJTtuqdYQ</a> 提取码: es9m，有经济能力的希望支持正版</p>\n<p>PD安装操作系统需准备一个系统ISO镜像,虚拟机系统安装过程和普通系统安装过程基本一致。<br>\nwindows10镜像下载： <a href=\"https://www.microsoft.com/zh-cn/software-download/windows10ISO/\" target=\"_blank\" rel=\"noopener\">https://www.microsoft.com/zh-cn/software-download/windows10ISO/</a></p>\n<p>系统安装完成之后，需安装Parallels Tools，否则使用时鼠标使用等方面会有很多不便，注意安装Parallels Tools时注意PD版本，防止有和系统不兼容。<br>\n如下图：<br>\n<img src=\"/pub-images/Parallels%20Tools.png\" alt=\"image\"></p>\n<h1 id=\"pd使用注意事项\"><a class=\"markdownIt-Anchor\" href=\"#pd使用注意事项\"></a> PD使用注意事项</h1>\n<ol>\n<li>虚拟机系统安装完之后在虚拟机系统的【配置】中进行系统内存、硬盘相关参数设置</li>\n<li>虚拟机系统安装完之后在虚拟机系统的【配置】中进行系统共享文件夹设置，方便系统间数据共享</li>\n<li>虚拟机初试安装后，再进行系统其他重要软件安装前，请先保存快照，再进行操作，操作不成功还可回退</li>\n<li>虚拟机系统更新、相关开发环境设置完成之后，建议移动硬盘保存虚拟机，方便后期恢复和循环使用</li>\n<li>虚拟机系统文件在右键【显示包内容】后，如下<br>\n<img src=\"/pub-images/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png\" alt=\"image\"><br>\n其中.hdd文件为硬盘文件，可在虚拟机系统故障时优先保存此文件，或者将此文件复制替换到备份的虚拟机系统即可恢复</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<p>Parallels Desktop是一款运行在 Mac 电脑上的极为优秀的虚拟机软件。用户可以在 Mac OS X 下非常方便运行 Windows、Linux 等操作系统及应用。</p>\n<h1 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h1>\n<p>PD为收费软件，链接: <a href=\"https://pan.baidu.com/s/1CBa7tIghlF7JIiJTtuqdYQ\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1CBa7tIghlF7JIiJTtuqdYQ</a> 提取码: es9m，有经济能力的希望支持正版</p>\n<p>PD安装操作系统需准备一个系统ISO镜像,虚拟机系统安装过程和普通系统安装过程基本一致。<br>\nwindows10镜像下载： <a href=\"https://www.microsoft.com/zh-cn/software-download/windows10ISO/\" target=\"_blank\" rel=\"noopener\">https://www.microsoft.com/zh-cn/software-download/windows10ISO/</a></p>\n<p>系统安装完成之后，需安装Parallels Tools，否则使用时鼠标使用等方面会有很多不便，注意安装Parallels Tools时注意PD版本，防止有和系统不兼容。<br>\n如下图：<br>\n<img src=\"/pub-images/Parallels%20Tools.png\" alt=\"image\"></p>\n<h1 id=\"pd使用注意事项\"><a class=\"markdownIt-Anchor\" href=\"#pd使用注意事项\"></a> PD使用注意事项</h1>\n<ol>\n<li>虚拟机系统安装完之后在虚拟机系统的【配置】中进行系统内存、硬盘相关参数设置</li>\n<li>虚拟机系统安装完之后在虚拟机系统的【配置】中进行系统共享文件夹设置，方便系统间数据共享</li>\n<li>虚拟机初试安装后，再进行系统其他重要软件安装前，请先保存快照，再进行操作，操作不成功还可回退</li>\n<li>虚拟机系统更新、相关开发环境设置完成之后，建议移动硬盘保存虚拟机，方便后期恢复和循环使用</li>\n<li>虚拟机系统文件在右键【显示包内容】后，如下<br>\n<img src=\"/pub-images/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png\" alt=\"image\"><br>\n其中.hdd文件为硬盘文件，可在虚拟机系统故障时优先保存此文件，或者将此文件复制替换到备份的虚拟机系统即可恢复</li>\n</ol>\n"},{"title":"git安装配置","copyright":true,"comments":1,"toc":true,"date":"2018-12-19T07:29:55.000Z","password":null,"_content":"\n# 简介\n官网：https://git-scm.com/\nGit是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\nGit 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\nGit 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。\n\n详细学习，推荐：\n* http://www.runoob.com/git/git-tutorial.html\n* 廖雪峰大神的git教程\nhttps://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\n* git的前世今生： https://blog.csdn.net/csdnprogram/article/details/52155078\n\n# 工作原理\n## 本地\n* 工作区（Working Directory）：就是你在电脑里能看到的目录\n* 版本库（Repository）：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库\nGit的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。\n\n![image](/pub-images/git.png)\n我们把文件往Git版本库里添加的时候，是分两步执行的：\n* 第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；\n* 第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。\n\n## 远程配合\n![image](/pub-images/git2.png)\n\n# git安装\n参考教程：https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\n\n各平台都支持安装包安装方式\n\n## mac系统\n~~~\n> brew install git\n> git --version //验证安装\n~~~\n\n# git全局设置\nconfig 配置有system级别 global（用户级别） 和local（当前仓库）三个 设置先从system-》global-》local,底层配置会覆盖顶层配置 \n查看git不同级别配置信息\n~~~\ngit config --system --list\ngit config --global --list\ngit config --和local --list\n~~~\n\ngit安装完成后，还需要最后一步设置，在命令行输入：\n\n~~~\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n~~~\n因为Git是分布式版本控制系统，所以，每个机器都必须自报家门\n\n# git账号关联流程\n1. 生成SSHkey\nssh-keygen命令用于为“ssh”生成、管理和转换认证密钥，它支持RSA和DSA两种认证密钥.\nssh-keygen(选项)\n~~~\n-b：指定密钥长度； \n-e：读取openssh的私钥或者公钥文件； \n-C：添加注释； \n-f：指定用来保存密钥的文件名； \n-i：读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥； \n-l：显示公钥文件的指纹数据； \n-N：提供一个新密语； \n-P：提供（旧）密语；\n-q：静默模式； \n-t：指定要创建的密钥类型。\n~~~\n2. 登陆git服务器，添加public key信息\n3. 测试登陆\n~~~\n测试是否成功,第一此输入命令，需输入yes后再次输入测试命令后出现类似\"Hi...\"，表示配置成功\n> ssh -T git@github.com\n> ssh -T git@gitee.com\n> ssh -T git@gitlab.com\n~~~\n\n# git单账号关联\n~~~\n> ssh-keygen -t rsa -C xxxxx@gmail.com（注册github时的email）\n> cat ~/.ssh/id_rsa.pub\n~~~\n登陆网站，如github／gitee／gitlab等，在如设置／Settings中有SSH and GPG keys中【add new keys】，将id_rsa.pub内容添加，会自动识别标题,设置完成之后测试登陆\n\n\n# git多账号设置关联\n多账号配置是通过.ssh文件夹下config文件实现，操作如下：\n~~~\n> touch ~/.ssh/config \n> chmod 600 ~/.ssh/config \n\n> ssh-keygen -f ~/.ssh/id_rsa.github -t rsa -C \"chetaofeng@163.com\"\n> ssh-keygen -f ~/.ssh/id_rsa.gitee -t rsa -C \"chetaofeng@163.com\"\n> ssh-keygen -f ~/.ssh/id_rsa.gitlab -t rsa -C \"chetaofeng@163.com\"\n~~~\n\nconfig文件内容如下：\n~~~\n# github\nHost github.com\n    HostName github.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa.github\n\n# gitee\nHost gitee.com\n     HostName gitee.com\n     PreferredAuthentications publickey\n     IdentityFile ~/.ssh/id_rsa.gitee\n\n# gitlab\nHost gitlab.com\n     HostName gitlab.com\n     PreferredAuthentications publickey\n     IdentityFile ~/.ssh/id_rsa.gitlab\n~~~\n* Host： 是我们在输入命令的时候的名字 比如我这里是lab  那么我使用ssh命令的时候需要使用 ssh lab \n* HostName： 是目标主机的主机名，也就是平时我们使用ssh后面跟的地址名称。\n* Port：指定的端口号。\n* User：指定的登陆用户名。\n* IdentifyFile：指定的私钥地址。\n \n# .gitignore文件\n不添加到版本库的内容记录，创建项目后一定要添加.gitignore文件\n\n# 开发环境中配置\n在Jetbrains系列开发工具中，【Version Control】界面中github选项默认有，进行设置即可\n![image](/pub-images/github设置.png)\ngitlab／gitee没有配置选项，需先安装相应插件，如下：\n![image](/pub-images/插件安装.png)\n\n以前配置gitlab的时候，是通过Other Settings->GitLab Settings设置如下：\n* GitLab Server Url: https://gitlab.com/\n* GitLab API Key： https://gitlab.com/profile/account\n\n\n# git项目权限管理\nGit项目一般有五种身份权限，分别是：\n* Owner 项目所有者，拥有所有的操作权限\n* Master 项目的管理者，除更改、删除项目元信息外其它操作均可\n* Developer 项目的开发人员，做一些开发工作，对受保护内容无权限\n* Reporter 项目的报告者，只有项目的读权限，可以创建代码片断\n* Guest 项目的游客，只能提交问题和评论内容\n\n# 私服项目使用推荐流程\n> 以下为项目owner需进行工作\n1. 在私服先创建项目，添加人员并设置人员权限\n2. 在本地webstorm中clone项目\n3. 在clone项目中添加.gitignore文件\n4. 添加.gitignore及相关需要版本控制的文件夹到版本控制（选中项后右键操作）\n5. 提交项目并备注为初始提交\n\n> 以下为项目成员需做工作\n1. 在本地webstorm中clone项目\n2. 创建项目分支（可一人一个，也可通过项目模块进行分支创建），如果直接在master分支，则无法成功push项目提示被rejected\n3. 进行代码编写\n4. 提交需管理分支\n5. 在gitlab私服网页发起合并请求，并添加详细描述\n6. 等待相关人员进行合并\n7. 合并结束后更新master分支\n8. 创建分支继续工作","source":"_posts/环境搭建/04_git安装配置.md","raw":"---\ntitle: git安装配置\ntags:\n  - 环境搭建\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-12-19 15:29:55\ncategories:\npassword:\n---\n\n# 简介\n官网：https://git-scm.com/\nGit是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\nGit 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\nGit 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。\n\n详细学习，推荐：\n* http://www.runoob.com/git/git-tutorial.html\n* 廖雪峰大神的git教程\nhttps://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\n* git的前世今生： https://blog.csdn.net/csdnprogram/article/details/52155078\n\n# 工作原理\n## 本地\n* 工作区（Working Directory）：就是你在电脑里能看到的目录\n* 版本库（Repository）：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库\nGit的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。\n\n![image](/pub-images/git.png)\n我们把文件往Git版本库里添加的时候，是分两步执行的：\n* 第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；\n* 第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。\n\n## 远程配合\n![image](/pub-images/git2.png)\n\n# git安装\n参考教程：https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\n\n各平台都支持安装包安装方式\n\n## mac系统\n~~~\n> brew install git\n> git --version //验证安装\n~~~\n\n# git全局设置\nconfig 配置有system级别 global（用户级别） 和local（当前仓库）三个 设置先从system-》global-》local,底层配置会覆盖顶层配置 \n查看git不同级别配置信息\n~~~\ngit config --system --list\ngit config --global --list\ngit config --和local --list\n~~~\n\ngit安装完成后，还需要最后一步设置，在命令行输入：\n\n~~~\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n~~~\n因为Git是分布式版本控制系统，所以，每个机器都必须自报家门\n\n# git账号关联流程\n1. 生成SSHkey\nssh-keygen命令用于为“ssh”生成、管理和转换认证密钥，它支持RSA和DSA两种认证密钥.\nssh-keygen(选项)\n~~~\n-b：指定密钥长度； \n-e：读取openssh的私钥或者公钥文件； \n-C：添加注释； \n-f：指定用来保存密钥的文件名； \n-i：读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥； \n-l：显示公钥文件的指纹数据； \n-N：提供一个新密语； \n-P：提供（旧）密语；\n-q：静默模式； \n-t：指定要创建的密钥类型。\n~~~\n2. 登陆git服务器，添加public key信息\n3. 测试登陆\n~~~\n测试是否成功,第一此输入命令，需输入yes后再次输入测试命令后出现类似\"Hi...\"，表示配置成功\n> ssh -T git@github.com\n> ssh -T git@gitee.com\n> ssh -T git@gitlab.com\n~~~\n\n# git单账号关联\n~~~\n> ssh-keygen -t rsa -C xxxxx@gmail.com（注册github时的email）\n> cat ~/.ssh/id_rsa.pub\n~~~\n登陆网站，如github／gitee／gitlab等，在如设置／Settings中有SSH and GPG keys中【add new keys】，将id_rsa.pub内容添加，会自动识别标题,设置完成之后测试登陆\n\n\n# git多账号设置关联\n多账号配置是通过.ssh文件夹下config文件实现，操作如下：\n~~~\n> touch ~/.ssh/config \n> chmod 600 ~/.ssh/config \n\n> ssh-keygen -f ~/.ssh/id_rsa.github -t rsa -C \"chetaofeng@163.com\"\n> ssh-keygen -f ~/.ssh/id_rsa.gitee -t rsa -C \"chetaofeng@163.com\"\n> ssh-keygen -f ~/.ssh/id_rsa.gitlab -t rsa -C \"chetaofeng@163.com\"\n~~~\n\nconfig文件内容如下：\n~~~\n# github\nHost github.com\n    HostName github.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa.github\n\n# gitee\nHost gitee.com\n     HostName gitee.com\n     PreferredAuthentications publickey\n     IdentityFile ~/.ssh/id_rsa.gitee\n\n# gitlab\nHost gitlab.com\n     HostName gitlab.com\n     PreferredAuthentications publickey\n     IdentityFile ~/.ssh/id_rsa.gitlab\n~~~\n* Host： 是我们在输入命令的时候的名字 比如我这里是lab  那么我使用ssh命令的时候需要使用 ssh lab \n* HostName： 是目标主机的主机名，也就是平时我们使用ssh后面跟的地址名称。\n* Port：指定的端口号。\n* User：指定的登陆用户名。\n* IdentifyFile：指定的私钥地址。\n \n# .gitignore文件\n不添加到版本库的内容记录，创建项目后一定要添加.gitignore文件\n\n# 开发环境中配置\n在Jetbrains系列开发工具中，【Version Control】界面中github选项默认有，进行设置即可\n![image](/pub-images/github设置.png)\ngitlab／gitee没有配置选项，需先安装相应插件，如下：\n![image](/pub-images/插件安装.png)\n\n以前配置gitlab的时候，是通过Other Settings->GitLab Settings设置如下：\n* GitLab Server Url: https://gitlab.com/\n* GitLab API Key： https://gitlab.com/profile/account\n\n\n# git项目权限管理\nGit项目一般有五种身份权限，分别是：\n* Owner 项目所有者，拥有所有的操作权限\n* Master 项目的管理者，除更改、删除项目元信息外其它操作均可\n* Developer 项目的开发人员，做一些开发工作，对受保护内容无权限\n* Reporter 项目的报告者，只有项目的读权限，可以创建代码片断\n* Guest 项目的游客，只能提交问题和评论内容\n\n# 私服项目使用推荐流程\n> 以下为项目owner需进行工作\n1. 在私服先创建项目，添加人员并设置人员权限\n2. 在本地webstorm中clone项目\n3. 在clone项目中添加.gitignore文件\n4. 添加.gitignore及相关需要版本控制的文件夹到版本控制（选中项后右键操作）\n5. 提交项目并备注为初始提交\n\n> 以下为项目成员需做工作\n1. 在本地webstorm中clone项目\n2. 创建项目分支（可一人一个，也可通过项目模块进行分支创建），如果直接在master分支，则无法成功push项目提示被rejected\n3. 进行代码编写\n4. 提交需管理分支\n5. 在gitlab私服网页发起合并请求，并添加详细描述\n6. 等待相关人员进行合并\n7. 合并结束后更新master分支\n8. 创建分支继续工作","slug":"环境搭建-04-git安装配置","published":1,"updated":"2019-02-14T01:41:31.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytry5004zck8hntr2x4yu","content":"<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<p>官网：<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a><br>\nGit是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br>\nGit 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>\nGit 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p>\n<p>详细学习，推荐：</p>\n<ul>\n<li><a href=\"http://www.runoob.com/git/git-tutorial.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/git/git-tutorial.html</a></li>\n<li>廖雪峰大神的git教程<br>\n<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></li>\n<li>git的前世今生： <a href=\"https://blog.csdn.net/csdnprogram/article/details/52155078\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/csdnprogram/article/details/52155078</a></li>\n</ul>\n<h1 id=\"工作原理\"><a class=\"markdownIt-Anchor\" href=\"#工作原理\"></a> 工作原理</h1>\n<h2 id=\"本地\"><a class=\"markdownIt-Anchor\" href=\"#本地\"></a> 本地</h2>\n<ul>\n<li>工作区（Working Directory）：就是你在电脑里能看到的目录</li>\n<li>版本库（Repository）：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库<br>\nGit的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</li>\n</ul>\n<p><img src=\"/pub-images/git.png\" alt=\"image\"><br>\n我们把文件往Git版本库里添加的时候，是分两步执行的：</p>\n<ul>\n<li>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；</li>\n<li>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。</li>\n</ul>\n<h2 id=\"远程配合\"><a class=\"markdownIt-Anchor\" href=\"#远程配合\"></a> 远程配合</h2>\n<p><img src=\"/pub-images/git2.png\" alt=\"image\"></p>\n<h1 id=\"git安装\"><a class=\"markdownIt-Anchor\" href=\"#git安装\"></a> git安装</h1>\n<p>参考教程：<a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/book/zh/v2/起步-安装-Git</a></p>\n<p>各平台都支持安装包安装方式</p>\n<h2 id=\"mac系统\"><a class=\"markdownIt-Anchor\" href=\"#mac系统\"></a> mac系统</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; brew install git</span><br><span class=\"line\">&gt; git --version //验证安装</span><br></pre></td></tr></table></figure>\n<h1 id=\"git全局设置\"><a class=\"markdownIt-Anchor\" href=\"#git全局设置\"></a> git全局设置</h1>\n<p>config 配置有system级别 global（用户级别） 和local（当前仓库）三个 设置先从system-》global-》local,底层配置会覆盖顶层配置<br>\n查看git不同级别配置信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --system --list</span><br><span class=\"line\">git config --global --list</span><br><span class=\"line\">git config --和local --list</span><br></pre></td></tr></table></figure>\n<p>git安装完成后，还需要最后一步设置，在命令行输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;Your Name&quot;</span><br><span class=\"line\">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure>\n<p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门</p>\n<h1 id=\"git账号关联流程\"><a class=\"markdownIt-Anchor\" href=\"#git账号关联流程\"></a> git账号关联流程</h1>\n<ol>\n<li>生成SSHkey<br>\nssh-keygen命令用于为“ssh”生成、管理和转换认证密钥，它支持RSA和DSA两种认证密钥.<br>\nssh-keygen(选项)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-b：指定密钥长度； </span><br><span class=\"line\">-e：读取openssh的私钥或者公钥文件； </span><br><span class=\"line\">-C：添加注释； </span><br><span class=\"line\">-f：指定用来保存密钥的文件名； </span><br><span class=\"line\">-i：读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥； </span><br><span class=\"line\">-l：显示公钥文件的指纹数据； </span><br><span class=\"line\">-N：提供一个新密语； </span><br><span class=\"line\">-P：提供（旧）密语；</span><br><span class=\"line\">-q：静默模式； </span><br><span class=\"line\">-t：指定要创建的密钥类型。</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>登陆git服务器，添加public key信息</li>\n<li>测试登陆</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">测试是否成功,第一此输入命令，需输入yes后再次输入测试命令后出现类似&quot;Hi...&quot;，表示配置成功</span><br><span class=\"line\">&gt; ssh -T git@github.com</span><br><span class=\"line\">&gt; ssh -T git@gitee.com</span><br><span class=\"line\">&gt; ssh -T git@gitlab.com</span><br></pre></td></tr></table></figure>\n<h1 id=\"git单账号关联\"><a class=\"markdownIt-Anchor\" href=\"#git单账号关联\"></a> git单账号关联</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ssh-keygen -t rsa -C xxxxx@gmail.com（注册github时的email）</span><br><span class=\"line\">&gt; cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>登陆网站，如github／gitee／gitlab等，在如设置／Settings中有SSH and GPG keys中【add new keys】，将id_rsa.pub内容添加，会自动识别标题,设置完成之后测试登陆</p>\n<h1 id=\"git多账号设置关联\"><a class=\"markdownIt-Anchor\" href=\"#git多账号设置关联\"></a> git多账号设置关联</h1>\n<p>多账号配置是通过.ssh文件夹下config文件实现，操作如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; touch ~/.ssh/config </span><br><span class=\"line\">&gt; chmod 600 ~/.ssh/config </span><br><span class=\"line\"></span><br><span class=\"line\">&gt; ssh-keygen -f ~/.ssh/id_rsa.github -t rsa -C &quot;chetaofeng@163.com&quot;</span><br><span class=\"line\">&gt; ssh-keygen -f ~/.ssh/id_rsa.gitee -t rsa -C &quot;chetaofeng@163.com&quot;</span><br><span class=\"line\">&gt; ssh-keygen -f ~/.ssh/id_rsa.gitlab -t rsa -C &quot;chetaofeng@163.com&quot;</span><br></pre></td></tr></table></figure>\n<p>config文件内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># github</span><br><span class=\"line\">Host github.com</span><br><span class=\"line\">    HostName github.com</span><br><span class=\"line\">    PreferredAuthentications publickey</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa.github</span><br><span class=\"line\"></span><br><span class=\"line\"># gitee</span><br><span class=\"line\">Host gitee.com</span><br><span class=\"line\">     HostName gitee.com</span><br><span class=\"line\">     PreferredAuthentications publickey</span><br><span class=\"line\">     IdentityFile ~/.ssh/id_rsa.gitee</span><br><span class=\"line\"></span><br><span class=\"line\"># gitlab</span><br><span class=\"line\">Host gitlab.com</span><br><span class=\"line\">     HostName gitlab.com</span><br><span class=\"line\">     PreferredAuthentications publickey</span><br><span class=\"line\">     IdentityFile ~/.ssh/id_rsa.gitlab</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Host： 是我们在输入命令的时候的名字 比如我这里是lab  那么我使用ssh命令的时候需要使用 ssh lab</li>\n<li>HostName： 是目标主机的主机名，也就是平时我们使用ssh后面跟的地址名称。</li>\n<li>Port：指定的端口号。</li>\n<li>User：指定的登陆用户名。</li>\n<li>IdentifyFile：指定的私钥地址。</li>\n</ul>\n<h1 id=\"gitignore文件\"><a class=\"markdownIt-Anchor\" href=\"#gitignore文件\"></a> .gitignore文件</h1>\n<p>不添加到版本库的内容记录，创建项目后一定要添加.gitignore文件</p>\n<h1 id=\"开发环境中配置\"><a class=\"markdownIt-Anchor\" href=\"#开发环境中配置\"></a> 开发环境中配置</h1>\n<p>在Jetbrains系列开发工具中，【Version Control】界面中github选项默认有，进行设置即可<br>\n<img src=\"/pub-images/github%E8%AE%BE%E7%BD%AE.png\" alt=\"image\"><br>\ngitlab／gitee没有配置选项，需先安装相应插件，如下：<br>\n<img src=\"/pub-images/%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.png\" alt=\"image\"></p>\n<p>以前配置gitlab的时候，是通过Other Settings-&gt;GitLab Settings设置如下：</p>\n<ul>\n<li>GitLab Server Url: <a href=\"https://gitlab.com/\" target=\"_blank\" rel=\"noopener\">https://gitlab.com/</a></li>\n<li>GitLab API Key： <a href=\"https://gitlab.com/profile/account\" target=\"_blank\" rel=\"noopener\">https://gitlab.com/profile/account</a></li>\n</ul>\n<h1 id=\"git项目权限管理\"><a class=\"markdownIt-Anchor\" href=\"#git项目权限管理\"></a> git项目权限管理</h1>\n<p>Git项目一般有五种身份权限，分别是：</p>\n<ul>\n<li>Owner 项目所有者，拥有所有的操作权限</li>\n<li>Master 项目的管理者，除更改、删除项目元信息外其它操作均可</li>\n<li>Developer 项目的开发人员，做一些开发工作，对受保护内容无权限</li>\n<li>Reporter 项目的报告者，只有项目的读权限，可以创建代码片断</li>\n<li>Guest 项目的游客，只能提交问题和评论内容</li>\n</ul>\n<h1 id=\"私服项目使用推荐流程\"><a class=\"markdownIt-Anchor\" href=\"#私服项目使用推荐流程\"></a> 私服项目使用推荐流程</h1>\n<blockquote>\n<p>以下为项目owner需进行工作</p>\n</blockquote>\n<ol>\n<li>在私服先创建项目，添加人员并设置人员权限</li>\n<li>在本地webstorm中clone项目</li>\n<li>在clone项目中添加.gitignore文件</li>\n<li>添加.gitignore及相关需要版本控制的文件夹到版本控制（选中项后右键操作）</li>\n<li>提交项目并备注为初始提交</li>\n</ol>\n<blockquote>\n<p>以下为项目成员需做工作</p>\n</blockquote>\n<ol>\n<li>在本地webstorm中clone项目</li>\n<li>创建项目分支（可一人一个，也可通过项目模块进行分支创建），如果直接在master分支，则无法成功push项目提示被rejected</li>\n<li>进行代码编写</li>\n<li>提交需管理分支</li>\n<li>在gitlab私服网页发起合并请求，并添加详细描述</li>\n<li>等待相关人员进行合并</li>\n<li>合并结束后更新master分支</li>\n<li>创建分支继续工作</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<p>官网：<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a><br>\nGit是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br>\nGit 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>\nGit 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p>\n<p>详细学习，推荐：</p>\n<ul>\n<li><a href=\"http://www.runoob.com/git/git-tutorial.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/git/git-tutorial.html</a></li>\n<li>廖雪峰大神的git教程<br>\n<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></li>\n<li>git的前世今生： <a href=\"https://blog.csdn.net/csdnprogram/article/details/52155078\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/csdnprogram/article/details/52155078</a></li>\n</ul>\n<h1 id=\"工作原理\"><a class=\"markdownIt-Anchor\" href=\"#工作原理\"></a> 工作原理</h1>\n<h2 id=\"本地\"><a class=\"markdownIt-Anchor\" href=\"#本地\"></a> 本地</h2>\n<ul>\n<li>工作区（Working Directory）：就是你在电脑里能看到的目录</li>\n<li>版本库（Repository）：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库<br>\nGit的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</li>\n</ul>\n<p><img src=\"/pub-images/git.png\" alt=\"image\"><br>\n我们把文件往Git版本库里添加的时候，是分两步执行的：</p>\n<ul>\n<li>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；</li>\n<li>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。</li>\n</ul>\n<h2 id=\"远程配合\"><a class=\"markdownIt-Anchor\" href=\"#远程配合\"></a> 远程配合</h2>\n<p><img src=\"/pub-images/git2.png\" alt=\"image\"></p>\n<h1 id=\"git安装\"><a class=\"markdownIt-Anchor\" href=\"#git安装\"></a> git安装</h1>\n<p>参考教程：<a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/book/zh/v2/起步-安装-Git</a></p>\n<p>各平台都支持安装包安装方式</p>\n<h2 id=\"mac系统\"><a class=\"markdownIt-Anchor\" href=\"#mac系统\"></a> mac系统</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; brew install git</span><br><span class=\"line\">&gt; git --version //验证安装</span><br></pre></td></tr></table></figure>\n<h1 id=\"git全局设置\"><a class=\"markdownIt-Anchor\" href=\"#git全局设置\"></a> git全局设置</h1>\n<p>config 配置有system级别 global（用户级别） 和local（当前仓库）三个 设置先从system-》global-》local,底层配置会覆盖顶层配置<br>\n查看git不同级别配置信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --system --list</span><br><span class=\"line\">git config --global --list</span><br><span class=\"line\">git config --和local --list</span><br></pre></td></tr></table></figure>\n<p>git安装完成后，还需要最后一步设置，在命令行输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;Your Name&quot;</span><br><span class=\"line\">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure>\n<p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门</p>\n<h1 id=\"git账号关联流程\"><a class=\"markdownIt-Anchor\" href=\"#git账号关联流程\"></a> git账号关联流程</h1>\n<ol>\n<li>生成SSHkey<br>\nssh-keygen命令用于为“ssh”生成、管理和转换认证密钥，它支持RSA和DSA两种认证密钥.<br>\nssh-keygen(选项)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-b：指定密钥长度； </span><br><span class=\"line\">-e：读取openssh的私钥或者公钥文件； </span><br><span class=\"line\">-C：添加注释； </span><br><span class=\"line\">-f：指定用来保存密钥的文件名； </span><br><span class=\"line\">-i：读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥； </span><br><span class=\"line\">-l：显示公钥文件的指纹数据； </span><br><span class=\"line\">-N：提供一个新密语； </span><br><span class=\"line\">-P：提供（旧）密语；</span><br><span class=\"line\">-q：静默模式； </span><br><span class=\"line\">-t：指定要创建的密钥类型。</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>登陆git服务器，添加public key信息</li>\n<li>测试登陆</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">测试是否成功,第一此输入命令，需输入yes后再次输入测试命令后出现类似&quot;Hi...&quot;，表示配置成功</span><br><span class=\"line\">&gt; ssh -T git@github.com</span><br><span class=\"line\">&gt; ssh -T git@gitee.com</span><br><span class=\"line\">&gt; ssh -T git@gitlab.com</span><br></pre></td></tr></table></figure>\n<h1 id=\"git单账号关联\"><a class=\"markdownIt-Anchor\" href=\"#git单账号关联\"></a> git单账号关联</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ssh-keygen -t rsa -C xxxxx@gmail.com（注册github时的email）</span><br><span class=\"line\">&gt; cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>登陆网站，如github／gitee／gitlab等，在如设置／Settings中有SSH and GPG keys中【add new keys】，将id_rsa.pub内容添加，会自动识别标题,设置完成之后测试登陆</p>\n<h1 id=\"git多账号设置关联\"><a class=\"markdownIt-Anchor\" href=\"#git多账号设置关联\"></a> git多账号设置关联</h1>\n<p>多账号配置是通过.ssh文件夹下config文件实现，操作如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; touch ~/.ssh/config </span><br><span class=\"line\">&gt; chmod 600 ~/.ssh/config </span><br><span class=\"line\"></span><br><span class=\"line\">&gt; ssh-keygen -f ~/.ssh/id_rsa.github -t rsa -C &quot;chetaofeng@163.com&quot;</span><br><span class=\"line\">&gt; ssh-keygen -f ~/.ssh/id_rsa.gitee -t rsa -C &quot;chetaofeng@163.com&quot;</span><br><span class=\"line\">&gt; ssh-keygen -f ~/.ssh/id_rsa.gitlab -t rsa -C &quot;chetaofeng@163.com&quot;</span><br></pre></td></tr></table></figure>\n<p>config文件内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># github</span><br><span class=\"line\">Host github.com</span><br><span class=\"line\">    HostName github.com</span><br><span class=\"line\">    PreferredAuthentications publickey</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa.github</span><br><span class=\"line\"></span><br><span class=\"line\"># gitee</span><br><span class=\"line\">Host gitee.com</span><br><span class=\"line\">     HostName gitee.com</span><br><span class=\"line\">     PreferredAuthentications publickey</span><br><span class=\"line\">     IdentityFile ~/.ssh/id_rsa.gitee</span><br><span class=\"line\"></span><br><span class=\"line\"># gitlab</span><br><span class=\"line\">Host gitlab.com</span><br><span class=\"line\">     HostName gitlab.com</span><br><span class=\"line\">     PreferredAuthentications publickey</span><br><span class=\"line\">     IdentityFile ~/.ssh/id_rsa.gitlab</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Host： 是我们在输入命令的时候的名字 比如我这里是lab  那么我使用ssh命令的时候需要使用 ssh lab</li>\n<li>HostName： 是目标主机的主机名，也就是平时我们使用ssh后面跟的地址名称。</li>\n<li>Port：指定的端口号。</li>\n<li>User：指定的登陆用户名。</li>\n<li>IdentifyFile：指定的私钥地址。</li>\n</ul>\n<h1 id=\"gitignore文件\"><a class=\"markdownIt-Anchor\" href=\"#gitignore文件\"></a> .gitignore文件</h1>\n<p>不添加到版本库的内容记录，创建项目后一定要添加.gitignore文件</p>\n<h1 id=\"开发环境中配置\"><a class=\"markdownIt-Anchor\" href=\"#开发环境中配置\"></a> 开发环境中配置</h1>\n<p>在Jetbrains系列开发工具中，【Version Control】界面中github选项默认有，进行设置即可<br>\n<img src=\"/pub-images/github%E8%AE%BE%E7%BD%AE.png\" alt=\"image\"><br>\ngitlab／gitee没有配置选项，需先安装相应插件，如下：<br>\n<img src=\"/pub-images/%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.png\" alt=\"image\"></p>\n<p>以前配置gitlab的时候，是通过Other Settings-&gt;GitLab Settings设置如下：</p>\n<ul>\n<li>GitLab Server Url: <a href=\"https://gitlab.com/\" target=\"_blank\" rel=\"noopener\">https://gitlab.com/</a></li>\n<li>GitLab API Key： <a href=\"https://gitlab.com/profile/account\" target=\"_blank\" rel=\"noopener\">https://gitlab.com/profile/account</a></li>\n</ul>\n<h1 id=\"git项目权限管理\"><a class=\"markdownIt-Anchor\" href=\"#git项目权限管理\"></a> git项目权限管理</h1>\n<p>Git项目一般有五种身份权限，分别是：</p>\n<ul>\n<li>Owner 项目所有者，拥有所有的操作权限</li>\n<li>Master 项目的管理者，除更改、删除项目元信息外其它操作均可</li>\n<li>Developer 项目的开发人员，做一些开发工作，对受保护内容无权限</li>\n<li>Reporter 项目的报告者，只有项目的读权限，可以创建代码片断</li>\n<li>Guest 项目的游客，只能提交问题和评论内容</li>\n</ul>\n<h1 id=\"私服项目使用推荐流程\"><a class=\"markdownIt-Anchor\" href=\"#私服项目使用推荐流程\"></a> 私服项目使用推荐流程</h1>\n<blockquote>\n<p>以下为项目owner需进行工作</p>\n</blockquote>\n<ol>\n<li>在私服先创建项目，添加人员并设置人员权限</li>\n<li>在本地webstorm中clone项目</li>\n<li>在clone项目中添加.gitignore文件</li>\n<li>添加.gitignore及相关需要版本控制的文件夹到版本控制（选中项后右键操作）</li>\n<li>提交项目并备注为初始提交</li>\n</ol>\n<blockquote>\n<p>以下为项目成员需做工作</p>\n</blockquote>\n<ol>\n<li>在本地webstorm中clone项目</li>\n<li>创建项目分支（可一人一个，也可通过项目模块进行分支创建），如果直接在master分支，则无法成功push项目提示被rejected</li>\n<li>进行代码编写</li>\n<li>提交需管理分支</li>\n<li>在gitlab私服网页发起合并请求，并添加详细描述</li>\n<li>等待相关人员进行合并</li>\n<li>合并结束后更新master分支</li>\n<li>创建分支继续工作</li>\n</ol>\n"},{"title":"java JDK安装配置","copyright":true,"comments":1,"toc":true,"date":"2018-12-19T07:29:55.000Z","password":"oracle官网账号：  chetaofeng@163.com / Chetaofeng123./","_content":"                                           \n# JDK下载\nhttp://www.oracle.com/technetwork/java/javase/downloads/index.html\nhttps://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n\n# 环境变量设置说明\n（jdk 需要配置三个环境变量； 1.5之后可以不再设置classpath，但建议保留classpath设置）\n* CLASS_PATH 保证class文件能够在任意目录下运行\n* PATH 保证javac可以在任意目录下运行\n \n# mac系统\n环境变量配置文件执行的顺序：\n/etc/profile /etc/paths ~/.bash_profile ~/.bash_login ~/.profile ~/.bashrc\n/etc/profile和/etc/paths是系统级别的，系统启动就会加载，剩下的是用户级别的。 \n\n下载dmg安装包后直接安装后，通过java -version；java；javac验证，个人发现最新版本中不用系统环境变量配置，重启电脑验证过，\n\n配置环境变量的方式：\n1. 找到JDK安装目录，如：\n~~~\n/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home\n~~~\n2. 编辑文件~/.bash_profile 文件\n~~~\nJAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home\nPATH=$JAVA_HOME/bin:$PATH:.\n\nexport JAVA_HOME\nexport PATH\n~~~\n3. 使配置生效：source .bash_profile\n4. 输入 echo $JAVA_HOME 显示刚才配置的路径\n5. 验证安装\n \n\n# Linux系统\n安装前，请在终端中通过java命令查看是否系统已默认安装OpenJDK，如果有，则先卸载\n1. 下载安装包后解压，如：sudo tar -zxvf jdk-8u77-linux-x64.tar.gz,得到jdk1.8.0_77文件夹\n2. sudo mkdir /usr/java\n3. sudo cp -r jdk1.8.0_77/ /usr/java/\n4. 配置环境变量,sudo vim /etc/profile,在前面添加\n~~~\nexport JAVA_HOME=/usr/java/jdk1.8.0_77\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \nexport PATH=${JAVA_HOME}/bin:$PATH\n~~~\n5. source /etc/profile 使配置立即生效\n6. 检查新安装的jdk:java -version;java;javac\n ","source":"_posts/环境搭建/06_Java安装.md","raw":"---\ntitle: java JDK安装配置\ntags:\n  - 环境搭建\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-12-19 15:29:55\ncategories:\npassword: oracle官网账号：  chetaofeng@163.com / Chetaofeng123./\n---\n                                           \n# JDK下载\nhttp://www.oracle.com/technetwork/java/javase/downloads/index.html\nhttps://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n\n# 环境变量设置说明\n（jdk 需要配置三个环境变量； 1.5之后可以不再设置classpath，但建议保留classpath设置）\n* CLASS_PATH 保证class文件能够在任意目录下运行\n* PATH 保证javac可以在任意目录下运行\n \n# mac系统\n环境变量配置文件执行的顺序：\n/etc/profile /etc/paths ~/.bash_profile ~/.bash_login ~/.profile ~/.bashrc\n/etc/profile和/etc/paths是系统级别的，系统启动就会加载，剩下的是用户级别的。 \n\n下载dmg安装包后直接安装后，通过java -version；java；javac验证，个人发现最新版本中不用系统环境变量配置，重启电脑验证过，\n\n配置环境变量的方式：\n1. 找到JDK安装目录，如：\n~~~\n/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home\n~~~\n2. 编辑文件~/.bash_profile 文件\n~~~\nJAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home\nPATH=$JAVA_HOME/bin:$PATH:.\n\nexport JAVA_HOME\nexport PATH\n~~~\n3. 使配置生效：source .bash_profile\n4. 输入 echo $JAVA_HOME 显示刚才配置的路径\n5. 验证安装\n \n\n# Linux系统\n安装前，请在终端中通过java命令查看是否系统已默认安装OpenJDK，如果有，则先卸载\n1. 下载安装包后解压，如：sudo tar -zxvf jdk-8u77-linux-x64.tar.gz,得到jdk1.8.0_77文件夹\n2. sudo mkdir /usr/java\n3. sudo cp -r jdk1.8.0_77/ /usr/java/\n4. 配置环境变量,sudo vim /etc/profile,在前面添加\n~~~\nexport JAVA_HOME=/usr/java/jdk1.8.0_77\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \nexport PATH=${JAVA_HOME}/bin:$PATH\n~~~\n5. source /etc/profile 使配置立即生效\n6. 检查新安装的jdk:java -version;java;javac\n ","slug":"环境搭建-06-Java安装","published":1,"updated":"2019-02-14T01:43:46.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytry60051ck8hpgbc8f0j","content":"<h1 id=\"jdk下载\"><a class=\"markdownIt-Anchor\" href=\"#jdk下载\"></a> JDK下载</h1>\n<p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>\n<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>\n<h1 id=\"环境变量设置说明\"><a class=\"markdownIt-Anchor\" href=\"#环境变量设置说明\"></a> 环境变量设置说明</h1>\n<p>（jdk 需要配置三个环境变量； 1.5之后可以不再设置classpath，但建议保留classpath设置）</p>\n<ul>\n<li>CLASS_PATH 保证class文件能够在任意目录下运行</li>\n<li>PATH 保证javac可以在任意目录下运行</li>\n</ul>\n<h1 id=\"mac系统\"><a class=\"markdownIt-Anchor\" href=\"#mac系统\"></a> mac系统</h1>\n<p>环境变量配置文件执行的顺序：<br>\n/etc/profile /etc/paths ~/.bash_profile ~/.bash_login ~/.profile ~/.bashrc<br>\n/etc/profile和/etc/paths是系统级别的，系统启动就会加载，剩下的是用户级别的。</p>\n<p>下载dmg安装包后直接安装后，通过java -version；java；javac验证，个人发现最新版本中不用系统环境变量配置，重启电脑验证过，</p>\n<p>配置环境变量的方式：</p>\n<ol>\n<li>找到JDK安装目录，如：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编辑文件~/.bash_profile 文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH:.</span><br><span class=\"line\"></span><br><span class=\"line\">export JAVA_HOME</span><br><span class=\"line\">export PATH</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使配置生效：source .bash_profile</li>\n<li>输入 echo $JAVA_HOME 显示刚才配置的路径</li>\n<li>验证安装</li>\n</ol>\n<h1 id=\"linux系统\"><a class=\"markdownIt-Anchor\" href=\"#linux系统\"></a> Linux系统</h1>\n<p>安装前，请在终端中通过java命令查看是否系统已默认安装OpenJDK，如果有，则先卸载</p>\n<ol>\n<li>下载安装包后解压，如：sudo tar -zxvf jdk-8u77-linux-x64.tar.gz,得到jdk1.8.0_77文件夹</li>\n<li>sudo mkdir /usr/java</li>\n<li>sudo cp -r jdk1.8.0_77/ /usr/java/</li>\n<li>配置环境变量,sudo vim /etc/profile,在前面添加</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/java/jdk1.8.0_77</span><br><span class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib  </span><br><span class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>source /etc/profile 使配置立即生效</li>\n<li>检查新安装的jdk:java -version;java;javac</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"jdk下载\"><a class=\"markdownIt-Anchor\" href=\"#jdk下载\"></a> JDK下载</h1>\n<p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>\n<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>\n<h1 id=\"环境变量设置说明\"><a class=\"markdownIt-Anchor\" href=\"#环境变量设置说明\"></a> 环境变量设置说明</h1>\n<p>（jdk 需要配置三个环境变量； 1.5之后可以不再设置classpath，但建议保留classpath设置）</p>\n<ul>\n<li>CLASS_PATH 保证class文件能够在任意目录下运行</li>\n<li>PATH 保证javac可以在任意目录下运行</li>\n</ul>\n<h1 id=\"mac系统\"><a class=\"markdownIt-Anchor\" href=\"#mac系统\"></a> mac系统</h1>\n<p>环境变量配置文件执行的顺序：<br>\n/etc/profile /etc/paths ~/.bash_profile ~/.bash_login ~/.profile ~/.bashrc<br>\n/etc/profile和/etc/paths是系统级别的，系统启动就会加载，剩下的是用户级别的。</p>\n<p>下载dmg安装包后直接安装后，通过java -version；java；javac验证，个人发现最新版本中不用系统环境变量配置，重启电脑验证过，</p>\n<p>配置环境变量的方式：</p>\n<ol>\n<li>找到JDK安装目录，如：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编辑文件~/.bash_profile 文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH:.</span><br><span class=\"line\"></span><br><span class=\"line\">export JAVA_HOME</span><br><span class=\"line\">export PATH</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使配置生效：source .bash_profile</li>\n<li>输入 echo $JAVA_HOME 显示刚才配置的路径</li>\n<li>验证安装</li>\n</ol>\n<h1 id=\"linux系统\"><a class=\"markdownIt-Anchor\" href=\"#linux系统\"></a> Linux系统</h1>\n<p>安装前，请在终端中通过java命令查看是否系统已默认安装OpenJDK，如果有，则先卸载</p>\n<ol>\n<li>下载安装包后解压，如：sudo tar -zxvf jdk-8u77-linux-x64.tar.gz,得到jdk1.8.0_77文件夹</li>\n<li>sudo mkdir /usr/java</li>\n<li>sudo cp -r jdk1.8.0_77/ /usr/java/</li>\n<li>配置环境变量,sudo vim /etc/profile,在前面添加</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/java/jdk1.8.0_77</span><br><span class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib  </span><br><span class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>source /etc/profile 使配置立即生效</li>\n<li>检查新安装的jdk:java -version;java;javac</li>\n</ol>\n"},{"title":"java JDK安装配置","copyright":true,"comments":1,"toc":true,"date":"2018-12-19T07:29:55.000Z","password":null,"_content":" https://blog.csdn.net/ganeshys2017/article/details/81300246\n \n http://www.cnblogs.com/linnuo/p/6257204.html\n \n https://blog.csdn.net/lwwl12/article/details/78247307","source":"_posts/环境搭建/07_CentOS系统初始设置.md","raw":"---\ntitle: java JDK安装配置\ntags:\n  - 环境搭建\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-12-19 15:29:55\ncategories:\npassword:\n---\n https://blog.csdn.net/ganeshys2017/article/details/81300246\n \n http://www.cnblogs.com/linnuo/p/6257204.html\n \n https://blog.csdn.net/lwwl12/article/details/78247307","slug":"环境搭建-07-CentOS系统初始设置","published":1,"updated":"2019-01-10T18:12:58.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytry70054ck8htaz1c02a","content":"<p><a href=\"https://blog.csdn.net/ganeshys2017/article/details/81300246\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ganeshys2017/article/details/81300246</a></p>\n<p><a href=\"http://www.cnblogs.com/linnuo/p/6257204.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/linnuo/p/6257204.html</a></p>\n<p><a href=\"https://blog.csdn.net/lwwl12/article/details/78247307\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/lwwl12/article/details/78247307</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/ganeshys2017/article/details/81300246\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ganeshys2017/article/details/81300246</a></p>\n<p><a href=\"http://www.cnblogs.com/linnuo/p/6257204.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/linnuo/p/6257204.html</a></p>\n<p><a href=\"https://blog.csdn.net/lwwl12/article/details/78247307\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/lwwl12/article/details/78247307</a></p>\n"},{"title":"Ubuntu系统安装后的设置","copyright":true,"comments":1,"toc":true,"date":"2018-12-19T07:29:55.000Z","password":null,"_content":"# 修改默认源为国内源\n1. cd /etc/apt\n2. cp /etc/apt/sources.list /etc/apt/sources.list.bak   备份/etc/apt/sources.list\n3. 在/etc/apt/sources.list文件前面添加源条目,具体源条目可百度，如阿里源：\n~~~\n#添加阿里源\ndeb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\n~~~\n4. 更新源\n~~~\nsudo apt-get update\nsudo apt-get upgrade\n~~~\n\n# 系统分辨率设置\n安装Ubuntu系统后分辨率为800*600且无法修改，通过以下方式修改：\n1. 首先打开终端Terminal，输入: sudo apt-get install xdiagnose \n2. sudo xdiagnose 启动【X 诊断工具设置】，点击【Apply】\n3. sudo reboot 重启系统\n4. 再次打开设置发现分辨率可以设置了,如设置为：1280*800\n\n# chrome浏览器安装\n* wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n* sudo dpkg -i google-chrome-stable_current_amd64.deb \n\n\n","source":"_posts/环境搭建/08_Ubuntu系统安装后的设置.md","raw":"---\ntitle: Ubuntu系统安装后的设置\ntags:\n  - 环境搭建\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-12-19 15:29:55\ncategories:\npassword:\n---\n# 修改默认源为国内源\n1. cd /etc/apt\n2. cp /etc/apt/sources.list /etc/apt/sources.list.bak   备份/etc/apt/sources.list\n3. 在/etc/apt/sources.list文件前面添加源条目,具体源条目可百度，如阿里源：\n~~~\n#添加阿里源\ndeb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\n~~~\n4. 更新源\n~~~\nsudo apt-get update\nsudo apt-get upgrade\n~~~\n\n# 系统分辨率设置\n安装Ubuntu系统后分辨率为800*600且无法修改，通过以下方式修改：\n1. 首先打开终端Terminal，输入: sudo apt-get install xdiagnose \n2. sudo xdiagnose 启动【X 诊断工具设置】，点击【Apply】\n3. sudo reboot 重启系统\n4. 再次打开设置发现分辨率可以设置了,如设置为：1280*800\n\n# chrome浏览器安装\n* wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n* sudo dpkg -i google-chrome-stable_current_amd64.deb \n\n\n","slug":"环境搭建-08-Ubuntu系统安装后的设置","published":1,"updated":"2019-01-28T03:40:58.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytry80056ck8h1kzfcfcy","content":"<h1 id=\"修改默认源为国内源\"><a class=\"markdownIt-Anchor\" href=\"#修改默认源为国内源\"></a> 修改默认源为国内源</h1>\n<ol>\n<li>cd /etc/apt</li>\n<li>cp /etc/apt/sources.list /etc/apt/sources.list.bak   备份/etc/apt/sources.list</li>\n<li>在/etc/apt/sources.list文件前面添加源条目,具体源条目可百度，如阿里源：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#添加阿里源</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>更新源</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>\n<h1 id=\"系统分辨率设置\"><a class=\"markdownIt-Anchor\" href=\"#系统分辨率设置\"></a> 系统分辨率设置</h1>\n<p>安装Ubuntu系统后分辨率为800*600且无法修改，通过以下方式修改：</p>\n<ol>\n<li>首先打开终端Terminal，输入: sudo apt-get install xdiagnose</li>\n<li>sudo xdiagnose 启动【X 诊断工具设置】，点击【Apply】</li>\n<li>sudo reboot 重启系统</li>\n<li>再次打开设置发现分辨率可以设置了,如设置为：1280*800</li>\n</ol>\n<h1 id=\"chrome浏览器安装\"><a class=\"markdownIt-Anchor\" href=\"#chrome浏览器安装\"></a> chrome浏览器安装</h1>\n<ul>\n<li>wget <a href=\"https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\" target=\"_blank\" rel=\"noopener\">https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</a></li>\n<li>sudo dpkg -i google-chrome-stable_current_amd64.deb</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"修改默认源为国内源\"><a class=\"markdownIt-Anchor\" href=\"#修改默认源为国内源\"></a> 修改默认源为国内源</h1>\n<ol>\n<li>cd /etc/apt</li>\n<li>cp /etc/apt/sources.list /etc/apt/sources.list.bak   备份/etc/apt/sources.list</li>\n<li>在/etc/apt/sources.list文件前面添加源条目,具体源条目可百度，如阿里源：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#添加阿里源</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>更新源</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>\n<h1 id=\"系统分辨率设置\"><a class=\"markdownIt-Anchor\" href=\"#系统分辨率设置\"></a> 系统分辨率设置</h1>\n<p>安装Ubuntu系统后分辨率为800*600且无法修改，通过以下方式修改：</p>\n<ol>\n<li>首先打开终端Terminal，输入: sudo apt-get install xdiagnose</li>\n<li>sudo xdiagnose 启动【X 诊断工具设置】，点击【Apply】</li>\n<li>sudo reboot 重启系统</li>\n<li>再次打开设置发现分辨率可以设置了,如设置为：1280*800</li>\n</ol>\n<h1 id=\"chrome浏览器安装\"><a class=\"markdownIt-Anchor\" href=\"#chrome浏览器安装\"></a> chrome浏览器安装</h1>\n<ul>\n<li>wget <a href=\"https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\" target=\"_blank\" rel=\"noopener\">https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</a></li>\n<li>sudo dpkg -i google-chrome-stable_current_amd64.deb</li>\n</ul>\n"},{"title":"JetBrains系列软件安装配置","copyright":true,"comments":1,"toc":true,"date":"2018-12-19T07:29:55.000Z","password":null,"_content":"\n# 软件破解\n软件破解请参考： http://idea.lanyus.com/\n1. 使用前请将“0.0.0.0 account.jetbrains.com”添加到hosts文件中\n2. 在网页获取注册码，在注册页面填入注册码即可\n\n# Android Studio安装\n以下为相关软件下载，2／3中软件为采用第三方模拟器的时候需要下载，利用自带模拟器则可跳过下载\n1. 下载Android Studio安装软件： https://developer.android.google.cn/studio/#downloads\n2. 下载virtualbox： https://www.virtualbox.org/wiki/Linux_Downloads\n3. 下载Genymotion： https://www.genymotion.com/download\n\n安装前请确保网络状态良好，现在安装Android Studio，所需Android SDK、自带模拟器镜像、gradle等都可以在线直接通过开发工具下载安装\n\n## mac系统\n直接安装dmg安装包即可\n\n## Linux系统\n1. 进入安装包所在目录下，如：android-studio-ide-181.5056338-linux.zip\n2. sudo mkdir /usr/JetBrains\n3. sudo cp android-studio-ide-181.5056338-linux.zip /usr/JetBrains\n4. cd /usr/JetBrains\n5. sudo unzip  android-studio-ide-181.5056338-linux.zip\n6. cd android-studio/bin  \n7. 命令行启动AndroidStuido： ./studio.sh，正常的话应该会出现软件的配置设置\n8. 软件启动，因为没有Android SDK，会弹出提示界面，点击cancle之后会自动下载Android SDK，然后创建测试项目，过程中运行所需资源都会自动下载，耐心等待即可\n\n设置启动图标启动Android Studio\n1. sudo vim /usr/share/applications/android-studio.desktop \n2. 编辑文件内容：\n~~~\n[Desktop Entry]\nType=Application\nName=Android Studio\nComment=Android Studio Integrated Development Environment\nIcon=/usr/JetBrains/android-studio/bin/studio.png\nExec=/usr/JetBrains/android-studio/bin/studio.sh  \n~~~\n3. 在启动器别表即可找到Android Studio启动图标，点击启动即可\n\n# 模拟器\nAndroid程序调试可通过真机、自带模拟器、第三方模拟器调试\n\n第三方模拟器大多使用Genymotion，官网下载：https://www.genymotion.com/download/\nandroid Studio安装Genymotion插件使用\n\n\n## 安装过程遇到的问题\n1. linux中启动模拟器出现grant current user access to /dev/kvm错误\n解决方法：打开terminal,输入代码who／whoami查找当前用户名；sudo chown username -R /dev/kvm 注意username是你用的用户名\n\n2. 无法修改模拟器创建时的选项 emulated performance\n解决方法： Nexus 5X和Nexus 5镜像不支持，换成其他镜像即可\n\nhttps://blog.csdn.net/wshish920907/article/details/78249528\n\n# InteliJ IDEA安装\n下载地址：http://www.jetbrains.com/idea/?fromMenu\n## Linux系统\n1. 进入安装包所在目录下，如：ideaIU-2016.1.2.tar.gz\n2. sudo cp android-studio-ide-181.5056338-linux.zip /usr/JetBrains，如果没有JetBrains则自己创建\n4. cd /usr/JetBrains\n5. sudo tar -zxvf ideaIU-2016.1.2.tar.gz\n6. sudo mv idea-IU-145.971.21 idea\n7. cd idea/bin\n8. 命令行启动Idea： ./idea.sh，正常的话应该会出现软件的配置设置\n9. 软件启动，创建任意Java程序，配置JDK路径，然后创建测试项目，过程中运行所需资源都会自动下载，耐心等待即可\n\n设置启动图标启动Idea\n1. sudo vim /usr/share/applications/idea.desktop，当然软件启动后也会提示是否创建快捷访问链接，可通过IDEA创建启动图标\n2. 编辑文件内容：\n~~~\n[Desktop Entry]\nType=Application\nName=InteliJ IDEA\nComment=InteliJ IDEA Integrated Development Environment\nIcon=/usr/JetBrains/idea/bin/idea.png\nExec=/usr/JetBrains/idea/bin/idea.sh  \n~~~\n3. 在启动器别表即可找到InteliJ IDEA启动图标，点击启动即可\n\n# WebStorm安装\n下载地址：http://www.jetbrains.com/webstorm/download/#section=linux\n\nwebstorm安装请参考AndroidStudio和IDEA\n\n设置启动图标启动Idea\n1. sudo vim /usr/share/applications/idea.desktop，当然软件启动后也会提示是否创建快捷访问链接，可通过IDEA创建启动图标\n2. 编辑文件内容：\n~~~\n[Desktop Entry]\nType=Application\nName=WebStorm\nComment=WebStorm Integrated Development Environment\nIcon=/usr/JetBrains/WebStorm/bin/webstorm.png\nExec=/usr/JetBrains/WebStorm/bin/webstorm.sh  \n~~~","source":"_posts/环境搭建/09_JetBrains系列软件安装使用.md","raw":"---\ntitle: JetBrains系列软件安装配置\ntags:\n  - 环境搭建\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-12-19 15:29:55\ncategories:\npassword:\n---\n\n# 软件破解\n软件破解请参考： http://idea.lanyus.com/\n1. 使用前请将“0.0.0.0 account.jetbrains.com”添加到hosts文件中\n2. 在网页获取注册码，在注册页面填入注册码即可\n\n# Android Studio安装\n以下为相关软件下载，2／3中软件为采用第三方模拟器的时候需要下载，利用自带模拟器则可跳过下载\n1. 下载Android Studio安装软件： https://developer.android.google.cn/studio/#downloads\n2. 下载virtualbox： https://www.virtualbox.org/wiki/Linux_Downloads\n3. 下载Genymotion： https://www.genymotion.com/download\n\n安装前请确保网络状态良好，现在安装Android Studio，所需Android SDK、自带模拟器镜像、gradle等都可以在线直接通过开发工具下载安装\n\n## mac系统\n直接安装dmg安装包即可\n\n## Linux系统\n1. 进入安装包所在目录下，如：android-studio-ide-181.5056338-linux.zip\n2. sudo mkdir /usr/JetBrains\n3. sudo cp android-studio-ide-181.5056338-linux.zip /usr/JetBrains\n4. cd /usr/JetBrains\n5. sudo unzip  android-studio-ide-181.5056338-linux.zip\n6. cd android-studio/bin  \n7. 命令行启动AndroidStuido： ./studio.sh，正常的话应该会出现软件的配置设置\n8. 软件启动，因为没有Android SDK，会弹出提示界面，点击cancle之后会自动下载Android SDK，然后创建测试项目，过程中运行所需资源都会自动下载，耐心等待即可\n\n设置启动图标启动Android Studio\n1. sudo vim /usr/share/applications/android-studio.desktop \n2. 编辑文件内容：\n~~~\n[Desktop Entry]\nType=Application\nName=Android Studio\nComment=Android Studio Integrated Development Environment\nIcon=/usr/JetBrains/android-studio/bin/studio.png\nExec=/usr/JetBrains/android-studio/bin/studio.sh  \n~~~\n3. 在启动器别表即可找到Android Studio启动图标，点击启动即可\n\n# 模拟器\nAndroid程序调试可通过真机、自带模拟器、第三方模拟器调试\n\n第三方模拟器大多使用Genymotion，官网下载：https://www.genymotion.com/download/\nandroid Studio安装Genymotion插件使用\n\n\n## 安装过程遇到的问题\n1. linux中启动模拟器出现grant current user access to /dev/kvm错误\n解决方法：打开terminal,输入代码who／whoami查找当前用户名；sudo chown username -R /dev/kvm 注意username是你用的用户名\n\n2. 无法修改模拟器创建时的选项 emulated performance\n解决方法： Nexus 5X和Nexus 5镜像不支持，换成其他镜像即可\n\nhttps://blog.csdn.net/wshish920907/article/details/78249528\n\n# InteliJ IDEA安装\n下载地址：http://www.jetbrains.com/idea/?fromMenu\n## Linux系统\n1. 进入安装包所在目录下，如：ideaIU-2016.1.2.tar.gz\n2. sudo cp android-studio-ide-181.5056338-linux.zip /usr/JetBrains，如果没有JetBrains则自己创建\n4. cd /usr/JetBrains\n5. sudo tar -zxvf ideaIU-2016.1.2.tar.gz\n6. sudo mv idea-IU-145.971.21 idea\n7. cd idea/bin\n8. 命令行启动Idea： ./idea.sh，正常的话应该会出现软件的配置设置\n9. 软件启动，创建任意Java程序，配置JDK路径，然后创建测试项目，过程中运行所需资源都会自动下载，耐心等待即可\n\n设置启动图标启动Idea\n1. sudo vim /usr/share/applications/idea.desktop，当然软件启动后也会提示是否创建快捷访问链接，可通过IDEA创建启动图标\n2. 编辑文件内容：\n~~~\n[Desktop Entry]\nType=Application\nName=InteliJ IDEA\nComment=InteliJ IDEA Integrated Development Environment\nIcon=/usr/JetBrains/idea/bin/idea.png\nExec=/usr/JetBrains/idea/bin/idea.sh  \n~~~\n3. 在启动器别表即可找到InteliJ IDEA启动图标，点击启动即可\n\n# WebStorm安装\n下载地址：http://www.jetbrains.com/webstorm/download/#section=linux\n\nwebstorm安装请参考AndroidStudio和IDEA\n\n设置启动图标启动Idea\n1. sudo vim /usr/share/applications/idea.desktop，当然软件启动后也会提示是否创建快捷访问链接，可通过IDEA创建启动图标\n2. 编辑文件内容：\n~~~\n[Desktop Entry]\nType=Application\nName=WebStorm\nComment=WebStorm Integrated Development Environment\nIcon=/usr/JetBrains/WebStorm/bin/webstorm.png\nExec=/usr/JetBrains/WebStorm/bin/webstorm.sh  \n~~~","slug":"环境搭建-09-JetBrains系列软件安装使用","published":1,"updated":"2019-01-18T08:42:27.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytry90057ck8ho38pv715","content":"<h1 id=\"软件破解\"><a class=\"markdownIt-Anchor\" href=\"#软件破解\"></a> 软件破解</h1>\n<p>软件破解请参考： <a href=\"http://idea.lanyus.com/\" target=\"_blank\" rel=\"noopener\">http://idea.lanyus.com/</a></p>\n<ol>\n<li>使用前请将“0.0.0.0 <a href=\"http://account.jetbrains.com\" target=\"_blank\" rel=\"noopener\">account.jetbrains.com</a>”添加到hosts文件中</li>\n<li>在网页获取注册码，在注册页面填入注册码即可</li>\n</ol>\n<h1 id=\"android-studio安装\"><a class=\"markdownIt-Anchor\" href=\"#android-studio安装\"></a> Android Studio安装</h1>\n<p>以下为相关软件下载，2／3中软件为采用第三方模拟器的时候需要下载，利用自带模拟器则可跳过下载</p>\n<ol>\n<li>下载Android Studio安装软件： <a href=\"https://developer.android.google.cn/studio/#downloads\" target=\"_blank\" rel=\"noopener\">https://developer.android.google.cn/studio/#downloads</a></li>\n<li>下载virtualbox： <a href=\"https://www.virtualbox.org/wiki/Linux_Downloads\" target=\"_blank\" rel=\"noopener\">https://www.virtualbox.org/wiki/Linux_Downloads</a></li>\n<li>下载Genymotion： <a href=\"https://www.genymotion.com/download\" target=\"_blank\" rel=\"noopener\">https://www.genymotion.com/download</a></li>\n</ol>\n<p>安装前请确保网络状态良好，现在安装Android Studio，所需Android SDK、自带模拟器镜像、gradle等都可以在线直接通过开发工具下载安装</p>\n<h2 id=\"mac系统\"><a class=\"markdownIt-Anchor\" href=\"#mac系统\"></a> mac系统</h2>\n<p>直接安装dmg安装包即可</p>\n<h2 id=\"linux系统\"><a class=\"markdownIt-Anchor\" href=\"#linux系统\"></a> Linux系统</h2>\n<ol>\n<li>进入安装包所在目录下，如：android-studio-ide-181.5056338-linux.zip</li>\n<li>sudo mkdir /usr/JetBrains</li>\n<li>sudo cp android-studio-ide-181.5056338-linux.zip /usr/JetBrains</li>\n<li>cd /usr/JetBrains</li>\n<li>sudo unzip  android-studio-ide-181.5056338-linux.zip</li>\n<li>cd android-studio/bin</li>\n<li>命令行启动AndroidStuido： ./studio.sh，正常的话应该会出现软件的配置设置</li>\n<li>软件启动，因为没有Android SDK，会弹出提示界面，点击cancle之后会自动下载Android SDK，然后创建测试项目，过程中运行所需资源都会自动下载，耐心等待即可</li>\n</ol>\n<p>设置启动图标启动Android Studio</p>\n<ol>\n<li>sudo vim /usr/share/applications/android-studio.desktop</li>\n<li>编辑文件内容：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Name=Android Studio</span><br><span class=\"line\">Comment=Android Studio Integrated Development Environment</span><br><span class=\"line\">Icon=/usr/JetBrains/android-studio/bin/studio.png</span><br><span class=\"line\">Exec=/usr/JetBrains/android-studio/bin/studio.sh</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在启动器别表即可找到Android Studio启动图标，点击启动即可</li>\n</ol>\n<h1 id=\"模拟器\"><a class=\"markdownIt-Anchor\" href=\"#模拟器\"></a> 模拟器</h1>\n<p>Android程序调试可通过真机、自带模拟器、第三方模拟器调试</p>\n<p>第三方模拟器大多使用Genymotion，官网下载：<a href=\"https://www.genymotion.com/download/\" target=\"_blank\" rel=\"noopener\">https://www.genymotion.com/download/</a><br>\nandroid Studio安装Genymotion插件使用</p>\n<h2 id=\"安装过程遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#安装过程遇到的问题\"></a> 安装过程遇到的问题</h2>\n<ol>\n<li>\n<p>linux中启动模拟器出现grant current user access to /dev/kvm错误<br>\n解决方法：打开terminal,输入代码who／whoami查找当前用户名；sudo chown username -R /dev/kvm 注意username是你用的用户名</p>\n</li>\n<li>\n<p>无法修改模拟器创建时的选项 emulated performance<br>\n解决方法： Nexus 5X和Nexus 5镜像不支持，换成其他镜像即可</p>\n</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/wshish920907/article/details/78249528\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wshish920907/article/details/78249528</a></p>\n<h1 id=\"intelij-idea安装\"><a class=\"markdownIt-Anchor\" href=\"#intelij-idea安装\"></a> InteliJ IDEA安装</h1>\n<p>下载地址：<a href=\"http://www.jetbrains.com/idea/?fromMenu\" target=\"_blank\" rel=\"noopener\">http://www.jetbrains.com/idea/?fromMenu</a></p>\n<h2 id=\"linux系统-2\"><a class=\"markdownIt-Anchor\" href=\"#linux系统-2\"></a> Linux系统</h2>\n<ol>\n<li>进入安装包所在目录下，如：ideaIU-2016.1.2.tar.gz</li>\n<li>sudo cp android-studio-ide-181.5056338-linux.zip /usr/JetBrains，如果没有JetBrains则自己创建</li>\n<li>cd /usr/JetBrains</li>\n<li>sudo tar -zxvf ideaIU-2016.1.2.tar.gz</li>\n<li>sudo mv idea-IU-145.971.21 idea</li>\n<li>cd idea/bin</li>\n<li>命令行启动Idea： ./idea.sh，正常的话应该会出现软件的配置设置</li>\n<li>软件启动，创建任意Java程序，配置JDK路径，然后创建测试项目，过程中运行所需资源都会自动下载，耐心等待即可</li>\n</ol>\n<p>设置启动图标启动Idea</p>\n<ol>\n<li>sudo vim /usr/share/applications/idea.desktop，当然软件启动后也会提示是否创建快捷访问链接，可通过IDEA创建启动图标</li>\n<li>编辑文件内容：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Name=InteliJ IDEA</span><br><span class=\"line\">Comment=InteliJ IDEA Integrated Development Environment</span><br><span class=\"line\">Icon=/usr/JetBrains/idea/bin/idea.png</span><br><span class=\"line\">Exec=/usr/JetBrains/idea/bin/idea.sh</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在启动器别表即可找到InteliJ IDEA启动图标，点击启动即可</li>\n</ol>\n<h1 id=\"webstorm安装\"><a class=\"markdownIt-Anchor\" href=\"#webstorm安装\"></a> WebStorm安装</h1>\n<p>下载地址：<a href=\"http://www.jetbrains.com/webstorm/download/#section=linux\" target=\"_blank\" rel=\"noopener\">http://www.jetbrains.com/webstorm/download/#section=linux</a></p>\n<p>webstorm安装请参考AndroidStudio和IDEA</p>\n<p>设置启动图标启动Idea</p>\n<ol>\n<li>sudo vim /usr/share/applications/idea.desktop，当然软件启动后也会提示是否创建快捷访问链接，可通过IDEA创建启动图标</li>\n<li>编辑文件内容：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Name=WebStorm</span><br><span class=\"line\">Comment=WebStorm Integrated Development Environment</span><br><span class=\"line\">Icon=/usr/JetBrains/WebStorm/bin/webstorm.png</span><br><span class=\"line\">Exec=/usr/JetBrains/WebStorm/bin/webstorm.sh</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"软件破解\"><a class=\"markdownIt-Anchor\" href=\"#软件破解\"></a> 软件破解</h1>\n<p>软件破解请参考： <a href=\"http://idea.lanyus.com/\" target=\"_blank\" rel=\"noopener\">http://idea.lanyus.com/</a></p>\n<ol>\n<li>使用前请将“0.0.0.0 <a href=\"http://account.jetbrains.com\" target=\"_blank\" rel=\"noopener\">account.jetbrains.com</a>”添加到hosts文件中</li>\n<li>在网页获取注册码，在注册页面填入注册码即可</li>\n</ol>\n<h1 id=\"android-studio安装\"><a class=\"markdownIt-Anchor\" href=\"#android-studio安装\"></a> Android Studio安装</h1>\n<p>以下为相关软件下载，2／3中软件为采用第三方模拟器的时候需要下载，利用自带模拟器则可跳过下载</p>\n<ol>\n<li>下载Android Studio安装软件： <a href=\"https://developer.android.google.cn/studio/#downloads\" target=\"_blank\" rel=\"noopener\">https://developer.android.google.cn/studio/#downloads</a></li>\n<li>下载virtualbox： <a href=\"https://www.virtualbox.org/wiki/Linux_Downloads\" target=\"_blank\" rel=\"noopener\">https://www.virtualbox.org/wiki/Linux_Downloads</a></li>\n<li>下载Genymotion： <a href=\"https://www.genymotion.com/download\" target=\"_blank\" rel=\"noopener\">https://www.genymotion.com/download</a></li>\n</ol>\n<p>安装前请确保网络状态良好，现在安装Android Studio，所需Android SDK、自带模拟器镜像、gradle等都可以在线直接通过开发工具下载安装</p>\n<h2 id=\"mac系统\"><a class=\"markdownIt-Anchor\" href=\"#mac系统\"></a> mac系统</h2>\n<p>直接安装dmg安装包即可</p>\n<h2 id=\"linux系统\"><a class=\"markdownIt-Anchor\" href=\"#linux系统\"></a> Linux系统</h2>\n<ol>\n<li>进入安装包所在目录下，如：android-studio-ide-181.5056338-linux.zip</li>\n<li>sudo mkdir /usr/JetBrains</li>\n<li>sudo cp android-studio-ide-181.5056338-linux.zip /usr/JetBrains</li>\n<li>cd /usr/JetBrains</li>\n<li>sudo unzip  android-studio-ide-181.5056338-linux.zip</li>\n<li>cd android-studio/bin</li>\n<li>命令行启动AndroidStuido： ./studio.sh，正常的话应该会出现软件的配置设置</li>\n<li>软件启动，因为没有Android SDK，会弹出提示界面，点击cancle之后会自动下载Android SDK，然后创建测试项目，过程中运行所需资源都会自动下载，耐心等待即可</li>\n</ol>\n<p>设置启动图标启动Android Studio</p>\n<ol>\n<li>sudo vim /usr/share/applications/android-studio.desktop</li>\n<li>编辑文件内容：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Name=Android Studio</span><br><span class=\"line\">Comment=Android Studio Integrated Development Environment</span><br><span class=\"line\">Icon=/usr/JetBrains/android-studio/bin/studio.png</span><br><span class=\"line\">Exec=/usr/JetBrains/android-studio/bin/studio.sh</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在启动器别表即可找到Android Studio启动图标，点击启动即可</li>\n</ol>\n<h1 id=\"模拟器\"><a class=\"markdownIt-Anchor\" href=\"#模拟器\"></a> 模拟器</h1>\n<p>Android程序调试可通过真机、自带模拟器、第三方模拟器调试</p>\n<p>第三方模拟器大多使用Genymotion，官网下载：<a href=\"https://www.genymotion.com/download/\" target=\"_blank\" rel=\"noopener\">https://www.genymotion.com/download/</a><br>\nandroid Studio安装Genymotion插件使用</p>\n<h2 id=\"安装过程遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#安装过程遇到的问题\"></a> 安装过程遇到的问题</h2>\n<ol>\n<li>\n<p>linux中启动模拟器出现grant current user access to /dev/kvm错误<br>\n解决方法：打开terminal,输入代码who／whoami查找当前用户名；sudo chown username -R /dev/kvm 注意username是你用的用户名</p>\n</li>\n<li>\n<p>无法修改模拟器创建时的选项 emulated performance<br>\n解决方法： Nexus 5X和Nexus 5镜像不支持，换成其他镜像即可</p>\n</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/wshish920907/article/details/78249528\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wshish920907/article/details/78249528</a></p>\n<h1 id=\"intelij-idea安装\"><a class=\"markdownIt-Anchor\" href=\"#intelij-idea安装\"></a> InteliJ IDEA安装</h1>\n<p>下载地址：<a href=\"http://www.jetbrains.com/idea/?fromMenu\" target=\"_blank\" rel=\"noopener\">http://www.jetbrains.com/idea/?fromMenu</a></p>\n<h2 id=\"linux系统-2\"><a class=\"markdownIt-Anchor\" href=\"#linux系统-2\"></a> Linux系统</h2>\n<ol>\n<li>进入安装包所在目录下，如：ideaIU-2016.1.2.tar.gz</li>\n<li>sudo cp android-studio-ide-181.5056338-linux.zip /usr/JetBrains，如果没有JetBrains则自己创建</li>\n<li>cd /usr/JetBrains</li>\n<li>sudo tar -zxvf ideaIU-2016.1.2.tar.gz</li>\n<li>sudo mv idea-IU-145.971.21 idea</li>\n<li>cd idea/bin</li>\n<li>命令行启动Idea： ./idea.sh，正常的话应该会出现软件的配置设置</li>\n<li>软件启动，创建任意Java程序，配置JDK路径，然后创建测试项目，过程中运行所需资源都会自动下载，耐心等待即可</li>\n</ol>\n<p>设置启动图标启动Idea</p>\n<ol>\n<li>sudo vim /usr/share/applications/idea.desktop，当然软件启动后也会提示是否创建快捷访问链接，可通过IDEA创建启动图标</li>\n<li>编辑文件内容：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Name=InteliJ IDEA</span><br><span class=\"line\">Comment=InteliJ IDEA Integrated Development Environment</span><br><span class=\"line\">Icon=/usr/JetBrains/idea/bin/idea.png</span><br><span class=\"line\">Exec=/usr/JetBrains/idea/bin/idea.sh</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在启动器别表即可找到InteliJ IDEA启动图标，点击启动即可</li>\n</ol>\n<h1 id=\"webstorm安装\"><a class=\"markdownIt-Anchor\" href=\"#webstorm安装\"></a> WebStorm安装</h1>\n<p>下载地址：<a href=\"http://www.jetbrains.com/webstorm/download/#section=linux\" target=\"_blank\" rel=\"noopener\">http://www.jetbrains.com/webstorm/download/#section=linux</a></p>\n<p>webstorm安装请参考AndroidStudio和IDEA</p>\n<p>设置启动图标启动Idea</p>\n<ol>\n<li>sudo vim /usr/share/applications/idea.desktop，当然软件启动后也会提示是否创建快捷访问链接，可通过IDEA创建启动图标</li>\n<li>编辑文件内容：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Name=WebStorm</span><br><span class=\"line\">Comment=WebStorm Integrated Development Environment</span><br><span class=\"line\">Icon=/usr/JetBrains/WebStorm/bin/webstorm.png</span><br><span class=\"line\">Exec=/usr/JetBrains/WebStorm/bin/webstorm.sh</span><br></pre></td></tr></table></figure>"},{"title":"hexo使用速记","copyright":true,"comments":1,"toc":true,"date":"2018-10-04T14:10:23.000Z","password":null,"_content":"\n# 说明\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。详细学习请参考：https://hexo.io/zh-cn/docs 。\n本文章只是个人使用过程中重点内容记录。\n\n# 安装\n前置安装：node，git\n安装：npm install -g hexo-cli\n\n# 初始化项目\n1. mkdir [项目名称, 如：test]\n2. hexo init [项目名称, 如：test] //此处要求文件夹内为空\n3. cd [项目名称, 如：test]\n4. npm install\n\n# 常用命令\n* hexo new [layout] '【文章名称】'    //创建不通类型文章\n~~~\nlaytou及路径如下：\npost\tsource/_posts\npage\tsource\ndraft\tsource/_drafts\n~~~\n* hexo clean    //清除hexo生成静态网站内容\n* hexo g        //生成hexo静态网站\n* hexo s        //启用hexo服务\n* hexo d        //hexo网站部署，配合hexo-deployer-git插件使用\n* hexo version  //hexo相关软件版本\n* hexo list [type] //type:post,page等\n\n# Front-matter和JSON Front-matter\n用来设定文章的一些参数，如是否添加密码、版权、标签、分类等信息。\n* Front-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，基于YAML\n~~~\ntitle: Hello World\ndate: 2013/7/13 20:46:25\n---\n~~~\n* JSON Front-matter 使用 JSON 来编写 Front-matter，只要将 --- 代换成 ;;; 即可\n~~~\n\"title\": \"Hello World\",\n\"date\": \"2013/7/13 20:46:25\"\n;;;\n~~~\n可配置参数如下：\n\n参数|描述|默认值\n--|--|--\nlayout\t| 布局\t\ntitle\t|标题\t\ndate\t|建立日期\t|文件建立日期\nupdated\t|更新日期\t|文件更新日期\ncomments\t|开启文章的评论功能|\ttrue\ntags\t|标签（不适用于分页）\t\ncategories\t|分类（不适用于分页）\t\npermalink\t|覆盖文章网址\t \n\n可以通过直接修改scaffolds内的模版来设定统一的文章额外信息，如：\n~~~\n---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\n  - \n  - \ncategories: \npassword: \ncopyright: true\ncomments: true\ntoc: true\n---\n~~~\n\n# 部署\n* 安装 hexo-deployer-git：npm install hexo-deployer-git --save\n* 配置hexo的_config.yml文件\n~~~\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: https://[XXX]@github.com/[XXX]/[XXX].github.io  //库（Repository）地址,如：https://epaypad@github.com/epaypad/epaypad.github.io\n  branch: master    //分支名称\n  message: https://github.com/chetaofeng/MyHexoBlogSource 内容部署 {{ now('YYYY-MM-DD HH:mm:ss') }} //自定义提交信息\n~~~\n* hexo d //命令执行后，稍等一会查看部署结果\n\n# hexo主题\nhexo默认主题为landscape，大家可以根据各自需要使用不通主题。\n本人使用的是NexT主题，使用请参考：http://theme-next.iissnan.com ，NexT更多配置，请参考：\nhttps://www.jianshu.com/p/1f8107a8778c","source":"_posts/环境搭建/10_hexo安装配置.md","raw":"---\ntitle: hexo使用速记\ntags:\n  - node\n  - hexo\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-04 22:10:23\ncategories: 搭建博客\npassword:\n---\n\n# 说明\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。详细学习请参考：https://hexo.io/zh-cn/docs 。\n本文章只是个人使用过程中重点内容记录。\n\n# 安装\n前置安装：node，git\n安装：npm install -g hexo-cli\n\n# 初始化项目\n1. mkdir [项目名称, 如：test]\n2. hexo init [项目名称, 如：test] //此处要求文件夹内为空\n3. cd [项目名称, 如：test]\n4. npm install\n\n# 常用命令\n* hexo new [layout] '【文章名称】'    //创建不通类型文章\n~~~\nlaytou及路径如下：\npost\tsource/_posts\npage\tsource\ndraft\tsource/_drafts\n~~~\n* hexo clean    //清除hexo生成静态网站内容\n* hexo g        //生成hexo静态网站\n* hexo s        //启用hexo服务\n* hexo d        //hexo网站部署，配合hexo-deployer-git插件使用\n* hexo version  //hexo相关软件版本\n* hexo list [type] //type:post,page等\n\n# Front-matter和JSON Front-matter\n用来设定文章的一些参数，如是否添加密码、版权、标签、分类等信息。\n* Front-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，基于YAML\n~~~\ntitle: Hello World\ndate: 2013/7/13 20:46:25\n---\n~~~\n* JSON Front-matter 使用 JSON 来编写 Front-matter，只要将 --- 代换成 ;;; 即可\n~~~\n\"title\": \"Hello World\",\n\"date\": \"2013/7/13 20:46:25\"\n;;;\n~~~\n可配置参数如下：\n\n参数|描述|默认值\n--|--|--\nlayout\t| 布局\t\ntitle\t|标题\t\ndate\t|建立日期\t|文件建立日期\nupdated\t|更新日期\t|文件更新日期\ncomments\t|开启文章的评论功能|\ttrue\ntags\t|标签（不适用于分页）\t\ncategories\t|分类（不适用于分页）\t\npermalink\t|覆盖文章网址\t \n\n可以通过直接修改scaffolds内的模版来设定统一的文章额外信息，如：\n~~~\n---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\n  - \n  - \ncategories: \npassword: \ncopyright: true\ncomments: true\ntoc: true\n---\n~~~\n\n# 部署\n* 安装 hexo-deployer-git：npm install hexo-deployer-git --save\n* 配置hexo的_config.yml文件\n~~~\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: https://[XXX]@github.com/[XXX]/[XXX].github.io  //库（Repository）地址,如：https://epaypad@github.com/epaypad/epaypad.github.io\n  branch: master    //分支名称\n  message: https://github.com/chetaofeng/MyHexoBlogSource 内容部署 {{ now('YYYY-MM-DD HH:mm:ss') }} //自定义提交信息\n~~~\n* hexo d //命令执行后，稍等一会查看部署结果\n\n# hexo主题\nhexo默认主题为landscape，大家可以根据各自需要使用不通主题。\n本人使用的是NexT主题，使用请参考：http://theme-next.iissnan.com ，NexT更多配置，请参考：\nhttps://www.jianshu.com/p/1f8107a8778c","slug":"环境搭建-10-hexo安装配置","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytryd005ack8h3123zxde","content":"<h1 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\"></a> 说明</h1>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。详细学习请参考：<a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs</a> 。<br>\n本文章只是个人使用过程中重点内容记录。</p>\n<h1 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h1>\n<p>前置安装：node，git<br>\n安装：npm install -g hexo-cli</p>\n<h1 id=\"初始化项目\"><a class=\"markdownIt-Anchor\" href=\"#初始化项目\"></a> 初始化项目</h1>\n<ol>\n<li>mkdir [项目名称, 如：test]</li>\n<li>hexo init [项目名称, 如：test] //此处要求文件夹内为空</li>\n<li>cd [项目名称, 如：test]</li>\n<li>npm install</li>\n</ol>\n<h1 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\"></a> 常用命令</h1>\n<ul>\n<li>hexo new [layout] ‘【文章名称】’    //创建不通类型文章</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">laytou及路径如下：</span><br><span class=\"line\">post\tsource/_posts</span><br><span class=\"line\">page\tsource</span><br><span class=\"line\">draft\tsource/_drafts</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hexo clean    //清除hexo生成静态网站内容</li>\n<li>hexo g        //生成hexo静态网站</li>\n<li>hexo s        //启用hexo服务</li>\n<li>hexo d        //hexo网站部署，配合hexo-deployer-git插件使用</li>\n<li>hexo version  //hexo相关软件版本</li>\n<li>hexo list [type] //type:post,page等</li>\n</ul>\n<h1 id=\"front-matter和json-front-matter\"><a class=\"markdownIt-Anchor\" href=\"#front-matter和json-front-matter\"></a> Front-matter和JSON Front-matter</h1>\n<p>用来设定文章的一些参数，如是否添加密码、版权、标签、分类等信息。</p>\n<ul>\n<li>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，基于YAML</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hello World</span><br><span class=\"line\">date: 2013/7/13 20:46:25</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<ul>\n<li>JSON Front-matter 使用 JSON 来编写 Front-matter，只要将 — 代换成 ;;; 即可</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;title&quot;: &quot;Hello World&quot;,</span><br><span class=\"line\">&quot;date&quot;: &quot;2013/7/13 20:46:25&quot;</span><br><span class=\"line\">;;;</span><br></pre></td></tr></table></figure>\n<p>可配置参数如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layout</td>\n<td>布局</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n<td></td>\n</tr>\n<tr>\n<td>date</td>\n<td>建立日期</td>\n<td>文件建立日期</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>更新日期</td>\n<td>文件更新日期</td>\n</tr>\n<tr>\n<td>comments</td>\n<td>开启文章的评论功能</td>\n<td>true</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>标签（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td>categories</td>\n<td>分类（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td>permalink</td>\n<td>覆盖文章网址</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>可以通过直接修改scaffolds内的模版来设定统一的文章额外信息，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &#123;&#123; title &#125;&#125;</span><br><span class=\"line\">date: &#123;&#123; date &#125;&#125;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - </span><br><span class=\"line\">  - </span><br><span class=\"line\">categories: </span><br><span class=\"line\">password: </span><br><span class=\"line\">copyright: true</span><br><span class=\"line\">comments: true</span><br><span class=\"line\">toc: true</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h1 id=\"部署\"><a class=\"markdownIt-Anchor\" href=\"#部署\"></a> 部署</h1>\n<ul>\n<li>安装 hexo-deployer-git：npm install hexo-deployer-git --save</li>\n<li>配置hexo的_config.yml文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://[XXX]@github.com/[XXX]/[XXX].github.io  //库（Repository）地址,如：https://epaypad@github.com/epaypad/epaypad.github.io</span><br><span class=\"line\">  branch: master    //分支名称</span><br><span class=\"line\">  message: https://github.com/chetaofeng/MyHexoBlogSource 内容部署 &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125; //自定义提交信息</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hexo d //命令执行后，稍等一会查看部署结果</li>\n</ul>\n<h1 id=\"hexo主题\"><a class=\"markdownIt-Anchor\" href=\"#hexo主题\"></a> hexo主题</h1>\n<p>hexo默认主题为landscape，大家可以根据各自需要使用不通主题。<br>\n本人使用的是NexT主题，使用请参考：<a href=\"http://theme-next.iissnan.com\" target=\"_blank\" rel=\"noopener\">http://theme-next.iissnan.com</a> ，NexT更多配置，请参考：<br>\n<a href=\"https://www.jianshu.com/p/1f8107a8778c\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/1f8107a8778c</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\"></a> 说明</h1>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。详细学习请参考：<a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs</a> 。<br>\n本文章只是个人使用过程中重点内容记录。</p>\n<h1 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h1>\n<p>前置安装：node，git<br>\n安装：npm install -g hexo-cli</p>\n<h1 id=\"初始化项目\"><a class=\"markdownIt-Anchor\" href=\"#初始化项目\"></a> 初始化项目</h1>\n<ol>\n<li>mkdir [项目名称, 如：test]</li>\n<li>hexo init [项目名称, 如：test] //此处要求文件夹内为空</li>\n<li>cd [项目名称, 如：test]</li>\n<li>npm install</li>\n</ol>\n<h1 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\"></a> 常用命令</h1>\n<ul>\n<li>hexo new [layout] ‘【文章名称】’    //创建不通类型文章</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">laytou及路径如下：</span><br><span class=\"line\">post\tsource/_posts</span><br><span class=\"line\">page\tsource</span><br><span class=\"line\">draft\tsource/_drafts</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hexo clean    //清除hexo生成静态网站内容</li>\n<li>hexo g        //生成hexo静态网站</li>\n<li>hexo s        //启用hexo服务</li>\n<li>hexo d        //hexo网站部署，配合hexo-deployer-git插件使用</li>\n<li>hexo version  //hexo相关软件版本</li>\n<li>hexo list [type] //type:post,page等</li>\n</ul>\n<h1 id=\"front-matter和json-front-matter\"><a class=\"markdownIt-Anchor\" href=\"#front-matter和json-front-matter\"></a> Front-matter和JSON Front-matter</h1>\n<p>用来设定文章的一些参数，如是否添加密码、版权、标签、分类等信息。</p>\n<ul>\n<li>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，基于YAML</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hello World</span><br><span class=\"line\">date: 2013/7/13 20:46:25</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<ul>\n<li>JSON Front-matter 使用 JSON 来编写 Front-matter，只要将 — 代换成 ;;; 即可</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;title&quot;: &quot;Hello World&quot;,</span><br><span class=\"line\">&quot;date&quot;: &quot;2013/7/13 20:46:25&quot;</span><br><span class=\"line\">;;;</span><br></pre></td></tr></table></figure>\n<p>可配置参数如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layout</td>\n<td>布局</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n<td></td>\n</tr>\n<tr>\n<td>date</td>\n<td>建立日期</td>\n<td>文件建立日期</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>更新日期</td>\n<td>文件更新日期</td>\n</tr>\n<tr>\n<td>comments</td>\n<td>开启文章的评论功能</td>\n<td>true</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>标签（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td>categories</td>\n<td>分类（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td>permalink</td>\n<td>覆盖文章网址</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>可以通过直接修改scaffolds内的模版来设定统一的文章额外信息，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &#123;&#123; title &#125;&#125;</span><br><span class=\"line\">date: &#123;&#123; date &#125;&#125;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - </span><br><span class=\"line\">  - </span><br><span class=\"line\">categories: </span><br><span class=\"line\">password: </span><br><span class=\"line\">copyright: true</span><br><span class=\"line\">comments: true</span><br><span class=\"line\">toc: true</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h1 id=\"部署\"><a class=\"markdownIt-Anchor\" href=\"#部署\"></a> 部署</h1>\n<ul>\n<li>安装 hexo-deployer-git：npm install hexo-deployer-git --save</li>\n<li>配置hexo的_config.yml文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://[XXX]@github.com/[XXX]/[XXX].github.io  //库（Repository）地址,如：https://epaypad@github.com/epaypad/epaypad.github.io</span><br><span class=\"line\">  branch: master    //分支名称</span><br><span class=\"line\">  message: https://github.com/chetaofeng/MyHexoBlogSource 内容部署 &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125; //自定义提交信息</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hexo d //命令执行后，稍等一会查看部署结果</li>\n</ul>\n<h1 id=\"hexo主题\"><a class=\"markdownIt-Anchor\" href=\"#hexo主题\"></a> hexo主题</h1>\n<p>hexo默认主题为landscape，大家可以根据各自需要使用不通主题。<br>\n本人使用的是NexT主题，使用请参考：<a href=\"http://theme-next.iissnan.com\" target=\"_blank\" rel=\"noopener\">http://theme-next.iissnan.com</a> ，NexT更多配置，请参考：<br>\n<a href=\"https://www.jianshu.com/p/1f8107a8778c\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/1f8107a8778c</a></p>\n"},{"title":"MySQL安装配置","copyright":true,"comments":1,"toc":true,"date":"2018-10-04T14:10:23.000Z","password":null,"_content":"\n\n \nhttps://jingyan.baidu.com/article/36d6ed1f821ca21bcf4883da.html","source":"_posts/环境搭建/11_VirturalBox安装.md","raw":"---\ntitle: MySQL安装配置\ntags:\n  - node\n  - hexo\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-04 22:10:23\ncategories: \npassword:\n---\n\n\n \nhttps://jingyan.baidu.com/article/36d6ed1f821ca21bcf4883da.html","slug":"环境搭建-11-VirturalBox安装","published":1,"updated":"2019-01-18T07:08:57.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytrye005cck8hc39rva40","content":"<p><a href=\"https://jingyan.baidu.com/article/36d6ed1f821ca21bcf4883da.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/36d6ed1f821ca21bcf4883da.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://jingyan.baidu.com/article/36d6ed1f821ca21bcf4883da.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/36d6ed1f821ca21bcf4883da.html</a></p>\n"},{"title":"MySQL安装配置","copyright":true,"comments":1,"toc":true,"date":"2018-10-04T14:10:23.000Z","password":null,"_content":" \n# 简介\n下载地址：https://dev.mysql.com/downloads/mysql/\n官方数据客户端工具： https://dev.mysql.com/downloads/workbench/\n推荐客户端工具：Navicat Premium- https://www.navicat.com/en/download/navicat-premium\n\n# 安装登陆\n## mac系统\n1. 安装dmg安装包，如：mysql-5.7.8-rc-osx10.9-x86_64.dmg，安装过程中会弹出临时的密码，务必截图保存方便后面更改密码，安装过程有时会卡顿，时间会比较长，需耐心等待一会。\n2. 在【系统偏好设置】中启动MySQL服务，如果启动不起来，可选择开机启动，然后重启macOS\n3. 在MySQLWorkBench中，创建连接信息,hostname-127.0.0.1或localhost，端口3307\n4. 点击\"Store in Keychain...\"输入安装时提示的临时密码后确定\n5. 如果临时密码输入正确，则会弹出修改密码界面，修改密码后重新登陆即可\n\n## Linux系统\nLinux下安装有多种方式：\n1. 直接用软件仓库自动安装（如：ubuntu下，sudo apt-get install mysql-server）\n2. 通过下载deb或rmp安装包，直接双击安装\n3. 下载tar安装包，解压到硬盘，然后自己配置mysql\n4. 通过源码编译安装\n\n以下以tar包安装记录:参考文章（http://www.pianshen.com/article/975954037/）\n1. sudo cp mysql-8.0.13-linux-glibc2.12-x86_64.tar.xz /usr\n2. cd /usr\n3. sudo tar xvJf mysql-8.0.13-linux-glibc2.12-x86_64.tar.xz\n4. 为MySQL创建专用用户，用户名为mysql，用户组为mysql；\nsudo groupadd mysql //创建组\nsudo useradd -r -g mysql mysql //创建用户并划入mysql组下 \n5. 为解压出来的所有文件更改用户和组\nsudo chown -R mysql mysql-8.0.13-linux-glibc2.12-x86_64 //更改拥有者\nsudo chgrp -R mysql mysql-8.0.13-linux-glibc2.12-x86_64 //更改组\n6. sudo apt-get install libaio1 libaio-dev\n7. 初始化数据库: sudo ./bin/mysqld --initialize --user mysql\n执行过程中会生成一个临时密码，一定要保存好，后面修改密码需要用到，如图：\n![image](/pub-images/mysql.png)\n8. 开启服务: bin/mysqld_safe --user=mysql &\n9. 使用用户root登录: bin/mysql -uroot -p\n10. 更改root用户密码:\n~~~\nALTER USER 'root'@'localhost' IDENTIFIED BY 'root' PASSWORD EXPIRE NEVER;   //修改root的密码与加密方式\nuse mysql; #切换到mysql库 \nupdate user set host='%' where user='root'; //更改可以登录的IP为任意IP\nALTER user 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root';  //再次更改root用户密码，使其可以在任意IP访问\nflush privileges; #刷新权限\n~~~\n11. 通过客户端测试登陆即可\n\n# Navicat安装\n## Linux\n1. 进入安装包所在目录下，如：navicat_premium12_cs_x64_for_linux.zip\n2. sudo cp navicat_premium12_cs_x64_for_linux.zip /usr/\n4. cd /usr/\n5. sudo unzip navicat_premium12_cs_x64_for_linux.zip \n6. cd navicat120_premium_cs_x64\n7. 命令行启动：sudo ./start_navicat，正常的话应该会出现一个Win Mono下载界面，可不下载，跳过即可 \n\n## Windows & macOS\n直接下载安装就行，破解请自行查找","source":"_posts/环境搭建/11_MySQL安装配置.md","raw":"---\ntitle: MySQL安装配置\ntags:\n  - 环境搭建\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-04 22:10:23\ncategories: \npassword:\n---\n \n# 简介\n下载地址：https://dev.mysql.com/downloads/mysql/\n官方数据客户端工具： https://dev.mysql.com/downloads/workbench/\n推荐客户端工具：Navicat Premium- https://www.navicat.com/en/download/navicat-premium\n\n# 安装登陆\n## mac系统\n1. 安装dmg安装包，如：mysql-5.7.8-rc-osx10.9-x86_64.dmg，安装过程中会弹出临时的密码，务必截图保存方便后面更改密码，安装过程有时会卡顿，时间会比较长，需耐心等待一会。\n2. 在【系统偏好设置】中启动MySQL服务，如果启动不起来，可选择开机启动，然后重启macOS\n3. 在MySQLWorkBench中，创建连接信息,hostname-127.0.0.1或localhost，端口3307\n4. 点击\"Store in Keychain...\"输入安装时提示的临时密码后确定\n5. 如果临时密码输入正确，则会弹出修改密码界面，修改密码后重新登陆即可\n\n## Linux系统\nLinux下安装有多种方式：\n1. 直接用软件仓库自动安装（如：ubuntu下，sudo apt-get install mysql-server）\n2. 通过下载deb或rmp安装包，直接双击安装\n3. 下载tar安装包，解压到硬盘，然后自己配置mysql\n4. 通过源码编译安装\n\n以下以tar包安装记录:参考文章（http://www.pianshen.com/article/975954037/）\n1. sudo cp mysql-8.0.13-linux-glibc2.12-x86_64.tar.xz /usr\n2. cd /usr\n3. sudo tar xvJf mysql-8.0.13-linux-glibc2.12-x86_64.tar.xz\n4. 为MySQL创建专用用户，用户名为mysql，用户组为mysql；\nsudo groupadd mysql //创建组\nsudo useradd -r -g mysql mysql //创建用户并划入mysql组下 \n5. 为解压出来的所有文件更改用户和组\nsudo chown -R mysql mysql-8.0.13-linux-glibc2.12-x86_64 //更改拥有者\nsudo chgrp -R mysql mysql-8.0.13-linux-glibc2.12-x86_64 //更改组\n6. sudo apt-get install libaio1 libaio-dev\n7. 初始化数据库: sudo ./bin/mysqld --initialize --user mysql\n执行过程中会生成一个临时密码，一定要保存好，后面修改密码需要用到，如图：\n![image](/pub-images/mysql.png)\n8. 开启服务: bin/mysqld_safe --user=mysql &\n9. 使用用户root登录: bin/mysql -uroot -p\n10. 更改root用户密码:\n~~~\nALTER USER 'root'@'localhost' IDENTIFIED BY 'root' PASSWORD EXPIRE NEVER;   //修改root的密码与加密方式\nuse mysql; #切换到mysql库 \nupdate user set host='%' where user='root'; //更改可以登录的IP为任意IP\nALTER user 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root';  //再次更改root用户密码，使其可以在任意IP访问\nflush privileges; #刷新权限\n~~~\n11. 通过客户端测试登陆即可\n\n# Navicat安装\n## Linux\n1. 进入安装包所在目录下，如：navicat_premium12_cs_x64_for_linux.zip\n2. sudo cp navicat_premium12_cs_x64_for_linux.zip /usr/\n4. cd /usr/\n5. sudo unzip navicat_premium12_cs_x64_for_linux.zip \n6. cd navicat120_premium_cs_x64\n7. 命令行启动：sudo ./start_navicat，正常的话应该会出现一个Win Mono下载界面，可不下载，跳过即可 \n\n## Windows & macOS\n直接下载安装就行，破解请自行查找","slug":"环境搭建-11-MySQL安装配置","published":1,"updated":"2019-02-14T01:41:31.000Z","layout":"post","photos":[],"link":"","_id":"cjs3ytryg005eck8h3gi70kl8","content":"<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<p>下载地址：<a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/downloads/mysql/</a><br>\n官方数据客户端工具： <a href=\"https://dev.mysql.com/downloads/workbench/\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/downloads/workbench/</a><br>\n推荐客户端工具：Navicat Premium- <a href=\"https://www.navicat.com/en/download/navicat-premium\" target=\"_blank\" rel=\"noopener\">https://www.navicat.com/en/download/navicat-premium</a></p>\n<h1 id=\"安装登陆\"><a class=\"markdownIt-Anchor\" href=\"#安装登陆\"></a> 安装登陆</h1>\n<h2 id=\"mac系统\"><a class=\"markdownIt-Anchor\" href=\"#mac系统\"></a> mac系统</h2>\n<ol>\n<li>安装dmg安装包，如：mysql-5.7.8-rc-osx10.9-x86_64.dmg，安装过程中会弹出临时的密码，务必截图保存方便后面更改密码，安装过程有时会卡顿，时间会比较长，需耐心等待一会。</li>\n<li>在【系统偏好设置】中启动MySQL服务，如果启动不起来，可选择开机启动，然后重启macOS</li>\n<li>在MySQLWorkBench中，创建连接信息,hostname-127.0.0.1或localhost，端口3307</li>\n<li>点击&quot;Store in Keychain…&quot;输入安装时提示的临时密码后确定</li>\n<li>如果临时密码输入正确，则会弹出修改密码界面，修改密码后重新登陆即可</li>\n</ol>\n<h2 id=\"linux系统\"><a class=\"markdownIt-Anchor\" href=\"#linux系统\"></a> Linux系统</h2>\n<p>Linux下安装有多种方式：</p>\n<ol>\n<li>直接用软件仓库自动安装（如：ubuntu下，sudo apt-get install mysql-server）</li>\n<li>通过下载deb或rmp安装包，直接双击安装</li>\n<li>下载tar安装包，解压到硬盘，然后自己配置mysql</li>\n<li>通过源码编译安装</li>\n</ol>\n<p>以下以tar包安装记录:参考文章（<a href=\"http://www.pianshen.com/article/975954037/%EF%BC%89\" target=\"_blank\" rel=\"noopener\">http://www.pianshen.com/article/975954037/）</a></p>\n<ol>\n<li>sudo cp mysql-8.0.13-linux-glibc2.12-x86_64.tar.xz /usr</li>\n<li>cd /usr</li>\n<li>sudo tar xvJf mysql-8.0.13-linux-glibc2.12-x86_64.tar.xz</li>\n<li>为MySQL创建专用用户，用户名为mysql，用户组为mysql；<br>\nsudo groupadd mysql //创建组<br>\nsudo useradd -r -g mysql mysql //创建用户并划入mysql组下</li>\n<li>为解压出来的所有文件更改用户和组<br>\nsudo chown -R mysql mysql-8.0.13-linux-glibc2.12-x86_64 //更改拥有者<br>\nsudo chgrp -R mysql mysql-8.0.13-linux-glibc2.12-x86_64 //更改组</li>\n<li>sudo apt-get install libaio1 libaio-dev</li>\n<li>初始化数据库: sudo ./bin/mysqld --initialize --user mysql<br>\n执行过程中会生成一个临时密码，一定要保存好，后面修改密码需要用到，如图：<br>\n<img src=\"/pub-images/mysql.png\" alt=\"image\"></li>\n<li>开启服务: bin/mysqld_safe --user=mysql &amp;</li>\n<li>使用用户root登录: bin/mysql -uroot -p</li>\n<li>更改root用户密码:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;root&apos; PASSWORD EXPIRE NEVER;   //修改root的密码与加密方式</span><br><span class=\"line\">use mysql; #切换到mysql库 </span><br><span class=\"line\">update user set host=&apos;%&apos; where user=&apos;root&apos;; //更改可以登录的IP为任意IP</span><br><span class=\"line\">ALTER user &apos;root&apos;@&apos;%&apos; IDENTIFIED WITH mysql_native_password BY &apos;root&apos;;  //再次更改root用户密码，使其可以在任意IP访问</span><br><span class=\"line\">flush privileges; #刷新权限</span><br></pre></td></tr></table></figure>\n<ol start=\"11\">\n<li>通过客户端测试登陆即可</li>\n</ol>\n<h1 id=\"navicat安装\"><a class=\"markdownIt-Anchor\" href=\"#navicat安装\"></a> Navicat安装</h1>\n<h2 id=\"linux\"><a class=\"markdownIt-Anchor\" href=\"#linux\"></a> Linux</h2>\n<ol>\n<li>进入安装包所在目录下，如：navicat_premium12_cs_x64_for_linux.zip</li>\n<li>sudo cp navicat_premium12_cs_x64_for_linux.zip /usr/</li>\n<li>cd /usr/</li>\n<li>sudo unzip navicat_premium12_cs_x64_for_linux.zip</li>\n<li>cd navicat120_premium_cs_x64</li>\n<li>命令行启动：sudo ./start_navicat，正常的话应该会出现一个Win Mono下载界面，可不下载，跳过即可</li>\n</ol>\n<h2 id=\"windows-macos\"><a class=\"markdownIt-Anchor\" href=\"#windows-macos\"></a> Windows &amp; macOS</h2>\n<p>直接下载安装就行，破解请自行查找</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<p>下载地址：<a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/downloads/mysql/</a><br>\n官方数据客户端工具： <a href=\"https://dev.mysql.com/downloads/workbench/\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/downloads/workbench/</a><br>\n推荐客户端工具：Navicat Premium- <a href=\"https://www.navicat.com/en/download/navicat-premium\" target=\"_blank\" rel=\"noopener\">https://www.navicat.com/en/download/navicat-premium</a></p>\n<h1 id=\"安装登陆\"><a class=\"markdownIt-Anchor\" href=\"#安装登陆\"></a> 安装登陆</h1>\n<h2 id=\"mac系统\"><a class=\"markdownIt-Anchor\" href=\"#mac系统\"></a> mac系统</h2>\n<ol>\n<li>安装dmg安装包，如：mysql-5.7.8-rc-osx10.9-x86_64.dmg，安装过程中会弹出临时的密码，务必截图保存方便后面更改密码，安装过程有时会卡顿，时间会比较长，需耐心等待一会。</li>\n<li>在【系统偏好设置】中启动MySQL服务，如果启动不起来，可选择开机启动，然后重启macOS</li>\n<li>在MySQLWorkBench中，创建连接信息,hostname-127.0.0.1或localhost，端口3307</li>\n<li>点击&quot;Store in Keychain…&quot;输入安装时提示的临时密码后确定</li>\n<li>如果临时密码输入正确，则会弹出修改密码界面，修改密码后重新登陆即可</li>\n</ol>\n<h2 id=\"linux系统\"><a class=\"markdownIt-Anchor\" href=\"#linux系统\"></a> Linux系统</h2>\n<p>Linux下安装有多种方式：</p>\n<ol>\n<li>直接用软件仓库自动安装（如：ubuntu下，sudo apt-get install mysql-server）</li>\n<li>通过下载deb或rmp安装包，直接双击安装</li>\n<li>下载tar安装包，解压到硬盘，然后自己配置mysql</li>\n<li>通过源码编译安装</li>\n</ol>\n<p>以下以tar包安装记录:参考文章（<a href=\"http://www.pianshen.com/article/975954037/%EF%BC%89\" target=\"_blank\" rel=\"noopener\">http://www.pianshen.com/article/975954037/）</a></p>\n<ol>\n<li>sudo cp mysql-8.0.13-linux-glibc2.12-x86_64.tar.xz /usr</li>\n<li>cd /usr</li>\n<li>sudo tar xvJf mysql-8.0.13-linux-glibc2.12-x86_64.tar.xz</li>\n<li>为MySQL创建专用用户，用户名为mysql，用户组为mysql；<br>\nsudo groupadd mysql //创建组<br>\nsudo useradd -r -g mysql mysql //创建用户并划入mysql组下</li>\n<li>为解压出来的所有文件更改用户和组<br>\nsudo chown -R mysql mysql-8.0.13-linux-glibc2.12-x86_64 //更改拥有者<br>\nsudo chgrp -R mysql mysql-8.0.13-linux-glibc2.12-x86_64 //更改组</li>\n<li>sudo apt-get install libaio1 libaio-dev</li>\n<li>初始化数据库: sudo ./bin/mysqld --initialize --user mysql<br>\n执行过程中会生成一个临时密码，一定要保存好，后面修改密码需要用到，如图：<br>\n<img src=\"/pub-images/mysql.png\" alt=\"image\"></li>\n<li>开启服务: bin/mysqld_safe --user=mysql &amp;</li>\n<li>使用用户root登录: bin/mysql -uroot -p</li>\n<li>更改root用户密码:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;root&apos; PASSWORD EXPIRE NEVER;   //修改root的密码与加密方式</span><br><span class=\"line\">use mysql; #切换到mysql库 </span><br><span class=\"line\">update user set host=&apos;%&apos; where user=&apos;root&apos;; //更改可以登录的IP为任意IP</span><br><span class=\"line\">ALTER user &apos;root&apos;@&apos;%&apos; IDENTIFIED WITH mysql_native_password BY &apos;root&apos;;  //再次更改root用户密码，使其可以在任意IP访问</span><br><span class=\"line\">flush privileges; #刷新权限</span><br></pre></td></tr></table></figure>\n<ol start=\"11\">\n<li>通过客户端测试登陆即可</li>\n</ol>\n<h1 id=\"navicat安装\"><a class=\"markdownIt-Anchor\" href=\"#navicat安装\"></a> Navicat安装</h1>\n<h2 id=\"linux\"><a class=\"markdownIt-Anchor\" href=\"#linux\"></a> Linux</h2>\n<ol>\n<li>进入安装包所在目录下，如：navicat_premium12_cs_x64_for_linux.zip</li>\n<li>sudo cp navicat_premium12_cs_x64_for_linux.zip /usr/</li>\n<li>cd /usr/</li>\n<li>sudo unzip navicat_premium12_cs_x64_for_linux.zip</li>\n<li>cd navicat120_premium_cs_x64</li>\n<li>命令行启动：sudo ./start_navicat，正常的话应该会出现一个Win Mono下载界面，可不下载，跳过即可</li>\n</ol>\n<h2 id=\"windows-macos\"><a class=\"markdownIt-Anchor\" href=\"#windows-macos\"></a> Windows &amp; macOS</h2>\n<p>直接下载安装就行，破解请自行查找</p>\n"},{"title":"docker","copyright":true,"comments":1,"toc":true,"date":"2018-10-18T01:38:59.000Z","password":null,"_content":"阿里云服务器购买\nhttp://www.runoob.com/docker/docker-tutorial.html\n\n\n官网：https://www.docker.com/\n中文社区：http://www.docker.org.cn/\n\nhttp://www.cnblogs.com/SzeCheng/p/6822905.html\n\nDocker是基于CS架构，系统有两个程序：docker服务端和docker客户端，是一种Linux容器管理技术 \n其中docker服务端是一个服务进程，管理着所有的容器。\ndocker客户端则扮演着docker服务端的远程控制器，可以用来控制docker的服务端进程。\n大部分情况下，docker服务端和客户端运行在一台机器上。\n\nDocker为容器引入了镜像，使得容器可以从预先定义好的模版（images）创建出来，并且这个模版还是分层的\nDocker容器通过镜像启动，是镜像的启动和执行阶段，采用写时复制（copy on write）\n\nDocker容器的能力\n1文件系统隔离：每个容器都有自己的root文件系统\n2进程隔离：每个容器都运行在自己的进程环境中\n3网络隔离：容器间的虚拟网络接口和IP地址都是分开的\n4资源隔离和分组：使用cgroups将CPU和内存之类的资源独立分配给每个Docker容器\n\ndocker Client客户端————>向docker服务器进程发起请求，如:创建、停止、销毁容器等操作\ndocker Server服务器进程—–>处理所有docker的请求，管理所有容器\ndocker Registry镜像仓库——>镜像存放的中央仓库，可看作是存放二进制的软件配置管理（scm）\n\nhttps://www.cnblogs.com/atuotuo/p/6668233.html\n\n安装：下载安装完成之后docker version查看\n\nKitematic，\n\n\nVagrant+virtualbox\nhttps://www.vagrantup.com/\nhttps://www.virtualbox.org/\nhttps://app.vagrantup.com/boxes/search\n\nmkdir centos7\nls\nvagrant init centos/7\nvagrant up\nvagrant ssh\nsudo yum update\nexit\nvagrant status\nvagrant halt\nvagrant destroy\n\nDocker Machine\ndocker-machine ls\ndocker-machine ssh demo\n\n远程登录管理deocker和本地管理远程docker\nhttps://labs.play-with-docker.com/\n\n\ndocker提供了一个开发，打包，运行app的平台，把app和底层infratructure隔离开来\n\ndocker底层技术支持,依赖于Linux内核特性Namespaces和Cgroups\nNamespaces：做隔离pid，net，ipc，mnt，uts\nControl Groups：做资源限制\nUnion file Systems：Container和image的分层\n\nnamespace，容器隔离的基础，保证A容器看不到B容器. 6个名空间：User,Mnt,Network,UTS,IPC,Pid\ncgroups，容器资源统计和隔离。主要用到的cgroups子系统：cpu,blkio,device,freezer,memory\nunionfs，典型：aufs/overlayfs，分层镜像实现的基础\n\ndocker image：是容器的基石，本身为层叠的只读文件系统，\ndocker通过联合加载技术一次加载多个文件系统，从外部看，只能看到一个文件系统，包含所有文件系统的文件和目录。bootfs-rootfs(如：ubuntu)-apache。。。，rootfs称为基础镜像\n文件和meta data的集合（root filesystem）\n分层的，并且每一层都可以添加改变删除文件，成为一个新的image\n不同的image可以共享x相同的layer\nimage本身是read-only的\nsudo docker image ls\ndocker history [imageID]\n\nimage的获取\n1. 通过Dockerfile\n2. 从Registry获取，如：docker pull ubuntu:14.04，https://hub.docker.com/\n3. 命令行的格式为：docker search 镜像名字\n\nDIY一个Base Image\n\nContainer\ndocker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。\n\n通过Image创建\n在Image Layer之上建立一个container layer（可读写）\n类比面向对象：类和实例\nImage负责app的存储和分发，Container负责运行app\ncontainer id只要能够区分出来就行，不用全部输入\ndocker container ls //运行的\ndocker container ls -a  //所有的，包括退出的和正在运行的\n\ndocker run命令有两个参数，一个是镜像名，一个是要在镜像中运行的命令。\n\ndocker run [name]   //运行container\ndocker run -it [name]   //交互式运行container\n\n命令简写\ndocker container ls -a  == docker ps -a\ndocker container rm [conatinerID] == docker rm [conatinerID]\ndocker image ls == docker images\ndocker image rm [imageID] == docker rmi [imageID]\n\ndocker container ls -aq //列出所有conatinerID\n\n构建自己的docker镜像\ndocker commit [containerName] [dockerhubID/imageNewName]\n\n通过Dockerfile创建\n1. 新建空文件夹\n2. 创建Dockerfile文件 \n~~~\nFROM [BaseImageName]    //如果没有则值为scratch\nRUN yum install -y vim\n~~~\n3. docker build -t [dockerhubID/imageNewName] .   //.表示当前目录中查找Dockerfile\n4. docker image ls查看\n\nDockerfile语法梳理及最佳实践\n1. FROM:尽量使用官方的iamge作为base image\n2. LABEL:Metadata不可少，让大家了解到image的信息，相当于image的注释\n3. RUN:为了美观，复杂的RUN请用反斜线换行，避免无用分层，合并多条命令成一行\n4. WORKDIR:设定当前工作目录，如果没有则会自动创建目录；用WORKDIR，不要用RUN cd，尽量使用绝对目录\n5. ADD和COPY：把本地文件（构建目录中的相对地址 ）添加到image里面，同时ADD添加的文件如果是压缩文件的话，会自动解压缩，大部分情况COPY优于ADD，添加远程文件／目录请使用crul或wget；目标路径需指定docker中的绝对路径\n6. ENV：设置环境变量，尽量使用ENV增加可维护性\n \n\nhttps://github.com/docker-library/\n\nMAINTAINER：指定容器的相关维护信息，维护人、邮箱等\nRUN：执行命令并创建新的Image Layer，是在容器构建时执行\nCMD：设置容器启动后默认执行的命令和参数，是在容器运行时运行的.如果docker run指定了其他命令，CMD命令被忽略；如果定义了多个CMD，只会执行最后一个；也可以只提供参数，作为ENTRYPOINT的默认参数\nENTRYPOINT：设置容器启动时运行的命令，让容器以应用程序或者服务的形式执行；不会被忽略，一定会执行；最佳实践是写一个shell脚本作为entrypoint\nEXPOSE：指定运行该镜像的容器使用的端口，但此端口并未自动打开，在使用的时候需要映射／设置端口 \nVOLUME：用来向基于镜像创建的容器，一个卷是可以存在于一个或多个容器的特定目录，这个目录可以绕过联合文件系统提供共享数据、数据持久化功能\nWORKDIR：用于在容器内部设置工作目录，一般使用绝对路径，如果使用相对路径，路径会一致传递下去\nUSER：用来指定镜像被什么用户去运行，如果不设置，默认为root用户\nONBUILD：用来为镜像添加触发器，当一个镜像被其他镜像作为基础镜像执行时，此触发器会被执行\n\n使用中间层镜像进行调试，查找错误\ndocker build命令只删除了中间层常见的容器，但是没有删除中间层创建的镜像\n\n构建缓存：构建过程中会产生缓存，下次构建直接使用缓存镜像，如果不想使用构建缓存，则可通过：docker build --no-cache,或者通过dockerfile文件的ENV REFRESH_DATE修改日期，则本条语句后就不使用缓存了\n\ndocker history 镜像，用来查看镜像的构建过程\n~~~\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh \"]\n~~~\nshell格式和EXEC格式 \n~~~ shell格式  \nRUN apt-get install -y vim\nCMD echo \"Hello Docker\"\nENTRYPOINT echo \"Hello Docker\"\n~~~\n\n~~~ exec格式\nRUN [\"apt-get\",\"install\",\"-y\",\"vim\"]\nCMD [\"/bin/echo\", \"Hello Docker\"]\nENTRYPOINT [\"/bin/echo\", \"Hello Docker\"]\n~~~\n\n登录dockerhub\ndocker login:  用户名（非邮箱）／密码\n1. 本地push上去，其他人就可以pull\n2. 关联github，github管理Dockerfile，有修改后自动build。Create-Create Automated build\n3. 通过docker的registry本地自己搭建。https://hub.docker.com/_/registry/,后期学习\n\n\nDockerfile实战\nDockerfile是docker构建镜像的基础，也是docker区别于其他容器的重要特征，正是有了Dockerfile，docker的自动化和可移植性才成为可能。\n不论是开发还是运维，学会编写Dockerfile几乎是必备的\n\n容器的操作\n//对容器执行命令\ndocker exec  \ndocker exec -it [containerID] /bin/bash\ndocker inspect [imageName] //查看\ndocker logs [containerID]\n\n\n前3章\n\n\nDocker常见命令\n容器相关操作\ndocker create # 创建一个容器但是不启动它\ndocker run # 创建并启动一个容器\ndocker stop # 停止容器运行，发送信号SIGTERM\ndocker start # 启动一个停止状态的容器\ndocker restart # 重启一个容器\ndocker rm # 删除一个容器\ndocker kill # 发送信号给容器，默认SIGKILL\ndocker attach # 连接(进入)到一个正在运行的容器\ndocker wait # 阻塞到一个容器，直到容器停止运行\n获取容器相关信息\ndocker ps # 显示状态为运行（Up）的容器\ndocker ps -a # 显示所有容器,包括运行中（Up）的和退出的(Exited)\ndocker inspect # 深入容器内部获取容器所有信息\ndocker logs # 查看容器的日志(stdout/stderr)\ndocker events # 得到docker服务器的实时的事件\ndocker port # 显示容器的端口映射\ndocker top # 显示容器的进程信息\ndocker diff # 显示容器文件系统的前后变化\n导出容器\ndocker cp # 从容器里向外拷贝文件或目录\ndocker export # 将容器整个文件系统导出为一个tar包，不带layers、tag等信息\n执行\ndocker exec # 在容器里执行一个命令，可以执行bash进入交互式\n镜像操作\ndocker images # 显示本地所有的镜像列表\ndocker import # 从一个tar包创建一个镜像，往往和export结合使用\ndocker build # 使用Dockerfile创建镜像（推荐）\ndocker commit # 从容器创建镜像\ndocker rmi # 删除一个镜像\ndocker load # 从一个tar包创建一个镜像，和save配合使用\ndocker save # 将一个镜像保存为一个tar包，带layers和tag信息\ndocker history # 显示生成一个镜像的历史命令\ndocker tag # 为镜像起一个别名\n镜像仓库(registry)操作\ndocker login # 登录到一个registry\ndocker search # 从registry仓库搜索镜像\ndocker pull # 从仓库下载镜像到本地\ndocker push # 将一个镜像push到registry仓库中  \n\n\ndocker system df    //查看镜像、容器、数据卷所占用的空间\ndocker commit -m \"ubuntu with vim\" -a \"sgy\" aa97ba3292ce sgy/ubuntu:vim\n\n\n前后端分离部署及运维\n高性能高负载高可用\n\nhttps://www.renren.io  renren-fast\n\nSwagger:\nJWT:\n\n\nhttps://www.ghostcloud.cn/\n\n\n服务器虚拟化 （vsphere  cas  ZStack不通厂家命名）：裸机虚拟化、半裸机虚拟化\n网络虚拟化 SDN\n存储虚拟化 VSAN   服务器做raid保证系统安全，然后做存储虚拟化\n\nMac 上的 Docker 背后应该是一个 Linux 虚机，和 Windows 版本的 Docker 是一样的原理\n\n容器一旦被直接推出，之前安装的gcc啊vim啊啥的就会全部gg掉。如果要保存修改，就需要将当前容器封装成一个新的镜像，这样下次启动这个新的镜像后之前作出的修改还都在。\n\n容器不适合构建那种发布周期以周或月为单位的大型单一架构企业软件，容器适合采用微服务的方式，以及探索诸如持续部署这样的技术，使得我们能安全地在一天内多次更新生产环境。\n\nhttps://blog.csdn.net/xdy3008/article/details/74531125\n\nhttps://www.missshi.cn/api/view/blog/5a6327c00a745f6335000004 \n\n\n想看到docker容器的ip地址，只需要安装net-tools就可以了：yum install net-tools -y\n\n\n\n\n\n如果你仅仅是想管理虚拟机，那么你应该使用vagrant。如果你想快速开发和部署应用，那么应该使用docker。\nvagrant是一款管理虚拟机的工具，而docker是一款通过将应用打包到轻量级容器，而实现构建和部署的工具。两者适用范围不同。一个容器就是一个包含了应用执行所依赖的数据(包括lib，配置文件等等)。它可以保证应用在一个可重复的环境中随时执行。\n\n\n\n数据卷：是经过特殊设计的目录，可以绕过联合文件系统ufs，为一个或多个容其提供访问。让你可以不受容器生命周期影响进行数据持久化。它们表现为容器内的空间，但实际保存在容器之外，从而允许你在不影响数据的情况下销毁、重建、修改、丢弃容器。\nDocker允许你定义应用部分和数据部分，并提供工具让你将他们分开。容器是短暂和一次性的。\ndocker run -v ~/container_data:/data:ro -it centos,映射本地~/container_data到容器/data下,且/data的权限为ro只读，登录进去后ls查看，发现会有data目录\n\n数据卷容器：命名的容器挂载数据卷，其他容器通过挂载这个容器实现数据共享，挂载数据卷的容器，就叫做数据卷容器。\ndocker run --volumes-from 数据卷容器名称\n即使删除了数据卷容器，挂载了数据卷容器的容器，仍然可以访问数据卷容器的目录，数据卷容器起的作用仅仅是将挂载配置传递到待挂载容器\n\nDocker数据卷的备份与还原：通过挂载目录压缩后放到挂载目录\n\nDocker For Mac的Docker Daemon是运行于虚拟机(xhyve)中的, 而不是像Linux上那样作为进程运行于宿主机，因此Docker For Mac没有docker0网桥，不能实现host网络模式，host模式会使Container复用Daemon的网络栈(在xhyve虚拟机中)，而不是与Host主机网络栈，这样虽然其它容器仍然可通过xhyve网络栈进行交互，但却不是用的Host上的端口(在Host上无法访问)。bridge网络模式 -p 参数不受此影响，它能正常打开Host上的端口并映射到Container的对应Port。\n\ndocker容器的网络连接\ndocker0：是Linux的虚拟网桥（网桥是数据链路层的一种设备），Linux的虚拟网桥可以设置IP地址，相当于拥有一个隐藏的虚拟网卡\ndocker0地址划分：IP127.17.42.1,掩码255.255.0.0,总共提供了65534个地址\n网桥操作需安装bridge-utils工具，安装之后brctl show查看网桥信息，可以添加网桥或者配置网桥信息\ndocker容器的IP地址在重启容器之后会变化，是不可靠的\n\n容器互联：在同一宿主机下，docker容器是通过虚拟网桥互相连接的，默认在同一宿主机下docker允许所有容器互联。让容器之间可以相互连接主要借用了一个link的功能。 在使用纯Docker时，被连接的容器必须在同一个Docker宿主机中。不同宿主机之间的容器如果想要连接，则需要借助Swarm或Kubernetes等编排工具。\n--link:链接容器，docker run -it --name cct3 --link=cct1:webtest bitchofgod/testnet （webtest为cct1的别名），然后在cct3中ping webtest即可互联\nDocker在父容器中的以下两个地方写入了连接信息：\n/etc/hosts文件中，--link在此文件中写入了映射信息，当docker重新启动的时候，docker会自动维护此文件中的映射 \n包含连接信息的环境变量中 \n如果拒绝所有容器互联，则修改docker配置，在/ect/default/docker文件中添加DOCKER_OPTS=\" --icc=false\"后重启docker服务即可\n如果需要特定容器互联，则通过--link、--icc=false、--iptables=true来实现\n\ndocker容器与外部网络的连接\nipforward\niptables\n\nCtrl+p，Ctrl+q退出交互界面\ndocker attach containerName重新打开交互界面\n\nCaaS(Container as a Service):镜像容器托管\n从Docker到Caas\n容器集群管理工具\n容器调度\n配置管理\n服务发现 \n日志／监控／报警\n\nLaaS（基础设施） 出租计算、存储、网络、DNS等基础IT服务\nPaaS（基础设施+系统平台—应用服务器应用框架 编程语言） 提供应用运行和开发环境 提供应用开发组件（邮件、消息、计费、支付）\nSaaS （基础设施+系统平台+软件应用）互联网Web2.0应用 企业应用（ERP/CRM等）\n\n\n通俗点讲\nSaaS：软件即服务，简单来说就是把企业想要的功能开发好成应用软件，然后直接卖给用户使用。通俗点讲就是去饭店吃饭一样，什么都是店家的。\nPaaS：平台即服务，简单来说就是云计算平台提供硬件、编程语言、开发库等帮助用户更好更快的开发软件。通俗来说就是点外卖，使用时店家的，但是餐桌是自己的。\nIaaS：基础设施即服务，简单来说就是云服务商提供企业所需要的服务器、存储、网络给企业用。通俗来说就是买菜买面，回家自己做饭。\n\n\nhttps://blog.csdn.net/weixin_38003389/article/details/84025762\n\nDocker Machine：目的是简化 Docker 的安装和远程管理,是官方提供的一个工具。 \n先创建Docker Machine机器\n\nDocker Compose：Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速在集群中部署分布式应用。\nDocker Compose允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）\nCompose 中有两个重要的概念：\n项目 ( project )：由一组关联的应用容器组成的一个完整业务单元，在 dockercompose.yml 文件中定义。\n服务 ( service )：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例\n运行 compose 项目：docker-compose up\n\nDocker Compose命令集\n管理镜像：build/pull\n管理服务：up/start/stop/kill/rm/scale\n服务状态：ps/logs/port\n一次性服务：run\n\nDocker Swarm:Docker集群管理工具，支持标准的Docker API,其主要作用是把若干台Docker主机抽象为一个整体，并且通过一个入口统一管理这些Docker主机上的各种Docker资源。\nSwarm和Kubernetes比较类似，但是更加轻，具有的功能也较kubernetes更少一些。\n\nDocker Compose 是一个在单个服务器或主机上创建多个容器的工具，而 Docker Swarm 则可以在多个服务器或主机上创建容器集群服务，对于微服务的部署，显然 Docker Swarm 会更加适合。\n\n三大主流调度框架：Swarm、Kubernetes和Mesos\n\nKubernetes：交互工具kubectl\npods：创建、调度及管理的最小单元，共存的一组容器的集合，同一pods中的容器共享pid、网络、ipc及utf命名空间和共享存储卷","source":"_posts/C#开发/2018-10-18-docker.md","raw":"---\ntitle: docker\ntags:\n  - docker\ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-18 09:38:59\ncategories: docker\npassword:\n---\n阿里云服务器购买\nhttp://www.runoob.com/docker/docker-tutorial.html\n\n\n官网：https://www.docker.com/\n中文社区：http://www.docker.org.cn/\n\nhttp://www.cnblogs.com/SzeCheng/p/6822905.html\n\nDocker是基于CS架构，系统有两个程序：docker服务端和docker客户端，是一种Linux容器管理技术 \n其中docker服务端是一个服务进程，管理着所有的容器。\ndocker客户端则扮演着docker服务端的远程控制器，可以用来控制docker的服务端进程。\n大部分情况下，docker服务端和客户端运行在一台机器上。\n\nDocker为容器引入了镜像，使得容器可以从预先定义好的模版（images）创建出来，并且这个模版还是分层的\nDocker容器通过镜像启动，是镜像的启动和执行阶段，采用写时复制（copy on write）\n\nDocker容器的能力\n1文件系统隔离：每个容器都有自己的root文件系统\n2进程隔离：每个容器都运行在自己的进程环境中\n3网络隔离：容器间的虚拟网络接口和IP地址都是分开的\n4资源隔离和分组：使用cgroups将CPU和内存之类的资源独立分配给每个Docker容器\n\ndocker Client客户端————>向docker服务器进程发起请求，如:创建、停止、销毁容器等操作\ndocker Server服务器进程—–>处理所有docker的请求，管理所有容器\ndocker Registry镜像仓库——>镜像存放的中央仓库，可看作是存放二进制的软件配置管理（scm）\n\nhttps://www.cnblogs.com/atuotuo/p/6668233.html\n\n安装：下载安装完成之后docker version查看\n\nKitematic，\n\n\nVagrant+virtualbox\nhttps://www.vagrantup.com/\nhttps://www.virtualbox.org/\nhttps://app.vagrantup.com/boxes/search\n\nmkdir centos7\nls\nvagrant init centos/7\nvagrant up\nvagrant ssh\nsudo yum update\nexit\nvagrant status\nvagrant halt\nvagrant destroy\n\nDocker Machine\ndocker-machine ls\ndocker-machine ssh demo\n\n远程登录管理deocker和本地管理远程docker\nhttps://labs.play-with-docker.com/\n\n\ndocker提供了一个开发，打包，运行app的平台，把app和底层infratructure隔离开来\n\ndocker底层技术支持,依赖于Linux内核特性Namespaces和Cgroups\nNamespaces：做隔离pid，net，ipc，mnt，uts\nControl Groups：做资源限制\nUnion file Systems：Container和image的分层\n\nnamespace，容器隔离的基础，保证A容器看不到B容器. 6个名空间：User,Mnt,Network,UTS,IPC,Pid\ncgroups，容器资源统计和隔离。主要用到的cgroups子系统：cpu,blkio,device,freezer,memory\nunionfs，典型：aufs/overlayfs，分层镜像实现的基础\n\ndocker image：是容器的基石，本身为层叠的只读文件系统，\ndocker通过联合加载技术一次加载多个文件系统，从外部看，只能看到一个文件系统，包含所有文件系统的文件和目录。bootfs-rootfs(如：ubuntu)-apache。。。，rootfs称为基础镜像\n文件和meta data的集合（root filesystem）\n分层的，并且每一层都可以添加改变删除文件，成为一个新的image\n不同的image可以共享x相同的layer\nimage本身是read-only的\nsudo docker image ls\ndocker history [imageID]\n\nimage的获取\n1. 通过Dockerfile\n2. 从Registry获取，如：docker pull ubuntu:14.04，https://hub.docker.com/\n3. 命令行的格式为：docker search 镜像名字\n\nDIY一个Base Image\n\nContainer\ndocker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。\n\n通过Image创建\n在Image Layer之上建立一个container layer（可读写）\n类比面向对象：类和实例\nImage负责app的存储和分发，Container负责运行app\ncontainer id只要能够区分出来就行，不用全部输入\ndocker container ls //运行的\ndocker container ls -a  //所有的，包括退出的和正在运行的\n\ndocker run命令有两个参数，一个是镜像名，一个是要在镜像中运行的命令。\n\ndocker run [name]   //运行container\ndocker run -it [name]   //交互式运行container\n\n命令简写\ndocker container ls -a  == docker ps -a\ndocker container rm [conatinerID] == docker rm [conatinerID]\ndocker image ls == docker images\ndocker image rm [imageID] == docker rmi [imageID]\n\ndocker container ls -aq //列出所有conatinerID\n\n构建自己的docker镜像\ndocker commit [containerName] [dockerhubID/imageNewName]\n\n通过Dockerfile创建\n1. 新建空文件夹\n2. 创建Dockerfile文件 \n~~~\nFROM [BaseImageName]    //如果没有则值为scratch\nRUN yum install -y vim\n~~~\n3. docker build -t [dockerhubID/imageNewName] .   //.表示当前目录中查找Dockerfile\n4. docker image ls查看\n\nDockerfile语法梳理及最佳实践\n1. FROM:尽量使用官方的iamge作为base image\n2. LABEL:Metadata不可少，让大家了解到image的信息，相当于image的注释\n3. RUN:为了美观，复杂的RUN请用反斜线换行，避免无用分层，合并多条命令成一行\n4. WORKDIR:设定当前工作目录，如果没有则会自动创建目录；用WORKDIR，不要用RUN cd，尽量使用绝对目录\n5. ADD和COPY：把本地文件（构建目录中的相对地址 ）添加到image里面，同时ADD添加的文件如果是压缩文件的话，会自动解压缩，大部分情况COPY优于ADD，添加远程文件／目录请使用crul或wget；目标路径需指定docker中的绝对路径\n6. ENV：设置环境变量，尽量使用ENV增加可维护性\n \n\nhttps://github.com/docker-library/\n\nMAINTAINER：指定容器的相关维护信息，维护人、邮箱等\nRUN：执行命令并创建新的Image Layer，是在容器构建时执行\nCMD：设置容器启动后默认执行的命令和参数，是在容器运行时运行的.如果docker run指定了其他命令，CMD命令被忽略；如果定义了多个CMD，只会执行最后一个；也可以只提供参数，作为ENTRYPOINT的默认参数\nENTRYPOINT：设置容器启动时运行的命令，让容器以应用程序或者服务的形式执行；不会被忽略，一定会执行；最佳实践是写一个shell脚本作为entrypoint\nEXPOSE：指定运行该镜像的容器使用的端口，但此端口并未自动打开，在使用的时候需要映射／设置端口 \nVOLUME：用来向基于镜像创建的容器，一个卷是可以存在于一个或多个容器的特定目录，这个目录可以绕过联合文件系统提供共享数据、数据持久化功能\nWORKDIR：用于在容器内部设置工作目录，一般使用绝对路径，如果使用相对路径，路径会一致传递下去\nUSER：用来指定镜像被什么用户去运行，如果不设置，默认为root用户\nONBUILD：用来为镜像添加触发器，当一个镜像被其他镜像作为基础镜像执行时，此触发器会被执行\n\n使用中间层镜像进行调试，查找错误\ndocker build命令只删除了中间层常见的容器，但是没有删除中间层创建的镜像\n\n构建缓存：构建过程中会产生缓存，下次构建直接使用缓存镜像，如果不想使用构建缓存，则可通过：docker build --no-cache,或者通过dockerfile文件的ENV REFRESH_DATE修改日期，则本条语句后就不使用缓存了\n\ndocker history 镜像，用来查看镜像的构建过程\n~~~\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh \"]\n~~~\nshell格式和EXEC格式 \n~~~ shell格式  \nRUN apt-get install -y vim\nCMD echo \"Hello Docker\"\nENTRYPOINT echo \"Hello Docker\"\n~~~\n\n~~~ exec格式\nRUN [\"apt-get\",\"install\",\"-y\",\"vim\"]\nCMD [\"/bin/echo\", \"Hello Docker\"]\nENTRYPOINT [\"/bin/echo\", \"Hello Docker\"]\n~~~\n\n登录dockerhub\ndocker login:  用户名（非邮箱）／密码\n1. 本地push上去，其他人就可以pull\n2. 关联github，github管理Dockerfile，有修改后自动build。Create-Create Automated build\n3. 通过docker的registry本地自己搭建。https://hub.docker.com/_/registry/,后期学习\n\n\nDockerfile实战\nDockerfile是docker构建镜像的基础，也是docker区别于其他容器的重要特征，正是有了Dockerfile，docker的自动化和可移植性才成为可能。\n不论是开发还是运维，学会编写Dockerfile几乎是必备的\n\n容器的操作\n//对容器执行命令\ndocker exec  \ndocker exec -it [containerID] /bin/bash\ndocker inspect [imageName] //查看\ndocker logs [containerID]\n\n\n前3章\n\n\nDocker常见命令\n容器相关操作\ndocker create # 创建一个容器但是不启动它\ndocker run # 创建并启动一个容器\ndocker stop # 停止容器运行，发送信号SIGTERM\ndocker start # 启动一个停止状态的容器\ndocker restart # 重启一个容器\ndocker rm # 删除一个容器\ndocker kill # 发送信号给容器，默认SIGKILL\ndocker attach # 连接(进入)到一个正在运行的容器\ndocker wait # 阻塞到一个容器，直到容器停止运行\n获取容器相关信息\ndocker ps # 显示状态为运行（Up）的容器\ndocker ps -a # 显示所有容器,包括运行中（Up）的和退出的(Exited)\ndocker inspect # 深入容器内部获取容器所有信息\ndocker logs # 查看容器的日志(stdout/stderr)\ndocker events # 得到docker服务器的实时的事件\ndocker port # 显示容器的端口映射\ndocker top # 显示容器的进程信息\ndocker diff # 显示容器文件系统的前后变化\n导出容器\ndocker cp # 从容器里向外拷贝文件或目录\ndocker export # 将容器整个文件系统导出为一个tar包，不带layers、tag等信息\n执行\ndocker exec # 在容器里执行一个命令，可以执行bash进入交互式\n镜像操作\ndocker images # 显示本地所有的镜像列表\ndocker import # 从一个tar包创建一个镜像，往往和export结合使用\ndocker build # 使用Dockerfile创建镜像（推荐）\ndocker commit # 从容器创建镜像\ndocker rmi # 删除一个镜像\ndocker load # 从一个tar包创建一个镜像，和save配合使用\ndocker save # 将一个镜像保存为一个tar包，带layers和tag信息\ndocker history # 显示生成一个镜像的历史命令\ndocker tag # 为镜像起一个别名\n镜像仓库(registry)操作\ndocker login # 登录到一个registry\ndocker search # 从registry仓库搜索镜像\ndocker pull # 从仓库下载镜像到本地\ndocker push # 将一个镜像push到registry仓库中  \n\n\ndocker system df    //查看镜像、容器、数据卷所占用的空间\ndocker commit -m \"ubuntu with vim\" -a \"sgy\" aa97ba3292ce sgy/ubuntu:vim\n\n\n前后端分离部署及运维\n高性能高负载高可用\n\nhttps://www.renren.io  renren-fast\n\nSwagger:\nJWT:\n\n\nhttps://www.ghostcloud.cn/\n\n\n服务器虚拟化 （vsphere  cas  ZStack不通厂家命名）：裸机虚拟化、半裸机虚拟化\n网络虚拟化 SDN\n存储虚拟化 VSAN   服务器做raid保证系统安全，然后做存储虚拟化\n\nMac 上的 Docker 背后应该是一个 Linux 虚机，和 Windows 版本的 Docker 是一样的原理\n\n容器一旦被直接推出，之前安装的gcc啊vim啊啥的就会全部gg掉。如果要保存修改，就需要将当前容器封装成一个新的镜像，这样下次启动这个新的镜像后之前作出的修改还都在。\n\n容器不适合构建那种发布周期以周或月为单位的大型单一架构企业软件，容器适合采用微服务的方式，以及探索诸如持续部署这样的技术，使得我们能安全地在一天内多次更新生产环境。\n\nhttps://blog.csdn.net/xdy3008/article/details/74531125\n\nhttps://www.missshi.cn/api/view/blog/5a6327c00a745f6335000004 \n\n\n想看到docker容器的ip地址，只需要安装net-tools就可以了：yum install net-tools -y\n\n\n\n\n\n如果你仅仅是想管理虚拟机，那么你应该使用vagrant。如果你想快速开发和部署应用，那么应该使用docker。\nvagrant是一款管理虚拟机的工具，而docker是一款通过将应用打包到轻量级容器，而实现构建和部署的工具。两者适用范围不同。一个容器就是一个包含了应用执行所依赖的数据(包括lib，配置文件等等)。它可以保证应用在一个可重复的环境中随时执行。\n\n\n\n数据卷：是经过特殊设计的目录，可以绕过联合文件系统ufs，为一个或多个容其提供访问。让你可以不受容器生命周期影响进行数据持久化。它们表现为容器内的空间，但实际保存在容器之外，从而允许你在不影响数据的情况下销毁、重建、修改、丢弃容器。\nDocker允许你定义应用部分和数据部分，并提供工具让你将他们分开。容器是短暂和一次性的。\ndocker run -v ~/container_data:/data:ro -it centos,映射本地~/container_data到容器/data下,且/data的权限为ro只读，登录进去后ls查看，发现会有data目录\n\n数据卷容器：命名的容器挂载数据卷，其他容器通过挂载这个容器实现数据共享，挂载数据卷的容器，就叫做数据卷容器。\ndocker run --volumes-from 数据卷容器名称\n即使删除了数据卷容器，挂载了数据卷容器的容器，仍然可以访问数据卷容器的目录，数据卷容器起的作用仅仅是将挂载配置传递到待挂载容器\n\nDocker数据卷的备份与还原：通过挂载目录压缩后放到挂载目录\n\nDocker For Mac的Docker Daemon是运行于虚拟机(xhyve)中的, 而不是像Linux上那样作为进程运行于宿主机，因此Docker For Mac没有docker0网桥，不能实现host网络模式，host模式会使Container复用Daemon的网络栈(在xhyve虚拟机中)，而不是与Host主机网络栈，这样虽然其它容器仍然可通过xhyve网络栈进行交互，但却不是用的Host上的端口(在Host上无法访问)。bridge网络模式 -p 参数不受此影响，它能正常打开Host上的端口并映射到Container的对应Port。\n\ndocker容器的网络连接\ndocker0：是Linux的虚拟网桥（网桥是数据链路层的一种设备），Linux的虚拟网桥可以设置IP地址，相当于拥有一个隐藏的虚拟网卡\ndocker0地址划分：IP127.17.42.1,掩码255.255.0.0,总共提供了65534个地址\n网桥操作需安装bridge-utils工具，安装之后brctl show查看网桥信息，可以添加网桥或者配置网桥信息\ndocker容器的IP地址在重启容器之后会变化，是不可靠的\n\n容器互联：在同一宿主机下，docker容器是通过虚拟网桥互相连接的，默认在同一宿主机下docker允许所有容器互联。让容器之间可以相互连接主要借用了一个link的功能。 在使用纯Docker时，被连接的容器必须在同一个Docker宿主机中。不同宿主机之间的容器如果想要连接，则需要借助Swarm或Kubernetes等编排工具。\n--link:链接容器，docker run -it --name cct3 --link=cct1:webtest bitchofgod/testnet （webtest为cct1的别名），然后在cct3中ping webtest即可互联\nDocker在父容器中的以下两个地方写入了连接信息：\n/etc/hosts文件中，--link在此文件中写入了映射信息，当docker重新启动的时候，docker会自动维护此文件中的映射 \n包含连接信息的环境变量中 \n如果拒绝所有容器互联，则修改docker配置，在/ect/default/docker文件中添加DOCKER_OPTS=\" --icc=false\"后重启docker服务即可\n如果需要特定容器互联，则通过--link、--icc=false、--iptables=true来实现\n\ndocker容器与外部网络的连接\nipforward\niptables\n\nCtrl+p，Ctrl+q退出交互界面\ndocker attach containerName重新打开交互界面\n\nCaaS(Container as a Service):镜像容器托管\n从Docker到Caas\n容器集群管理工具\n容器调度\n配置管理\n服务发现 \n日志／监控／报警\n\nLaaS（基础设施） 出租计算、存储、网络、DNS等基础IT服务\nPaaS（基础设施+系统平台—应用服务器应用框架 编程语言） 提供应用运行和开发环境 提供应用开发组件（邮件、消息、计费、支付）\nSaaS （基础设施+系统平台+软件应用）互联网Web2.0应用 企业应用（ERP/CRM等）\n\n\n通俗点讲\nSaaS：软件即服务，简单来说就是把企业想要的功能开发好成应用软件，然后直接卖给用户使用。通俗点讲就是去饭店吃饭一样，什么都是店家的。\nPaaS：平台即服务，简单来说就是云计算平台提供硬件、编程语言、开发库等帮助用户更好更快的开发软件。通俗来说就是点外卖，使用时店家的，但是餐桌是自己的。\nIaaS：基础设施即服务，简单来说就是云服务商提供企业所需要的服务器、存储、网络给企业用。通俗来说就是买菜买面，回家自己做饭。\n\n\nhttps://blog.csdn.net/weixin_38003389/article/details/84025762\n\nDocker Machine：目的是简化 Docker 的安装和远程管理,是官方提供的一个工具。 \n先创建Docker Machine机器\n\nDocker Compose：Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速在集群中部署分布式应用。\nDocker Compose允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）\nCompose 中有两个重要的概念：\n项目 ( project )：由一组关联的应用容器组成的一个完整业务单元，在 dockercompose.yml 文件中定义。\n服务 ( service )：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例\n运行 compose 项目：docker-compose up\n\nDocker Compose命令集\n管理镜像：build/pull\n管理服务：up/start/stop/kill/rm/scale\n服务状态：ps/logs/port\n一次性服务：run\n\nDocker Swarm:Docker集群管理工具，支持标准的Docker API,其主要作用是把若干台Docker主机抽象为一个整体，并且通过一个入口统一管理这些Docker主机上的各种Docker资源。\nSwarm和Kubernetes比较类似，但是更加轻，具有的功能也较kubernetes更少一些。\n\nDocker Compose 是一个在单个服务器或主机上创建多个容器的工具，而 Docker Swarm 则可以在多个服务器或主机上创建容器集群服务，对于微服务的部署，显然 Docker Swarm 会更加适合。\n\n三大主流调度框架：Swarm、Kubernetes和Mesos\n\nKubernetes：交互工具kubectl\npods：创建、调度及管理的最小单元，共存的一组容器的集合，同一pods中的容器共享pid、网络、ipc及utf命名空间和共享存储卷","slug":"C-开发-2018-10-18-docker","published":1,"updated":"2019-01-10T16:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cjs3yts0t006ock8hd0gcxwax","content":"<p>阿里云服务器购买<br>\n<a href=\"http://www.runoob.com/docker/docker-tutorial.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/docker/docker-tutorial.html</a></p>\n<p>官网：<a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener\">https://www.docker.com/</a><br>\n中文社区：<a href=\"http://www.docker.org.cn/\" target=\"_blank\" rel=\"noopener\">http://www.docker.org.cn/</a></p>\n<p><a href=\"http://www.cnblogs.com/SzeCheng/p/6822905.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/SzeCheng/p/6822905.html</a></p>\n<p>Docker是基于CS架构，系统有两个程序：docker服务端和docker客户端，是一种Linux容器管理技术<br>\n其中docker服务端是一个服务进程，管理着所有的容器。<br>\ndocker客户端则扮演着docker服务端的远程控制器，可以用来控制docker的服务端进程。<br>\n大部分情况下，docker服务端和客户端运行在一台机器上。</p>\n<p>Docker为容器引入了镜像，使得容器可以从预先定义好的模版（images）创建出来，并且这个模版还是分层的<br>\nDocker容器通过镜像启动，是镜像的启动和执行阶段，采用写时复制（copy on write）</p>\n<p>Docker容器的能力<br>\n1文件系统隔离：每个容器都有自己的root文件系统<br>\n2进程隔离：每个容器都运行在自己的进程环境中<br>\n3网络隔离：容器间的虚拟网络接口和IP地址都是分开的<br>\n4资源隔离和分组：使用cgroups将CPU和内存之类的资源独立分配给每个Docker容器</p>\n<p>docker Client客户端————&gt;向docker服务器进程发起请求，如:创建、停止、销毁容器等操作<br>\ndocker Server服务器进程—–&gt;处理所有docker的请求，管理所有容器<br>\ndocker Registry镜像仓库——&gt;镜像存放的中央仓库，可看作是存放二进制的软件配置管理（scm）</p>\n<p><a href=\"https://www.cnblogs.com/atuotuo/p/6668233.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/atuotuo/p/6668233.html</a></p>\n<p>安装：下载安装完成之后docker version查看</p>\n<p>Kitematic，</p>\n<p>Vagrant+virtualbox<br>\n<a href=\"https://www.vagrantup.com/\" target=\"_blank\" rel=\"noopener\">https://www.vagrantup.com/</a><br>\n<a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"noopener\">https://www.virtualbox.org/</a><br>\n<a href=\"https://app.vagrantup.com/boxes/search\" target=\"_blank\" rel=\"noopener\">https://app.vagrantup.com/boxes/search</a></p>\n<p>mkdir centos7<br>\nls<br>\nvagrant init centos/7<br>\nvagrant up<br>\nvagrant ssh<br>\nsudo yum update<br>\nexit<br>\nvagrant status<br>\nvagrant halt<br>\nvagrant destroy</p>\n<p>Docker Machine<br>\ndocker-machine ls<br>\ndocker-machine ssh demo</p>\n<p>远程登录管理deocker和本地管理远程docker<br>\n<a href=\"https://labs.play-with-docker.com/\" target=\"_blank\" rel=\"noopener\">https://labs.play-with-docker.com/</a></p>\n<p>docker提供了一个开发，打包，运行app的平台，把app和底层infratructure隔离开来</p>\n<p>docker底层技术支持,依赖于Linux内核特性Namespaces和Cgroups<br>\nNamespaces：做隔离pid，net，ipc，mnt，uts<br>\nControl Groups：做资源限制<br>\nUnion file Systems：Container和image的分层</p>\n<p>namespace，容器隔离的基础，保证A容器看不到B容器. 6个名空间：User,Mnt,Network,UTS,IPC,Pid<br>\ncgroups，容器资源统计和隔离。主要用到的cgroups子系统：cpu,blkio,device,freezer,memory<br>\nunionfs，典型：aufs/overlayfs，分层镜像实现的基础</p>\n<p>docker image：是容器的基石，本身为层叠的只读文件系统，<br>\ndocker通过联合加载技术一次加载多个文件系统，从外部看，只能看到一个文件系统，包含所有文件系统的文件和目录。bootfs-rootfs(如：ubuntu)-apache。。。，rootfs称为基础镜像<br>\n文件和meta data的集合（root filesystem）<br>\n分层的，并且每一层都可以添加改变删除文件，成为一个新的image<br>\n不同的image可以共享x相同的layer<br>\nimage本身是read-only的<br>\nsudo docker image ls<br>\ndocker history [imageID]</p>\n<p>image的获取</p>\n<ol>\n<li>通过Dockerfile</li>\n<li>从Registry获取，如：docker pull ubuntu:14.04，<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/</a></li>\n<li>命令行的格式为：docker search 镜像名字</li>\n</ol>\n<p>DIY一个Base Image</p>\n<p>Container<br>\ndocker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。</p>\n<p>通过Image创建<br>\n在Image Layer之上建立一个container layer（可读写）<br>\n类比面向对象：类和实例<br>\nImage负责app的存储和分发，Container负责运行app<br>\ncontainer id只要能够区分出来就行，不用全部输入<br>\ndocker container ls //运行的<br>\ndocker container ls -a  //所有的，包括退出的和正在运行的</p>\n<p>docker run命令有两个参数，一个是镜像名，一个是要在镜像中运行的命令。</p>\n<p>docker run [name]   //运行container<br>\ndocker run -it [name]   //交互式运行container</p>\n<p>命令简写<br>\ndocker container ls -a  == docker ps -a<br>\ndocker container rm [conatinerID] == docker rm [conatinerID]<br>\ndocker image ls == docker images<br>\ndocker image rm [imageID] == docker rmi [imageID]</p>\n<p>docker container ls -aq //列出所有conatinerID</p>\n<p>构建自己的docker镜像<br>\ndocker commit [containerName] [dockerhubID/imageNewName]</p>\n<p>通过Dockerfile创建</p>\n<ol>\n<li>新建空文件夹</li>\n<li>创建Dockerfile文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM [BaseImageName]    //如果没有则值为scratch</span><br><span class=\"line\">RUN yum install -y vim</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>docker build -t [dockerhubID/imageNewName] .   //.表示当前目录中查找Dockerfile</li>\n<li>docker image ls查看</li>\n</ol>\n<p>Dockerfile语法梳理及最佳实践</p>\n<ol>\n<li>FROM:尽量使用官方的iamge作为base image</li>\n<li>LABEL:Metadata不可少，让大家了解到image的信息，相当于image的注释</li>\n<li>RUN:为了美观，复杂的RUN请用反斜线换行，避免无用分层，合并多条命令成一行</li>\n<li>WORKDIR:设定当前工作目录，如果没有则会自动创建目录；用WORKDIR，不要用RUN cd，尽量使用绝对目录</li>\n<li>ADD和COPY：把本地文件（构建目录中的相对地址 ）添加到image里面，同时ADD添加的文件如果是压缩文件的话，会自动解压缩，大部分情况COPY优于ADD，添加远程文件／目录请使用crul或wget；目标路径需指定docker中的绝对路径</li>\n<li>ENV：设置环境变量，尽量使用ENV增加可维护性</li>\n</ol>\n<p><a href=\"https://github.com/docker-library/\" target=\"_blank\" rel=\"noopener\">https://github.com/docker-library/</a></p>\n<p>MAINTAINER：指定容器的相关维护信息，维护人、邮箱等<br>\nRUN：执行命令并创建新的Image Layer，是在容器构建时执行<br>\nCMD：设置容器启动后默认执行的命令和参数，是在容器运行时运行的.如果docker run指定了其他命令，CMD命令被忽略；如果定义了多个CMD，只会执行最后一个；也可以只提供参数，作为ENTRYPOINT的默认参数<br>\nENTRYPOINT：设置容器启动时运行的命令，让容器以应用程序或者服务的形式执行；不会被忽略，一定会执行；最佳实践是写一个shell脚本作为entrypoint<br>\nEXPOSE：指定运行该镜像的容器使用的端口，但此端口并未自动打开，在使用的时候需要映射／设置端口<br>\nVOLUME：用来向基于镜像创建的容器，一个卷是可以存在于一个或多个容器的特定目录，这个目录可以绕过联合文件系统提供共享数据、数据持久化功能<br>\nWORKDIR：用于在容器内部设置工作目录，一般使用绝对路径，如果使用相对路径，路径会一致传递下去<br>\nUSER：用来指定镜像被什么用户去运行，如果不设置，默认为root用户<br>\nONBUILD：用来为镜像添加触发器，当一个镜像被其他镜像作为基础镜像执行时，此触发器会被执行</p>\n<p>使用中间层镜像进行调试，查找错误<br>\ndocker build命令只删除了中间层常见的容器，但是没有删除中间层创建的镜像</p>\n<p>构建缓存：构建过程中会产生缓存，下次构建直接使用缓存镜像，如果不想使用构建缓存，则可通过：docker build --no-cache,或者通过dockerfile文件的ENV REFRESH_DATE修改日期，则本条语句后就不使用缓存了</p>\n<p>docker history 镜像，用来查看镜像的构建过程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY docker-entrypoint.sh /usr/local/bin/</span><br><span class=\"line\">ENTRYPOINT [&quot;docker-entrypoint.sh &quot;]</span><br></pre></td></tr></table></figure>\n<p>shell格式和EXEC格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN apt-get install -y vim</span><br><span class=\"line\">CMD echo &quot;Hello Docker&quot;</span><br><span class=\"line\">ENTRYPOINT echo &quot;Hello Docker&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN [&quot;apt-get&quot;,&quot;install&quot;,&quot;-y&quot;,&quot;vim&quot;]</span><br><span class=\"line\">CMD [&quot;/bin/echo&quot;, &quot;Hello Docker&quot;]</span><br><span class=\"line\">ENTRYPOINT [&quot;/bin/echo&quot;, &quot;Hello Docker&quot;]</span><br></pre></td></tr></table></figure>\n<p>登录dockerhub<br>\ndocker login:  用户名（非邮箱）／密码</p>\n<ol>\n<li>本地push上去，其他人就可以pull</li>\n<li>关联github，github管理Dockerfile，有修改后自动build。Create-Create Automated build</li>\n<li>通过docker的registry本地自己搭建。<a href=\"https://hub.docker.com/_/registry/,%E5%90%8E%E6%9C%9F%E5%AD%A6%E4%B9%A0\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/registry/,后期学习</a></li>\n</ol>\n<p>Dockerfile实战<br>\nDockerfile是docker构建镜像的基础，也是docker区别于其他容器的重要特征，正是有了Dockerfile，docker的自动化和可移植性才成为可能。<br>\n不论是开发还是运维，学会编写Dockerfile几乎是必备的</p>\n<p>容器的操作<br>\n//对容器执行命令<br>\ndocker exec<br>\ndocker exec -it [containerID] /bin/bash<br>\ndocker inspect [imageName] //查看<br>\ndocker logs [containerID]</p>\n<p>前3章</p>\n<p>Docker常见命令<br>\n容器相关操作<br>\ndocker create # 创建一个容器但是不启动它<br>\ndocker run # 创建并启动一个容器<br>\ndocker stop # 停止容器运行，发送信号SIGTERM<br>\ndocker start # 启动一个停止状态的容器<br>\ndocker restart # 重启一个容器<br>\ndocker rm # 删除一个容器<br>\ndocker kill # 发送信号给容器，默认SIGKILL<br>\ndocker attach # 连接(进入)到一个正在运行的容器<br>\ndocker wait # 阻塞到一个容器，直到容器停止运行<br>\n获取容器相关信息<br>\ndocker ps # 显示状态为运行（Up）的容器<br>\ndocker ps -a # 显示所有容器,包括运行中（Up）的和退出的(Exited)<br>\ndocker inspect # 深入容器内部获取容器所有信息<br>\ndocker logs # 查看容器的日志(stdout/stderr)<br>\ndocker events # 得到docker服务器的实时的事件<br>\ndocker port # 显示容器的端口映射<br>\ndocker top # 显示容器的进程信息<br>\ndocker diff # 显示容器文件系统的前后变化<br>\n导出容器<br>\ndocker cp # 从容器里向外拷贝文件或目录<br>\ndocker export # 将容器整个文件系统导出为一个tar包，不带layers、tag等信息<br>\n执行<br>\ndocker exec # 在容器里执行一个命令，可以执行bash进入交互式<br>\n镜像操作<br>\ndocker images # 显示本地所有的镜像列表<br>\ndocker import # 从一个tar包创建一个镜像，往往和export结合使用<br>\ndocker build # 使用Dockerfile创建镜像（推荐）<br>\ndocker commit # 从容器创建镜像<br>\ndocker rmi # 删除一个镜像<br>\ndocker load # 从一个tar包创建一个镜像，和save配合使用<br>\ndocker save # 将一个镜像保存为一个tar包，带layers和tag信息<br>\ndocker history # 显示生成一个镜像的历史命令<br>\ndocker tag # 为镜像起一个别名<br>\n镜像仓库(registry)操作<br>\ndocker login # 登录到一个registry<br>\ndocker search # 从registry仓库搜索镜像<br>\ndocker pull # 从仓库下载镜像到本地<br>\ndocker push # 将一个镜像push到registry仓库中</p>\n<p>docker system df    //查看镜像、容器、数据卷所占用的空间<br>\ndocker commit -m “ubuntu with vim” -a “sgy” aa97ba3292ce sgy/ubuntu:vim</p>\n<p>前后端分离部署及运维<br>\n高性能高负载高可用</p>\n<p><a href=\"https://www.renren.io\" target=\"_blank\" rel=\"noopener\">https://www.renren.io</a>  renren-fast</p>\n<p>Swagger:<br>\nJWT:</p>\n<p><a href=\"https://www.ghostcloud.cn/\" target=\"_blank\" rel=\"noopener\">https://www.ghostcloud.cn/</a></p>\n<p>服务器虚拟化 （vsphere  cas  ZStack不通厂家命名）：裸机虚拟化、半裸机虚拟化<br>\n网络虚拟化 SDN<br>\n存储虚拟化 VSAN   服务器做raid保证系统安全，然后做存储虚拟化</p>\n<p>Mac 上的 Docker 背后应该是一个 Linux 虚机，和 Windows 版本的 Docker 是一样的原理</p>\n<p>容器一旦被直接推出，之前安装的gcc啊vim啊啥的就会全部gg掉。如果要保存修改，就需要将当前容器封装成一个新的镜像，这样下次启动这个新的镜像后之前作出的修改还都在。</p>\n<p>容器不适合构建那种发布周期以周或月为单位的大型单一架构企业软件，容器适合采用微服务的方式，以及探索诸如持续部署这样的技术，使得我们能安全地在一天内多次更新生产环境。</p>\n<p><a href=\"https://blog.csdn.net/xdy3008/article/details/74531125\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xdy3008/article/details/74531125</a></p>\n<p><a href=\"https://www.missshi.cn/api/view/blog/5a6327c00a745f6335000004\" target=\"_blank\" rel=\"noopener\">https://www.missshi.cn/api/view/blog/5a6327c00a745f6335000004</a></p>\n<p>想看到docker容器的ip地址，只需要安装net-tools就可以了：yum install net-tools -y</p>\n<p>如果你仅仅是想管理虚拟机，那么你应该使用vagrant。如果你想快速开发和部署应用，那么应该使用docker。<br>\nvagrant是一款管理虚拟机的工具，而docker是一款通过将应用打包到轻量级容器，而实现构建和部署的工具。两者适用范围不同。一个容器就是一个包含了应用执行所依赖的数据(包括lib，配置文件等等)。它可以保证应用在一个可重复的环境中随时执行。</p>\n<p>数据卷：是经过特殊设计的目录，可以绕过联合文件系统ufs，为一个或多个容其提供访问。让你可以不受容器生命周期影响进行数据持久化。它们表现为容器内的空间，但实际保存在容器之外，从而允许你在不影响数据的情况下销毁、重建、修改、丢弃容器。<br>\nDocker允许你定义应用部分和数据部分，并提供工具让你将他们分开。容器是短暂和一次性的。<br>\ndocker run -v ~/container_data:/data:ro -it centos,映射本地~/container_data到容器/data下,且/data的权限为ro只读，登录进去后ls查看，发现会有data目录</p>\n<p>数据卷容器：命名的容器挂载数据卷，其他容器通过挂载这个容器实现数据共享，挂载数据卷的容器，就叫做数据卷容器。<br>\ndocker run --volumes-from 数据卷容器名称<br>\n即使删除了数据卷容器，挂载了数据卷容器的容器，仍然可以访问数据卷容器的目录，数据卷容器起的作用仅仅是将挂载配置传递到待挂载容器</p>\n<p>Docker数据卷的备份与还原：通过挂载目录压缩后放到挂载目录</p>\n<p>Docker For Mac的Docker Daemon是运行于虚拟机(xhyve)中的, 而不是像Linux上那样作为进程运行于宿主机，因此Docker For Mac没有docker0网桥，不能实现host网络模式，host模式会使Container复用Daemon的网络栈(在xhyve虚拟机中)，而不是与Host主机网络栈，这样虽然其它容器仍然可通过xhyve网络栈进行交互，但却不是用的Host上的端口(在Host上无法访问)。bridge网络模式 -p 参数不受此影响，它能正常打开Host上的端口并映射到Container的对应Port。</p>\n<p>docker容器的网络连接<br>\ndocker0：是Linux的虚拟网桥（网桥是数据链路层的一种设备），Linux的虚拟网桥可以设置IP地址，相当于拥有一个隐藏的虚拟网卡<br>\ndocker0地址划分：IP127.17.42.1,掩码255.255.0.0,总共提供了65534个地址<br>\n网桥操作需安装bridge-utils工具，安装之后brctl show查看网桥信息，可以添加网桥或者配置网桥信息<br>\ndocker容器的IP地址在重启容器之后会变化，是不可靠的</p>\n<p>容器互联：在同一宿主机下，docker容器是通过虚拟网桥互相连接的，默认在同一宿主机下docker允许所有容器互联。让容器之间可以相互连接主要借用了一个link的功能。 在使用纯Docker时，被连接的容器必须在同一个Docker宿主机中。不同宿主机之间的容器如果想要连接，则需要借助Swarm或Kubernetes等编排工具。<br>\n–link:链接容器，docker run -it --name cct3 --link=cct1:webtest bitchofgod/testnet （webtest为cct1的别名），然后在cct3中ping webtest即可互联<br>\nDocker在父容器中的以下两个地方写入了连接信息：<br>\n/etc/hosts文件中，–link在此文件中写入了映射信息，当docker重新启动的时候，docker会自动维护此文件中的映射<br>\n包含连接信息的环境变量中<br>\n如果拒绝所有容器互联，则修改docker配置，在/ect/default/docker文件中添加DOCKER_OPTS=&quot; --icc=false&quot;后重启docker服务即可<br>\n如果需要特定容器互联，则通过–link、–icc=false、–iptables=true来实现</p>\n<p>docker容器与外部网络的连接<br>\nipforward<br>\niptables</p>\n<p>Ctrl+p，Ctrl+q退出交互界面<br>\ndocker attach containerName重新打开交互界面</p>\n<p>CaaS(Container as a Service):镜像容器托管<br>\n从Docker到Caas<br>\n容器集群管理工具<br>\n容器调度<br>\n配置管理<br>\n服务发现<br>\n日志／监控／报警</p>\n<p>LaaS（基础设施） 出租计算、存储、网络、DNS等基础IT服务<br>\nPaaS（基础设施+系统平台—应用服务器应用框架 编程语言） 提供应用运行和开发环境 提供应用开发组件（邮件、消息、计费、支付）<br>\nSaaS （基础设施+系统平台+软件应用）互联网Web2.0应用 企业应用（ERP/CRM等）</p>\n<p>通俗点讲<br>\nSaaS：软件即服务，简单来说就是把企业想要的功能开发好成应用软件，然后直接卖给用户使用。通俗点讲就是去饭店吃饭一样，什么都是店家的。<br>\nPaaS：平台即服务，简单来说就是云计算平台提供硬件、编程语言、开发库等帮助用户更好更快的开发软件。通俗来说就是点外卖，使用时店家的，但是餐桌是自己的。<br>\nIaaS：基础设施即服务，简单来说就是云服务商提供企业所需要的服务器、存储、网络给企业用。通俗来说就是买菜买面，回家自己做饭。</p>\n<p><a href=\"https://blog.csdn.net/weixin_38003389/article/details/84025762\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_38003389/article/details/84025762</a></p>\n<p>Docker Machine：目的是简化 Docker 的安装和远程管理,是官方提供的一个工具。<br>\n先创建Docker Machine机器</p>\n<p>Docker Compose：Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速在集群中部署分布式应用。<br>\nDocker Compose允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）<br>\nCompose 中有两个重要的概念：<br>\n项目 ( project )：由一组关联的应用容器组成的一个完整业务单元，在 dockercompose.yml 文件中定义。<br>\n服务 ( service )：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例<br>\n运行 compose 项目：docker-compose up</p>\n<p>Docker Compose命令集<br>\n管理镜像：build/pull<br>\n管理服务：up/start/stop/kill/rm/scale<br>\n服务状态：ps/logs/port<br>\n一次性服务：run</p>\n<p>Docker Swarm:Docker集群管理工具，支持标准的Docker API,其主要作用是把若干台Docker主机抽象为一个整体，并且通过一个入口统一管理这些Docker主机上的各种Docker资源。<br>\nSwarm和Kubernetes比较类似，但是更加轻，具有的功能也较kubernetes更少一些。</p>\n<p>Docker Compose 是一个在单个服务器或主机上创建多个容器的工具，而 Docker Swarm 则可以在多个服务器或主机上创建容器集群服务，对于微服务的部署，显然 Docker Swarm 会更加适合。</p>\n<p>三大主流调度框架：Swarm、Kubernetes和Mesos</p>\n<p>Kubernetes：交互工具kubectl<br>\npods：创建、调度及管理的最小单元，共存的一组容器的集合，同一pods中的容器共享pid、网络、ipc及utf命名空间和共享存储卷</p>\n","site":{"data":{}},"excerpt":"","more":"<p>阿里云服务器购买<br>\n<a href=\"http://www.runoob.com/docker/docker-tutorial.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/docker/docker-tutorial.html</a></p>\n<p>官网：<a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener\">https://www.docker.com/</a><br>\n中文社区：<a href=\"http://www.docker.org.cn/\" target=\"_blank\" rel=\"noopener\">http://www.docker.org.cn/</a></p>\n<p><a href=\"http://www.cnblogs.com/SzeCheng/p/6822905.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/SzeCheng/p/6822905.html</a></p>\n<p>Docker是基于CS架构，系统有两个程序：docker服务端和docker客户端，是一种Linux容器管理技术<br>\n其中docker服务端是一个服务进程，管理着所有的容器。<br>\ndocker客户端则扮演着docker服务端的远程控制器，可以用来控制docker的服务端进程。<br>\n大部分情况下，docker服务端和客户端运行在一台机器上。</p>\n<p>Docker为容器引入了镜像，使得容器可以从预先定义好的模版（images）创建出来，并且这个模版还是分层的<br>\nDocker容器通过镜像启动，是镜像的启动和执行阶段，采用写时复制（copy on write）</p>\n<p>Docker容器的能力<br>\n1文件系统隔离：每个容器都有自己的root文件系统<br>\n2进程隔离：每个容器都运行在自己的进程环境中<br>\n3网络隔离：容器间的虚拟网络接口和IP地址都是分开的<br>\n4资源隔离和分组：使用cgroups将CPU和内存之类的资源独立分配给每个Docker容器</p>\n<p>docker Client客户端————&gt;向docker服务器进程发起请求，如:创建、停止、销毁容器等操作<br>\ndocker Server服务器进程—–&gt;处理所有docker的请求，管理所有容器<br>\ndocker Registry镜像仓库——&gt;镜像存放的中央仓库，可看作是存放二进制的软件配置管理（scm）</p>\n<p><a href=\"https://www.cnblogs.com/atuotuo/p/6668233.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/atuotuo/p/6668233.html</a></p>\n<p>安装：下载安装完成之后docker version查看</p>\n<p>Kitematic，</p>\n<p>Vagrant+virtualbox<br>\n<a href=\"https://www.vagrantup.com/\" target=\"_blank\" rel=\"noopener\">https://www.vagrantup.com/</a><br>\n<a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"noopener\">https://www.virtualbox.org/</a><br>\n<a href=\"https://app.vagrantup.com/boxes/search\" target=\"_blank\" rel=\"noopener\">https://app.vagrantup.com/boxes/search</a></p>\n<p>mkdir centos7<br>\nls<br>\nvagrant init centos/7<br>\nvagrant up<br>\nvagrant ssh<br>\nsudo yum update<br>\nexit<br>\nvagrant status<br>\nvagrant halt<br>\nvagrant destroy</p>\n<p>Docker Machine<br>\ndocker-machine ls<br>\ndocker-machine ssh demo</p>\n<p>远程登录管理deocker和本地管理远程docker<br>\n<a href=\"https://labs.play-with-docker.com/\" target=\"_blank\" rel=\"noopener\">https://labs.play-with-docker.com/</a></p>\n<p>docker提供了一个开发，打包，运行app的平台，把app和底层infratructure隔离开来</p>\n<p>docker底层技术支持,依赖于Linux内核特性Namespaces和Cgroups<br>\nNamespaces：做隔离pid，net，ipc，mnt，uts<br>\nControl Groups：做资源限制<br>\nUnion file Systems：Container和image的分层</p>\n<p>namespace，容器隔离的基础，保证A容器看不到B容器. 6个名空间：User,Mnt,Network,UTS,IPC,Pid<br>\ncgroups，容器资源统计和隔离。主要用到的cgroups子系统：cpu,blkio,device,freezer,memory<br>\nunionfs，典型：aufs/overlayfs，分层镜像实现的基础</p>\n<p>docker image：是容器的基石，本身为层叠的只读文件系统，<br>\ndocker通过联合加载技术一次加载多个文件系统，从外部看，只能看到一个文件系统，包含所有文件系统的文件和目录。bootfs-rootfs(如：ubuntu)-apache。。。，rootfs称为基础镜像<br>\n文件和meta data的集合（root filesystem）<br>\n分层的，并且每一层都可以添加改变删除文件，成为一个新的image<br>\n不同的image可以共享x相同的layer<br>\nimage本身是read-only的<br>\nsudo docker image ls<br>\ndocker history [imageID]</p>\n<p>image的获取</p>\n<ol>\n<li>通过Dockerfile</li>\n<li>从Registry获取，如：docker pull ubuntu:14.04，<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/</a></li>\n<li>命令行的格式为：docker search 镜像名字</li>\n</ol>\n<p>DIY一个Base Image</p>\n<p>Container<br>\ndocker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。</p>\n<p>通过Image创建<br>\n在Image Layer之上建立一个container layer（可读写）<br>\n类比面向对象：类和实例<br>\nImage负责app的存储和分发，Container负责运行app<br>\ncontainer id只要能够区分出来就行，不用全部输入<br>\ndocker container ls //运行的<br>\ndocker container ls -a  //所有的，包括退出的和正在运行的</p>\n<p>docker run命令有两个参数，一个是镜像名，一个是要在镜像中运行的命令。</p>\n<p>docker run [name]   //运行container<br>\ndocker run -it [name]   //交互式运行container</p>\n<p>命令简写<br>\ndocker container ls -a  == docker ps -a<br>\ndocker container rm [conatinerID] == docker rm [conatinerID]<br>\ndocker image ls == docker images<br>\ndocker image rm [imageID] == docker rmi [imageID]</p>\n<p>docker container ls -aq //列出所有conatinerID</p>\n<p>构建自己的docker镜像<br>\ndocker commit [containerName] [dockerhubID/imageNewName]</p>\n<p>通过Dockerfile创建</p>\n<ol>\n<li>新建空文件夹</li>\n<li>创建Dockerfile文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM [BaseImageName]    //如果没有则值为scratch</span><br><span class=\"line\">RUN yum install -y vim</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>docker build -t [dockerhubID/imageNewName] .   //.表示当前目录中查找Dockerfile</li>\n<li>docker image ls查看</li>\n</ol>\n<p>Dockerfile语法梳理及最佳实践</p>\n<ol>\n<li>FROM:尽量使用官方的iamge作为base image</li>\n<li>LABEL:Metadata不可少，让大家了解到image的信息，相当于image的注释</li>\n<li>RUN:为了美观，复杂的RUN请用反斜线换行，避免无用分层，合并多条命令成一行</li>\n<li>WORKDIR:设定当前工作目录，如果没有则会自动创建目录；用WORKDIR，不要用RUN cd，尽量使用绝对目录</li>\n<li>ADD和COPY：把本地文件（构建目录中的相对地址 ）添加到image里面，同时ADD添加的文件如果是压缩文件的话，会自动解压缩，大部分情况COPY优于ADD，添加远程文件／目录请使用crul或wget；目标路径需指定docker中的绝对路径</li>\n<li>ENV：设置环境变量，尽量使用ENV增加可维护性</li>\n</ol>\n<p><a href=\"https://github.com/docker-library/\" target=\"_blank\" rel=\"noopener\">https://github.com/docker-library/</a></p>\n<p>MAINTAINER：指定容器的相关维护信息，维护人、邮箱等<br>\nRUN：执行命令并创建新的Image Layer，是在容器构建时执行<br>\nCMD：设置容器启动后默认执行的命令和参数，是在容器运行时运行的.如果docker run指定了其他命令，CMD命令被忽略；如果定义了多个CMD，只会执行最后一个；也可以只提供参数，作为ENTRYPOINT的默认参数<br>\nENTRYPOINT：设置容器启动时运行的命令，让容器以应用程序或者服务的形式执行；不会被忽略，一定会执行；最佳实践是写一个shell脚本作为entrypoint<br>\nEXPOSE：指定运行该镜像的容器使用的端口，但此端口并未自动打开，在使用的时候需要映射／设置端口<br>\nVOLUME：用来向基于镜像创建的容器，一个卷是可以存在于一个或多个容器的特定目录，这个目录可以绕过联合文件系统提供共享数据、数据持久化功能<br>\nWORKDIR：用于在容器内部设置工作目录，一般使用绝对路径，如果使用相对路径，路径会一致传递下去<br>\nUSER：用来指定镜像被什么用户去运行，如果不设置，默认为root用户<br>\nONBUILD：用来为镜像添加触发器，当一个镜像被其他镜像作为基础镜像执行时，此触发器会被执行</p>\n<p>使用中间层镜像进行调试，查找错误<br>\ndocker build命令只删除了中间层常见的容器，但是没有删除中间层创建的镜像</p>\n<p>构建缓存：构建过程中会产生缓存，下次构建直接使用缓存镜像，如果不想使用构建缓存，则可通过：docker build --no-cache,或者通过dockerfile文件的ENV REFRESH_DATE修改日期，则本条语句后就不使用缓存了</p>\n<p>docker history 镜像，用来查看镜像的构建过程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY docker-entrypoint.sh /usr/local/bin/</span><br><span class=\"line\">ENTRYPOINT [&quot;docker-entrypoint.sh &quot;]</span><br></pre></td></tr></table></figure>\n<p>shell格式和EXEC格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN apt-get install -y vim</span><br><span class=\"line\">CMD echo &quot;Hello Docker&quot;</span><br><span class=\"line\">ENTRYPOINT echo &quot;Hello Docker&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN [&quot;apt-get&quot;,&quot;install&quot;,&quot;-y&quot;,&quot;vim&quot;]</span><br><span class=\"line\">CMD [&quot;/bin/echo&quot;, &quot;Hello Docker&quot;]</span><br><span class=\"line\">ENTRYPOINT [&quot;/bin/echo&quot;, &quot;Hello Docker&quot;]</span><br></pre></td></tr></table></figure>\n<p>登录dockerhub<br>\ndocker login:  用户名（非邮箱）／密码</p>\n<ol>\n<li>本地push上去，其他人就可以pull</li>\n<li>关联github，github管理Dockerfile，有修改后自动build。Create-Create Automated build</li>\n<li>通过docker的registry本地自己搭建。<a href=\"https://hub.docker.com/_/registry/,%E5%90%8E%E6%9C%9F%E5%AD%A6%E4%B9%A0\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/registry/,后期学习</a></li>\n</ol>\n<p>Dockerfile实战<br>\nDockerfile是docker构建镜像的基础，也是docker区别于其他容器的重要特征，正是有了Dockerfile，docker的自动化和可移植性才成为可能。<br>\n不论是开发还是运维，学会编写Dockerfile几乎是必备的</p>\n<p>容器的操作<br>\n//对容器执行命令<br>\ndocker exec<br>\ndocker exec -it [containerID] /bin/bash<br>\ndocker inspect [imageName] //查看<br>\ndocker logs [containerID]</p>\n<p>前3章</p>\n<p>Docker常见命令<br>\n容器相关操作<br>\ndocker create # 创建一个容器但是不启动它<br>\ndocker run # 创建并启动一个容器<br>\ndocker stop # 停止容器运行，发送信号SIGTERM<br>\ndocker start # 启动一个停止状态的容器<br>\ndocker restart # 重启一个容器<br>\ndocker rm # 删除一个容器<br>\ndocker kill # 发送信号给容器，默认SIGKILL<br>\ndocker attach # 连接(进入)到一个正在运行的容器<br>\ndocker wait # 阻塞到一个容器，直到容器停止运行<br>\n获取容器相关信息<br>\ndocker ps # 显示状态为运行（Up）的容器<br>\ndocker ps -a # 显示所有容器,包括运行中（Up）的和退出的(Exited)<br>\ndocker inspect # 深入容器内部获取容器所有信息<br>\ndocker logs # 查看容器的日志(stdout/stderr)<br>\ndocker events # 得到docker服务器的实时的事件<br>\ndocker port # 显示容器的端口映射<br>\ndocker top # 显示容器的进程信息<br>\ndocker diff # 显示容器文件系统的前后变化<br>\n导出容器<br>\ndocker cp # 从容器里向外拷贝文件或目录<br>\ndocker export # 将容器整个文件系统导出为一个tar包，不带layers、tag等信息<br>\n执行<br>\ndocker exec # 在容器里执行一个命令，可以执行bash进入交互式<br>\n镜像操作<br>\ndocker images # 显示本地所有的镜像列表<br>\ndocker import # 从一个tar包创建一个镜像，往往和export结合使用<br>\ndocker build # 使用Dockerfile创建镜像（推荐）<br>\ndocker commit # 从容器创建镜像<br>\ndocker rmi # 删除一个镜像<br>\ndocker load # 从一个tar包创建一个镜像，和save配合使用<br>\ndocker save # 将一个镜像保存为一个tar包，带layers和tag信息<br>\ndocker history # 显示生成一个镜像的历史命令<br>\ndocker tag # 为镜像起一个别名<br>\n镜像仓库(registry)操作<br>\ndocker login # 登录到一个registry<br>\ndocker search # 从registry仓库搜索镜像<br>\ndocker pull # 从仓库下载镜像到本地<br>\ndocker push # 将一个镜像push到registry仓库中</p>\n<p>docker system df    //查看镜像、容器、数据卷所占用的空间<br>\ndocker commit -m “ubuntu with vim” -a “sgy” aa97ba3292ce sgy/ubuntu:vim</p>\n<p>前后端分离部署及运维<br>\n高性能高负载高可用</p>\n<p><a href=\"https://www.renren.io\" target=\"_blank\" rel=\"noopener\">https://www.renren.io</a>  renren-fast</p>\n<p>Swagger:<br>\nJWT:</p>\n<p><a href=\"https://www.ghostcloud.cn/\" target=\"_blank\" rel=\"noopener\">https://www.ghostcloud.cn/</a></p>\n<p>服务器虚拟化 （vsphere  cas  ZStack不通厂家命名）：裸机虚拟化、半裸机虚拟化<br>\n网络虚拟化 SDN<br>\n存储虚拟化 VSAN   服务器做raid保证系统安全，然后做存储虚拟化</p>\n<p>Mac 上的 Docker 背后应该是一个 Linux 虚机，和 Windows 版本的 Docker 是一样的原理</p>\n<p>容器一旦被直接推出，之前安装的gcc啊vim啊啥的就会全部gg掉。如果要保存修改，就需要将当前容器封装成一个新的镜像，这样下次启动这个新的镜像后之前作出的修改还都在。</p>\n<p>容器不适合构建那种发布周期以周或月为单位的大型单一架构企业软件，容器适合采用微服务的方式，以及探索诸如持续部署这样的技术，使得我们能安全地在一天内多次更新生产环境。</p>\n<p><a href=\"https://blog.csdn.net/xdy3008/article/details/74531125\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xdy3008/article/details/74531125</a></p>\n<p><a href=\"https://www.missshi.cn/api/view/blog/5a6327c00a745f6335000004\" target=\"_blank\" rel=\"noopener\">https://www.missshi.cn/api/view/blog/5a6327c00a745f6335000004</a></p>\n<p>想看到docker容器的ip地址，只需要安装net-tools就可以了：yum install net-tools -y</p>\n<p>如果你仅仅是想管理虚拟机，那么你应该使用vagrant。如果你想快速开发和部署应用，那么应该使用docker。<br>\nvagrant是一款管理虚拟机的工具，而docker是一款通过将应用打包到轻量级容器，而实现构建和部署的工具。两者适用范围不同。一个容器就是一个包含了应用执行所依赖的数据(包括lib，配置文件等等)。它可以保证应用在一个可重复的环境中随时执行。</p>\n<p>数据卷：是经过特殊设计的目录，可以绕过联合文件系统ufs，为一个或多个容其提供访问。让你可以不受容器生命周期影响进行数据持久化。它们表现为容器内的空间，但实际保存在容器之外，从而允许你在不影响数据的情况下销毁、重建、修改、丢弃容器。<br>\nDocker允许你定义应用部分和数据部分，并提供工具让你将他们分开。容器是短暂和一次性的。<br>\ndocker run -v ~/container_data:/data:ro -it centos,映射本地~/container_data到容器/data下,且/data的权限为ro只读，登录进去后ls查看，发现会有data目录</p>\n<p>数据卷容器：命名的容器挂载数据卷，其他容器通过挂载这个容器实现数据共享，挂载数据卷的容器，就叫做数据卷容器。<br>\ndocker run --volumes-from 数据卷容器名称<br>\n即使删除了数据卷容器，挂载了数据卷容器的容器，仍然可以访问数据卷容器的目录，数据卷容器起的作用仅仅是将挂载配置传递到待挂载容器</p>\n<p>Docker数据卷的备份与还原：通过挂载目录压缩后放到挂载目录</p>\n<p>Docker For Mac的Docker Daemon是运行于虚拟机(xhyve)中的, 而不是像Linux上那样作为进程运行于宿主机，因此Docker For Mac没有docker0网桥，不能实现host网络模式，host模式会使Container复用Daemon的网络栈(在xhyve虚拟机中)，而不是与Host主机网络栈，这样虽然其它容器仍然可通过xhyve网络栈进行交互，但却不是用的Host上的端口(在Host上无法访问)。bridge网络模式 -p 参数不受此影响，它能正常打开Host上的端口并映射到Container的对应Port。</p>\n<p>docker容器的网络连接<br>\ndocker0：是Linux的虚拟网桥（网桥是数据链路层的一种设备），Linux的虚拟网桥可以设置IP地址，相当于拥有一个隐藏的虚拟网卡<br>\ndocker0地址划分：IP127.17.42.1,掩码255.255.0.0,总共提供了65534个地址<br>\n网桥操作需安装bridge-utils工具，安装之后brctl show查看网桥信息，可以添加网桥或者配置网桥信息<br>\ndocker容器的IP地址在重启容器之后会变化，是不可靠的</p>\n<p>容器互联：在同一宿主机下，docker容器是通过虚拟网桥互相连接的，默认在同一宿主机下docker允许所有容器互联。让容器之间可以相互连接主要借用了一个link的功能。 在使用纯Docker时，被连接的容器必须在同一个Docker宿主机中。不同宿主机之间的容器如果想要连接，则需要借助Swarm或Kubernetes等编排工具。<br>\n–link:链接容器，docker run -it --name cct3 --link=cct1:webtest bitchofgod/testnet （webtest为cct1的别名），然后在cct3中ping webtest即可互联<br>\nDocker在父容器中的以下两个地方写入了连接信息：<br>\n/etc/hosts文件中，–link在此文件中写入了映射信息，当docker重新启动的时候，docker会自动维护此文件中的映射<br>\n包含连接信息的环境变量中<br>\n如果拒绝所有容器互联，则修改docker配置，在/ect/default/docker文件中添加DOCKER_OPTS=&quot; --icc=false&quot;后重启docker服务即可<br>\n如果需要特定容器互联，则通过–link、–icc=false、–iptables=true来实现</p>\n<p>docker容器与外部网络的连接<br>\nipforward<br>\niptables</p>\n<p>Ctrl+p，Ctrl+q退出交互界面<br>\ndocker attach containerName重新打开交互界面</p>\n<p>CaaS(Container as a Service):镜像容器托管<br>\n从Docker到Caas<br>\n容器集群管理工具<br>\n容器调度<br>\n配置管理<br>\n服务发现<br>\n日志／监控／报警</p>\n<p>LaaS（基础设施） 出租计算、存储、网络、DNS等基础IT服务<br>\nPaaS（基础设施+系统平台—应用服务器应用框架 编程语言） 提供应用运行和开发环境 提供应用开发组件（邮件、消息、计费、支付）<br>\nSaaS （基础设施+系统平台+软件应用）互联网Web2.0应用 企业应用（ERP/CRM等）</p>\n<p>通俗点讲<br>\nSaaS：软件即服务，简单来说就是把企业想要的功能开发好成应用软件，然后直接卖给用户使用。通俗点讲就是去饭店吃饭一样，什么都是店家的。<br>\nPaaS：平台即服务，简单来说就是云计算平台提供硬件、编程语言、开发库等帮助用户更好更快的开发软件。通俗来说就是点外卖，使用时店家的，但是餐桌是自己的。<br>\nIaaS：基础设施即服务，简单来说就是云服务商提供企业所需要的服务器、存储、网络给企业用。通俗来说就是买菜买面，回家自己做饭。</p>\n<p><a href=\"https://blog.csdn.net/weixin_38003389/article/details/84025762\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_38003389/article/details/84025762</a></p>\n<p>Docker Machine：目的是简化 Docker 的安装和远程管理,是官方提供的一个工具。<br>\n先创建Docker Machine机器</p>\n<p>Docker Compose：Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速在集群中部署分布式应用。<br>\nDocker Compose允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）<br>\nCompose 中有两个重要的概念：<br>\n项目 ( project )：由一组关联的应用容器组成的一个完整业务单元，在 dockercompose.yml 文件中定义。<br>\n服务 ( service )：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例<br>\n运行 compose 项目：docker-compose up</p>\n<p>Docker Compose命令集<br>\n管理镜像：build/pull<br>\n管理服务：up/start/stop/kill/rm/scale<br>\n服务状态：ps/logs/port<br>\n一次性服务：run</p>\n<p>Docker Swarm:Docker集群管理工具，支持标准的Docker API,其主要作用是把若干台Docker主机抽象为一个整体，并且通过一个入口统一管理这些Docker主机上的各种Docker资源。<br>\nSwarm和Kubernetes比较类似，但是更加轻，具有的功能也较kubernetes更少一些。</p>\n<p>Docker Compose 是一个在单个服务器或主机上创建多个容器的工具，而 Docker Swarm 则可以在多个服务器或主机上创建容器集群服务，对于微服务的部署，显然 Docker Swarm 会更加适合。</p>\n<p>三大主流调度框架：Swarm、Kubernetes和Mesos</p>\n<p>Kubernetes：交互工具kubectl<br>\npods：创建、调度及管理的最小单元，共存的一组容器的集合，同一pods中的容器共享pid、网络、ipc及utf命名空间和共享存储卷</p>\n"},{"title":"Gradle3.0自动化项目构建技术","copyright":true,"comments":1,"toc":true,"date":"2018-10-02T14:10:23.000Z","password":null,"_content":"\n# Groovy快速入门\n\n领域特定语言DSL（Domain  Specific Language）：其核心思想为\"求专不求全，解决特定问题\"，\n\nGroovy： http://www.groovy-lang.org/\nGroovy：是一种基于JVM的敏捷开发语言，结合了Python、Ruby等脚本语言的许多强大特性，可以与Java完美结合，使用Java的所有库；\n1. 语法上支持动态类型，闭包等新一代语言特性\n2. 无缝继承所有Java的库（可以完全用Java写，但是不推荐）\n3. 即支持面向对象编程，也支持面向过程编程\n\n优势：一种更加敏捷的编程语言；入门非常容易，但是功能非常强大；既可以作为编程语言也可以作为脚本语言；熟练掌握Java的人会非常容易掌握Groovy\n\nGroovy开发环境搭建：\n> java平台上有各种语言的翻版，例如kotlin对c#,scala对haskell,Clojure对lisp，groovy对ruby\n\n## macOS/Linux\n1. 安装配置好JDK\n2. 下载Groovy SDK并解压到合适未知\n3. 配置bin目录到~/.bash_profile中，如添加如下内容到~/.bash_profile\n~~~\nexport PATH=$PATH:/usr/groovy-2.5.5/bin\n~~~\n4. groovy -version\n\n## InteliJ IDEA配置\n1. 确保已安装Groovy插件\n2. 配置Groovy SDK未知\n![image](/pub-images/Intelij%20Groovy.png)\n3. 编写Groovy版本HelloWorld，注意查看编译后文件\n~~~\n//Java版本\nclass Test {\n    public static void main(String[] args){\n        System.out.println(\"Hello world\");\n    }\n}\n~~~\n\n~~~\n//Groovy版本\nprint \"Hello world\"\n~~~\n\n\n# Groovy基础语法\n1. 变量\n* 变量的类型：基本类型+对象类型，Groovy中没有基本类型，所有的基本类型都会被编译器包装成对象类型，如：int->Integer\n* 变量的定义：强类型定义方式+弱类型def定义方式，Groovy中如果变量的值可以推断除其类型，则可通过def声明为弱类型，区别于java中的强类型定义方式，如：int i=1；\n* 推荐在自有使用模块使用def方式定义，如果有其他模块或其他类使用推荐强类型定义方式\n2. 字符串：String + GString\nString的使用和Java中一致，GString定义方式如下：\n* def name = 'Hello name' //不支持可扩展字符串\n* def doubleName = \"Hello doubleName\" //可扩展字符串，如：def doubleName = \"Hello doubleName and ${name}\",结果为： Hello doubleName and Hello name，此时doubleName是org.codehaus.groovy.runtime.GStringImpl的子类\n* def thupleName  = '''Hello thupleName'''  //支持多行方式\n\n无可扩展字符串时以上3种方式的String都是java.lang.String的子类，编码过程中String和GString是可以通用的，更多从方便使用角度考虑即可\n\nGroovy字符串方法介绍\n* java中String原有的方法\n* DefalutGroovyMethods\n* StringGroovyMethods：普通类型的参数+闭包类型的参数 \n~~~\ndef str = \"Groovy\"，str2 = \"Hello\",str3= \"Hello minus\"\n//字符串填充:center(),paddingLeft(),paddingRight()\nprintln str.center(8,'a')       //aGroovya\n//字符串比较：类似于数字比较；compareTo()\nprintln str > str2  //false\n//获取字符串索引:类似于数组下标；charAt()\nprintln str[0..1]   //Gr\n//减法运算:类似于数字减法；minus()\nprintln str3.minus(str2)    // minus\n//其他方法自己摸索\n~~~\n逻辑控制：单步顺序执行|if／else|switch-case|while|for，基本和Java操作一致，针对Groovy扩展介绍如下：\n~~~\n//switch-case\ndef x=1.23,result\nswitch(x){  //switch(x.class)\n    case \"name\":\n        result = \"name\"\n        break\n    case Integer:\n        result = \"Integer\"\n        break\n    case BigDecimal:\n        result = \"BigDecimal\"\n        break\n    case [1,2,3]:       //列表\n        result = \"list\"\n        break\n    case 1..10:         //范围\n        result = \"range\"    \n    default:\n        result=\"defalut\"\n}\nprintln result  //BigDecimal\n~~~\nfor循环控制\n~~~\n//对范围的for循环\ndef sum =0\nfor(i in 0..9){\n    sum += i\n}\nprintln sum //45\n//对list的for循环\nfor(i in [1,2,3,4,5]){\n    sum += i\n}\n//对map的for循环\nfor(i in [\"lili\":1,\"lucy\":2]){\n    println i.key + \":\" +i.value\n}\n~~~\n3. 闭包\n* 闭包就是一个代码块，所以需要通过{}括起来，def clouser = { println \"Hello Groovy!\"};clouser.call();clouser();  //推荐call()方式调用来区分是闭包\n* def clouser = {String name -> println \"Hello Groovy ${name}!\"};clouser.call(\"a\");clouser(\"b\");\n* 隐式参数it：def clouser = {println \"Hello Groovy ${it}!\"};clouser.call(\"a\");clouser(\"b\");\n* 闭包返回值：总是有返回值的，当闭包体没有明确返回值的时候，返回结果就是null\n* 如果最后一个参数是闭包，闭包可以写在外面   \n\n闭包的使用\n* 与基本类型的结合使用 \n~~~\nint fab1(int number){\n    int result = 1\n    1.upto(number,{num -> result *= num  })\n    return  result\n}\n\nint fab2(int number){\n    int result = 1\n    number.downto(1) {\n        num -> result *= num\n    }\n    return  result\n}\n\nint cal(int number){\n    int result = 0\n    number.times {\n        num -> result += num\n    }\n    return result\n}     \n~~~\n* 与String结合使用\n~~~\ndef str = \"the 2 and 3 is 5\"\nstr.each {String tmp -> print tmp.multiply(2)}  //tthhee  22  aanndd  33  iiss  55\nprintln str.find {String tmp -> tmp.isNumber()} //2\nprintln str.any {String tmp -> tmp.isNumber()}  //true\nprintln str.every {String tmp -> tmp.isNumber()} //false\ndef list = str.collect {it.toUpperCase()};println list.toListString()   //[T, H, E,  , 2,  , A, N, D,  , 3,  , I, S,  , 5]\n~~~\n* 与数据结构结合使用\n* 与文件等结合使用\n* 闭包进阶：闭包关键字（this，owner，delegate）+闭包委托策略\n~~~\ndef scriptClosure = {\n    println \"scriptClosure this:\"+this          //代表闭包定义处的类\n    println \"scriptClosure owner:\"+owner        //代表闭包定义处的类或对象\n    println \"scriptClosure delegate:\"+delegate  //代表任意对象，默认值为owner\n}\nscriptClosure.call()\n\n//scriptClosure this:Test@3c130745\n//scriptClosure owner:Test@3c130745\n//scriptClosure delegate:Test@3c130745\n\nclass Person{\n    def static classClosure = {\n        println \"classClosure this:\"+this\n        println \"classClosure owner:\"+owner\n        println \"classClosure delegate:\"+delegate\n    }\n\n    def static say(){\n        def methodClosure = {\n            println \"methodClosure this:\"+this\n            println \"methodClosure owner:\"+owner\n            println \"methodClosure delegate:\"+delegate\n        }\n        methodClosure.call()\n    }\n}\n\n//静态方法调用\nPerson.classClosure()\nPerson.say()\n//全部指向Person类,闭包指向离他最近的封闭类\n//classClosure this:class Person\n//classClosure owner:class Person\n//classClosure delegate:class Person\n//methodClosure this:class Person\n//methodClosure owner:class Person\n//methodClosure delegate:class Person\n\n//修改Person类中方法，取消static限定符调用\nPerson p = new Person()\np.classClosure()\np.say()\n//全部指向Person类对象，闭包指向离他最近的封闭类对象\nclassClosure this:Person@a9cd3b1\nclassClosure owner:Person@a9cd3b1\nclassClosure delegate:Person@a9cd3b1\nmethodClosure this:Person@a9cd3b1\nmethodClosure owner:Person@a9cd3b1\nmethodClosure delegate:Person@a9cd3b1\n\n//嵌套闭包\ndef outerClosure = {\n    def innerClosure = {\n        println \"innerClosure this:\"+this\n        println \"innerClosure owner:\"+owner\n        println \"innerClosure delegate:\"+delegate\n    }\n    innerClosure.call()\n}\nouterClosure.call()\n\n//innerClosure this:Test@3c130745\n//innerClosure owner:Test$_run_closure7@9353778 //指向outerClosure\n//innerClosure delegate:Test$_run_closure7@9353778\n~~~\n总结：this、owner、delegate的值在大多数情况都是一样的，在嵌套闭包中this的值和owner、delegate的值不一致，只有在给delegate赋值后owner和delegate的值才不一致\n\n闭包的委托策略\n~~~\nclass Student{\n    String name\n    def sayName = { \"My name is ${name}\"}\n    String toString(){\n        sayName.call()\n    }\n}\n\nclass Teacher{\n    String name\n}\n\ndef stu = new Student(name: \"XingFeng\")\nprintln stu.toString()\n\ndef tea = new Teacher(name: \"Lily\")\nstu.sayName.delegate = tea\nprintln stu.toString()\nstu.sayName.resolveStrategy = Closure.DELEGATE_FIRST    //先从delegate中查找name属性，没有了再从owner中查找\nprintln stu.toString()\n\n//My name is XingFeng\n//My name is XingFeng\n//My name is Lily\n~~~\n4. 数据结构\n列表的定义：def list = [1,2,3,4] 此为一个ArrayList；\n数组的定义：def list = [1,2,3,4] as int[]; int[] arr=[1,2,3]\n列表的排序：def list = [1,12,3,444]; Collections.sort(list);list.sort()\n\nmap的定义：def colors=[\"red\":1,\"blue\":2];def colors=[red:1,blue:2]\n索引map：println colors.red;println colors[\"red\"];\n添加map：colors.yellow=3 //Groovy中map可以添加不同类型的数据：colors.complex =[a:1,b:2]\n遍历map： list.each{def tmp,int index -> ...}  list.eachWithIndex{ key,value,index -> ...}\n查找map： any  find  findAll every\n分组map： groupBy{}\n排序map：sort\n\n范围Range：定义 def range = 1..10;println range[0];range.contains(10);println range.from;println range.to\nRange继承自java.util.List\n~~~\nswitch(number){\n    case 0..<60\n        ...\n}\n~~~\n5. 面向对象\n类、接口等的定义和使用\n* Groovy中默认类、方法等都是public类型\n* Groovy中无论是直接调用属性还是通过get／set方法其实质都是通过getter／setter方法调用的属性，getter／setter方法默认自动继承\n* 接口实现需实现接口的所有方法；trait中可以有默认方法实现，没有实现的方法需添加abstract关键字，实现时只需实现abstract的方法即可\n\n> 元编程（Metaprogramming）是指某类计算机程序的编写，这类计算机程序编写或者操纵其他程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作。很多情况下与手工编写全部代码相比工作效率更高。编写元程序的语言称之为元语言，被操作的语言称之为目标语言。一门语言同时也是自身的元语言的能力称之为反射\n\n> 元编程通常有两种方式起作用。一种方式是通过应用程序接口（API）来暴露运行时引擎的内部信息。另一种方法是动态执行包含编程命令的字符串。因此，“程序能编写程序”。虽然两种方法都能用，但大多数方法主要靠其中一种。\n\n![image](/pub-images/Groovy元编程.png)\n~~~\nclass Baby {\n    def invokeMethod(String name,Object args){\n        return \"the method is ${name},the args is ${args}\"\n    }\n\n    def methodMissing(String name,Object args){\n        return \"the method  ${name} is missing}\"\n    }\n}\n\ndef baby = new Baby()\nprintln baby.cry() \n~~~\n结合上图理解：Java中对象方法的调用没有上图否流程分支，在Groovy中对象方法调用有否分支调用，上例中通过注释invokeMethod、methodMissing方法查看运行效果，通过以下代码可动态添加对象属性和方法：\n~~~\nBaby.metaClass.sex = \"male\"\nBaby.metaClass.play = { ... }\nBaby.metaClass.static.play = { ... }    //静态方法\n~~~\n通过ExpandoMetaClass.enableGlobally()设置让动态添加方法全局启用\n\n6. Json操作\n* 对象转换成JSON字符串：JsonOutput.toJson()\n* Json格式化打印：JsonOutput.prettyPrint(jsonObject)\n* Json字符串转对象：def jsonSlurper = new JsonSlurper();jsonSlurper.parse()\n\n7. xml操作\n* Java对xml的处理：DOM文档驱动处理方式+SAX事件驱动处理方式\n* Groovy解析xml数据：def xmlSlurper = new XmlSlurper();def response = xmlSlurper.parse(xml); ／／response对象可以逐级访问节点，节点的属性添加@符号，如：response.books.@id，也可以通过闭包过滤信息\n* Groovy深度遍历xml：可以通过逐级遍历解析后的response数据，也可通过response.depFirst().find{ ...}遍历或 response.'**'.find{ ...}遍历（'**'代表深度遍历）\n* Groovy深度遍历xml：response.books.children().find{...}或response.books.'*'.find{...}（'*'代表深度遍历）\n* Groovy创建xml数据：\n~~~\n'''\n<langs type='current' count='3'>\n    <language flavor='static' version='1.5' />\n    <language flavor='public' version='2.5' />\n</langs>\n'''\n\ndef sw = new StringWriter()\ndef xmlBuilder = new MarkupBuilder(sw)\nxmlBuilder.langs(type:'current',count:3){\n    language(flavor:'static',version:'1.5')\n    language(flavor:'public',version:'2.5')\n}\nprintln sw\n\ndef langs = new Langs()\nxmlBuilder.langs(type:langs.type,count:langs.count){\n     langs.languages.each {\n         language(flavor:it.flavor,version:it.version)\n     }\n}\nprintln sw\n~~~\n\n8. 文件操作\n* Java文件处理：节点流（InputStream、OutputStream及其子类）+处理流（Reader、Writer及其子类），所有Java对文件的操作Groovy都支持\n* 遍历文件内容：def file = new File(\"Test.iml\");file.eachLine { println it } 或 def text = file.getText() 或 def text = file.readLines() ...\n\n# gradle\nGradle是一款最新的，功能强大的构建工具，使用程序代替传统的xml配置，项目构建更加灵活，有丰富的第三方库\n\ngradle组成：groovy核心语法+build script block+gradle api\n\n## gradle生命周期\n执行./gradlew clean 观察执行过程，其生命周期包括：初始化、配置、执行\n![image](/pub-images/gradle生命周期.png)\n\n## gradle生命周期的监听\n在项目的build.gradle中添加如下\n~~~\n//在配置阶段开始之前的回调\nthis.beforeEvaluate {}\n\n//配置阶段完成以后的回调\nthis.afterEvaluate {}\n\n//gradle生命周期执行完以后的回调\nthis.gradle.buildFinished {}\n~~~\n\n# Gradle Project\n./gradlew projects //查看工程Project数量，学会区分Project与module及根Project与子Project，每个Project必须有一个build.gradle文件\n\nProject API组成：\n1. Project相关API：如何管理父Project及如何操作子Project\n* this.getAllProjects()，this.getSubProjects(),this.getParent()，在gradl文件中，对应allprojects、project、subprojects进行操作\n\n./gradlew projects可实现显示所有项目，自我实现如下：\n~~~\ndef getProjects(){\n    println \"------------------------\"\n    this.getAllprojects().eachWithIndex{ Project project, int index ->\n        if(index == 0){\n            println \"Root project:${project.name}\"\n        }else{\n            println \"+--- project:${project.name}\"\n        }\n    }\n}\n\nthis.getProjects()\n\n//------------------------\n//Root project:MyApplication\n//+--- project:app\n~~~\n2. task相关API\n\n3. 属性相关API\n* 父Project的属性在子项目中会被继承，可直接使用\n* 可以在项目中通过common.gradle文件来定义扩展属性ext，然后在根Project中通过apply from:this.file('common.gradle')引入后，按rootProject.ext.定义属性的方式使用\n* 在gradle.properties中定义key-value属性，如：isLoadTest=false，然后在settings.gradle中就可以编码控制是否加载Test项目\n~~~\nif(hasProperty('isLoadTest')? isLoadTest.toBoolean() : false){\n    include ':Test'\n}\n~~~\n自定义属性的两种方式：ext方式+gradle.properties中定义\n4. file相关API\n* 路径获取API：getRootdir()、getBuildDir()、getProjectDir()\n* 文件操作相关API：都是基于根工程操作的，不支持跨工程操作\n~~~\n//文件／文件夹拷贝\ncopy {\n   from file('test.txt')\n   into getRootProject().getBuildDir()\n}\n//文件树遍历\nfileTree('build/'){\n    FileTree fileTree -> fileTree.visit{ FileTreeElement element -> ... }\n}\n~~~\n5. gradle生命周期API\n\n6. 其他API\n* 依赖相关API\n~~~\nbuildscript {\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.2.1' \n    }\n}\n//等价于以下操作：\nbuildscript { ScriptHandler scriptHandler ->\n    scriptHandler.repositories {  RepositoryHandler repositoryHandler ->\n        repositoryHandler.google()\n        repositoryHandler.jcenter()\n    }\n    scriptHandler.dependencies {\n        classpath 'com.android.tools.build:gradle:3.2.1'\n    }\n}\n~~~\n依赖传递：A模块依赖B模块，B模块依赖C模块，如果A模块也需要C模块功能，不需依赖使用，防止B修改后去掉C依赖而导致错误，可在A中引入C模块，通过exclude排除依赖，transitive禁止依赖传递\n\n占位编译provided：A.类库只在编译阶段起作用 B.父项目已引入类库，子项目直接使用父项目类库，但为了子项目编译通过使用占位编译\n\n* 外部命令执行\n~~~\ntask abc() {\n    doLast{\n        def command = 'ls'\n        exec{\n            try{\n                executable 'bash'\n                args '-c',command\n                println 'command is execute success.'\n            }catch(GradleException ex){\n                println \"Excepiotn....\"\n            }\n        }\n    }\n}\n~~~\n执行：./gradlew abc\n\n# Task\n1. Task定义及配置\n直接通过task函数去创建\n~~~\ntask(\"abcd\") {\n    doLast{\n        def command = 'ls -al'\n        exec{\n            try{\n                executable 'bash'\n                args '-c',command\n                println 'command is execute success.'\n            }catch(GradleException ex){\n                println \"Excepiotn....\"\n            }\n        }\n    }\n}\n~~~\n通过TaskContainer创建\n~~~\nthis.tasks.create(\"aa\"){\n    println 'Hello task'\n}\n~~~\nTask创建之后可在开发工具的gradle插件重查找到task，如果没有设置group，则默认在other分组中，更多配置可通过task源码查看\n2. Task执行详解\ndoFirst/doLast执行阶段执行，否则在配置阶段执行\n~~~\ntask aa{\n    doFirst{\n        println 'Hello  2'\n    }\n}\ntask.doFirst{\n    println 'Hello  1'\n}\n\n//Hello  1\n//Hello  2\n~~~\n\n编写一个统计build时长的task\napp.gradle中编写：\n~~~\ndef startBuilderTime,endBuilderTime\nthis.afterEvaluate { Project project ->\n    def preBuildTask = this.tasks.getByName(\"preBuild\")\n    preBuildTask.doFirst {\n        startBuilderTime = System.currentTimeMillis()\n        println '------开始计时...'\n    }\n    def buildTask = this.tasks.getByName(\"build\")\n    buildTask.doLast {\n        endBuilderTime = System.currentTimeMillis()\n        println '------计时结束,耗时：'+(endBuilderTime - startBuilderTime)\n    }\n}\n~~~\n./gradlew build执行查看结果\n3. Task的依赖及执行顺序\n* dependsOn强依赖方式\n~~~\ntask t1() { doLast{println 'task t1'} }\ntask t2() << { println 'task t2' }      //此处\"<<\"等同于doLast\ntask t3(dependsOn:[t1,t2]) { doLast{println 'task t3'} }\ntask t4() { dependsOn this.tasks.findAll { task -> return task.name.equals(\"t2\")};doLast{println 'task t4'} }\n\n//./gradlew t3: (t1和t2执行顺序是随机的)\n//task t1\n//task t2\n//task t3\n\n//./gradlew t4\n//task t2\n//task t4\n~~~\n* 通过Task输入输出指定\nTaskInputs:参数为任意对象及文件、文件夹；TaskOutputs:只输出文件\n\n~~~\next{\n    println '------配置中...'\n    versionCode = 100\n    versionName = \"V2.0.0\"\n    versionInfo = \"第一个版本\"\n    destFile = file(\"release.xml\")\n    if(destFile != null && !destFile.exists()){\n        destFile.createNewFile()\n    }\n}\n\nclass VersionMsg{\n    Integer versionCode\n    String versionName\n    String versionInfo\n}\n\ntask writerTask{\n    //为task指定输入\n    inputs.property(\"versionCode\",this.versionCode)\n    inputs.property(\"versionName\",this.versionName)\n    inputs.property(\"versionInfo\",this.versionInfo)\n    //为task指定输出\n    outputs.file destFile\n\n    doLast{\n        def data = inputs.getProperties()\n        File file = outputs.getFiles().getSingleFile()\n        def versionMsg = new VersionMsg(data)\n        def sw = new StringWriter()\n        def xmlBuilder = new groovy.xml.MarkupBuilder(sw)\n        if(file.text != null && file.text.size() <=0){\n            xmlBuilder.releases{\n                release{\n                    versionCode(versionMsg.versionCode)\n                    versionName(versionMsg.versionName)\n                    versionInfo(versionMsg.versionInfo)\n                }\n            }\n            file.withWriter { writer ->\n                writer.append(sw.toString())\n            }\n        }else{\n            def lines = file.readLines()\n            def lengths = lines.size() - 1\n            file.withWriter { writer ->\n                lines.eachWithIndex{ String line, int index ->\n                    if(index != lengths){\n                        writer.append(line +\"\\r\\n\")\n                    }else if(index == lengths){\n                        writer.append(\"\\r\\n\" + sw.toString()+\"\\r\\n\")\n                        writer.append(lines.get(lengths))\n                    }\n                }\n            }\n\n        }\n    }\n}\n\ntask readTask{\n    inputs.file destFile\n    doLast{\n        def file = inputs.files.singleFile\n        println file.text\n    }\n}\n\ntask taskTest{\n    dependsOn readTask,writerTask\n    doLast{\n        println \"输入输出任务结束\"\n    }\n}\n~~~\ndestFile作为writerTask输出结果输入到readTask\n* 通过API指定执行顺序：mustRunAfter／shouldRunAfter\n~~~\ntask t1() { doLast{println 'task t1'} }\ntask t2() { mustRunAfter t1 doLast {println 'task t2'} }\n~~~\n通过./gradlew t2 t1查看执行结果\n4. Task类型\n详见官方文档：https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Delete.html#org.gradle.api.tasks.Delete\n5. 构建到生命周期\n~~~\nthis.project.afterEvaluate {project ->\n    println \"开始挂接...\"\n    def buildTask = project.tasks.getByName(\"build\")\n    if(buildTask == null) throw GradleException(\"build Task not found\")\n    buildTask.doLast {\n        writerTask.execute()\n    }\n}\n~~~\n\n# Gradle其他模块\n1. Settings类：对应Settings.gradle\n~~~\nif(hasProperty('isLoadTest')? isLoadTest.toBoolean() : false){\n    include ':Test'\n}\n~~~\n2. SourceSet类:AndroidSourceSet/JavaSourceSet,决定了代码、资源、第三方库要存放的位置\n~~~\n//修改.so等jnilibs的存放位置\nandroid{\n    sourceSets {\n        main{\n            jniLibs.srcDirs = ['libs']\n            res.srcDirs = ['src/main/res','src/main/res-ad']    //对res文件夹内容进行分类，但是只能在Project视图查看到效果\n        }\n    }\n}\n~~~\n3. Gradle的Plugin\n* Gradle没有提供创建自定义Gradle插件工程的模板，需要开发者手动创建Gradle插件工程\n* 使用Groovy开发，其Gradle插件工程必须遵循如下的目录结构：\n groovy代码必须位于xxxProject/src/main/groovy/目录下\n提供插件属性声明文件，该文件必须位于xxxProject/src/main/resources/META-INF/gradle-plugins/xxx.properties\n\n\n4. android插件对gradle的扩展\nandroid具体能配置那些属性，可查看源码通过BaseExtension查看\n\ngradle插件： https://avatarqing.gitbooks.io/gradlepluginuserguidechineseverision/content/introduction/README.html\n\nvarints变体\n\n\n\n\n\n\n","source":"_posts/android/Gradle3.0自动化项目构建技术.md","raw":"---\ntitle: Gradle3.0自动化项目构建技术\ntags: \n  - andrioid \ncopyright: true\ncomments: true\ntoc: true\ndate: 2018-10-02 22:10:23\ncategories:  \npassword:\n---\n\n# Groovy快速入门\n\n领域特定语言DSL（Domain  Specific Language）：其核心思想为\"求专不求全，解决特定问题\"，\n\nGroovy： http://www.groovy-lang.org/\nGroovy：是一种基于JVM的敏捷开发语言，结合了Python、Ruby等脚本语言的许多强大特性，可以与Java完美结合，使用Java的所有库；\n1. 语法上支持动态类型，闭包等新一代语言特性\n2. 无缝继承所有Java的库（可以完全用Java写，但是不推荐）\n3. 即支持面向对象编程，也支持面向过程编程\n\n优势：一种更加敏捷的编程语言；入门非常容易，但是功能非常强大；既可以作为编程语言也可以作为脚本语言；熟练掌握Java的人会非常容易掌握Groovy\n\nGroovy开发环境搭建：\n> java平台上有各种语言的翻版，例如kotlin对c#,scala对haskell,Clojure对lisp，groovy对ruby\n\n## macOS/Linux\n1. 安装配置好JDK\n2. 下载Groovy SDK并解压到合适未知\n3. 配置bin目录到~/.bash_profile中，如添加如下内容到~/.bash_profile\n~~~\nexport PATH=$PATH:/usr/groovy-2.5.5/bin\n~~~\n4. groovy -version\n\n## InteliJ IDEA配置\n1. 确保已安装Groovy插件\n2. 配置Groovy SDK未知\n![image](/pub-images/Intelij%20Groovy.png)\n3. 编写Groovy版本HelloWorld，注意查看编译后文件\n~~~\n//Java版本\nclass Test {\n    public static void main(String[] args){\n        System.out.println(\"Hello world\");\n    }\n}\n~~~\n\n~~~\n//Groovy版本\nprint \"Hello world\"\n~~~\n\n\n# Groovy基础语法\n1. 变量\n* 变量的类型：基本类型+对象类型，Groovy中没有基本类型，所有的基本类型都会被编译器包装成对象类型，如：int->Integer\n* 变量的定义：强类型定义方式+弱类型def定义方式，Groovy中如果变量的值可以推断除其类型，则可通过def声明为弱类型，区别于java中的强类型定义方式，如：int i=1；\n* 推荐在自有使用模块使用def方式定义，如果有其他模块或其他类使用推荐强类型定义方式\n2. 字符串：String + GString\nString的使用和Java中一致，GString定义方式如下：\n* def name = 'Hello name' //不支持可扩展字符串\n* def doubleName = \"Hello doubleName\" //可扩展字符串，如：def doubleName = \"Hello doubleName and ${name}\",结果为： Hello doubleName and Hello name，此时doubleName是org.codehaus.groovy.runtime.GStringImpl的子类\n* def thupleName  = '''Hello thupleName'''  //支持多行方式\n\n无可扩展字符串时以上3种方式的String都是java.lang.String的子类，编码过程中String和GString是可以通用的，更多从方便使用角度考虑即可\n\nGroovy字符串方法介绍\n* java中String原有的方法\n* DefalutGroovyMethods\n* StringGroovyMethods：普通类型的参数+闭包类型的参数 \n~~~\ndef str = \"Groovy\"，str2 = \"Hello\",str3= \"Hello minus\"\n//字符串填充:center(),paddingLeft(),paddingRight()\nprintln str.center(8,'a')       //aGroovya\n//字符串比较：类似于数字比较；compareTo()\nprintln str > str2  //false\n//获取字符串索引:类似于数组下标；charAt()\nprintln str[0..1]   //Gr\n//减法运算:类似于数字减法；minus()\nprintln str3.minus(str2)    // minus\n//其他方法自己摸索\n~~~\n逻辑控制：单步顺序执行|if／else|switch-case|while|for，基本和Java操作一致，针对Groovy扩展介绍如下：\n~~~\n//switch-case\ndef x=1.23,result\nswitch(x){  //switch(x.class)\n    case \"name\":\n        result = \"name\"\n        break\n    case Integer:\n        result = \"Integer\"\n        break\n    case BigDecimal:\n        result = \"BigDecimal\"\n        break\n    case [1,2,3]:       //列表\n        result = \"list\"\n        break\n    case 1..10:         //范围\n        result = \"range\"    \n    default:\n        result=\"defalut\"\n}\nprintln result  //BigDecimal\n~~~\nfor循环控制\n~~~\n//对范围的for循环\ndef sum =0\nfor(i in 0..9){\n    sum += i\n}\nprintln sum //45\n//对list的for循环\nfor(i in [1,2,3,4,5]){\n    sum += i\n}\n//对map的for循环\nfor(i in [\"lili\":1,\"lucy\":2]){\n    println i.key + \":\" +i.value\n}\n~~~\n3. 闭包\n* 闭包就是一个代码块，所以需要通过{}括起来，def clouser = { println \"Hello Groovy!\"};clouser.call();clouser();  //推荐call()方式调用来区分是闭包\n* def clouser = {String name -> println \"Hello Groovy ${name}!\"};clouser.call(\"a\");clouser(\"b\");\n* 隐式参数it：def clouser = {println \"Hello Groovy ${it}!\"};clouser.call(\"a\");clouser(\"b\");\n* 闭包返回值：总是有返回值的，当闭包体没有明确返回值的时候，返回结果就是null\n* 如果最后一个参数是闭包，闭包可以写在外面   \n\n闭包的使用\n* 与基本类型的结合使用 \n~~~\nint fab1(int number){\n    int result = 1\n    1.upto(number,{num -> result *= num  })\n    return  result\n}\n\nint fab2(int number){\n    int result = 1\n    number.downto(1) {\n        num -> result *= num\n    }\n    return  result\n}\n\nint cal(int number){\n    int result = 0\n    number.times {\n        num -> result += num\n    }\n    return result\n}     \n~~~\n* 与String结合使用\n~~~\ndef str = \"the 2 and 3 is 5\"\nstr.each {String tmp -> print tmp.multiply(2)}  //tthhee  22  aanndd  33  iiss  55\nprintln str.find {String tmp -> tmp.isNumber()} //2\nprintln str.any {String tmp -> tmp.isNumber()}  //true\nprintln str.every {String tmp -> tmp.isNumber()} //false\ndef list = str.collect {it.toUpperCase()};println list.toListString()   //[T, H, E,  , 2,  , A, N, D,  , 3,  , I, S,  , 5]\n~~~\n* 与数据结构结合使用\n* 与文件等结合使用\n* 闭包进阶：闭包关键字（this，owner，delegate）+闭包委托策略\n~~~\ndef scriptClosure = {\n    println \"scriptClosure this:\"+this          //代表闭包定义处的类\n    println \"scriptClosure owner:\"+owner        //代表闭包定义处的类或对象\n    println \"scriptClosure delegate:\"+delegate  //代表任意对象，默认值为owner\n}\nscriptClosure.call()\n\n//scriptClosure this:Test@3c130745\n//scriptClosure owner:Test@3c130745\n//scriptClosure delegate:Test@3c130745\n\nclass Person{\n    def static classClosure = {\n        println \"classClosure this:\"+this\n        println \"classClosure owner:\"+owner\n        println \"classClosure delegate:\"+delegate\n    }\n\n    def static say(){\n        def methodClosure = {\n            println \"methodClosure this:\"+this\n            println \"methodClosure owner:\"+owner\n            println \"methodClosure delegate:\"+delegate\n        }\n        methodClosure.call()\n    }\n}\n\n//静态方法调用\nPerson.classClosure()\nPerson.say()\n//全部指向Person类,闭包指向离他最近的封闭类\n//classClosure this:class Person\n//classClosure owner:class Person\n//classClosure delegate:class Person\n//methodClosure this:class Person\n//methodClosure owner:class Person\n//methodClosure delegate:class Person\n\n//修改Person类中方法，取消static限定符调用\nPerson p = new Person()\np.classClosure()\np.say()\n//全部指向Person类对象，闭包指向离他最近的封闭类对象\nclassClosure this:Person@a9cd3b1\nclassClosure owner:Person@a9cd3b1\nclassClosure delegate:Person@a9cd3b1\nmethodClosure this:Person@a9cd3b1\nmethodClosure owner:Person@a9cd3b1\nmethodClosure delegate:Person@a9cd3b1\n\n//嵌套闭包\ndef outerClosure = {\n    def innerClosure = {\n        println \"innerClosure this:\"+this\n        println \"innerClosure owner:\"+owner\n        println \"innerClosure delegate:\"+delegate\n    }\n    innerClosure.call()\n}\nouterClosure.call()\n\n//innerClosure this:Test@3c130745\n//innerClosure owner:Test$_run_closure7@9353778 //指向outerClosure\n//innerClosure delegate:Test$_run_closure7@9353778\n~~~\n总结：this、owner、delegate的值在大多数情况都是一样的，在嵌套闭包中this的值和owner、delegate的值不一致，只有在给delegate赋值后owner和delegate的值才不一致\n\n闭包的委托策略\n~~~\nclass Student{\n    String name\n    def sayName = { \"My name is ${name}\"}\n    String toString(){\n        sayName.call()\n    }\n}\n\nclass Teacher{\n    String name\n}\n\ndef stu = new Student(name: \"XingFeng\")\nprintln stu.toString()\n\ndef tea = new Teacher(name: \"Lily\")\nstu.sayName.delegate = tea\nprintln stu.toString()\nstu.sayName.resolveStrategy = Closure.DELEGATE_FIRST    //先从delegate中查找name属性，没有了再从owner中查找\nprintln stu.toString()\n\n//My name is XingFeng\n//My name is XingFeng\n//My name is Lily\n~~~\n4. 数据结构\n列表的定义：def list = [1,2,3,4] 此为一个ArrayList；\n数组的定义：def list = [1,2,3,4] as int[]; int[] arr=[1,2,3]\n列表的排序：def list = [1,12,3,444]; Collections.sort(list);list.sort()\n\nmap的定义：def colors=[\"red\":1,\"blue\":2];def colors=[red:1,blue:2]\n索引map：println colors.red;println colors[\"red\"];\n添加map：colors.yellow=3 //Groovy中map可以添加不同类型的数据：colors.complex =[a:1,b:2]\n遍历map： list.each{def tmp,int index -> ...}  list.eachWithIndex{ key,value,index -> ...}\n查找map： any  find  findAll every\n分组map： groupBy{}\n排序map：sort\n\n范围Range：定义 def range = 1..10;println range[0];range.contains(10);println range.from;println range.to\nRange继承自java.util.List\n~~~\nswitch(number){\n    case 0..<60\n        ...\n}\n~~~\n5. 面向对象\n类、接口等的定义和使用\n* Groovy中默认类、方法等都是public类型\n* Groovy中无论是直接调用属性还是通过get／set方法其实质都是通过getter／setter方法调用的属性，getter／setter方法默认自动继承\n* 接口实现需实现接口的所有方法；trait中可以有默认方法实现，没有实现的方法需添加abstract关键字，实现时只需实现abstract的方法即可\n\n> 元编程（Metaprogramming）是指某类计算机程序的编写，这类计算机程序编写或者操纵其他程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作。很多情况下与手工编写全部代码相比工作效率更高。编写元程序的语言称之为元语言，被操作的语言称之为目标语言。一门语言同时也是自身的元语言的能力称之为反射\n\n> 元编程通常有两种方式起作用。一种方式是通过应用程序接口（API）来暴露运行时引擎的内部信息。另一种方法是动态执行包含编程命令的字符串。因此，“程序能编写程序”。虽然两种方法都能用，但大多数方法主要靠其中一种。\n\n![image](/pub-images/Groovy元编程.png)\n~~~\nclass Baby {\n    def invokeMethod(String name,Object args){\n        return \"the method is ${name},the args is ${args}\"\n    }\n\n    def methodMissing(String name,Object args){\n        return \"the method  ${name} is missing}\"\n    }\n}\n\ndef baby = new Baby()\nprintln baby.cry() \n~~~\n结合上图理解：Java中对象方法的调用没有上图否流程分支，在Groovy中对象方法调用有否分支调用，上例中通过注释invokeMethod、methodMissing方法查看运行效果，通过以下代码可动态添加对象属性和方法：\n~~~\nBaby.metaClass.sex = \"male\"\nBaby.metaClass.play = { ... }\nBaby.metaClass.static.play = { ... }    //静态方法\n~~~\n通过ExpandoMetaClass.enableGlobally()设置让动态添加方法全局启用\n\n6. Json操作\n* 对象转换成JSON字符串：JsonOutput.toJson()\n* Json格式化打印：JsonOutput.prettyPrint(jsonObject)\n* Json字符串转对象：def jsonSlurper = new JsonSlurper();jsonSlurper.parse()\n\n7. xml操作\n* Java对xml的处理：DOM文档驱动处理方式+SAX事件驱动处理方式\n* Groovy解析xml数据：def xmlSlurper = new XmlSlurper();def response = xmlSlurper.parse(xml); ／／response对象可以逐级访问节点，节点的属性添加@符号，如：response.books.@id，也可以通过闭包过滤信息\n* Groovy深度遍历xml：可以通过逐级遍历解析后的response数据，也可通过response.depFirst().find{ ...}遍历或 response.'**'.find{ ...}遍历（'**'代表深度遍历）\n* Groovy深度遍历xml：response.books.children().find{...}或response.books.'*'.find{...}（'*'代表深度遍历）\n* Groovy创建xml数据：\n~~~\n'''\n<langs type='current' count='3'>\n    <language flavor='static' version='1.5' />\n    <language flavor='public' version='2.5' />\n</langs>\n'''\n\ndef sw = new StringWriter()\ndef xmlBuilder = new MarkupBuilder(sw)\nxmlBuilder.langs(type:'current',count:3){\n    language(flavor:'static',version:'1.5')\n    language(flavor:'public',version:'2.5')\n}\nprintln sw\n\ndef langs = new Langs()\nxmlBuilder.langs(type:langs.type,count:langs.count){\n     langs.languages.each {\n         language(flavor:it.flavor,version:it.version)\n     }\n}\nprintln sw\n~~~\n\n8. 文件操作\n* Java文件处理：节点流（InputStream、OutputStream及其子类）+处理流（Reader、Writer及其子类），所有Java对文件的操作Groovy都支持\n* 遍历文件内容：def file = new File(\"Test.iml\");file.eachLine { println it } 或 def text = file.getText() 或 def text = file.readLines() ...\n\n# gradle\nGradle是一款最新的，功能强大的构建工具，使用程序代替传统的xml配置，项目构建更加灵活，有丰富的第三方库\n\ngradle组成：groovy核心语法+build script block+gradle api\n\n## gradle生命周期\n执行./gradlew clean 观察执行过程，其生命周期包括：初始化、配置、执行\n![image](/pub-images/gradle生命周期.png)\n\n## gradle生命周期的监听\n在项目的build.gradle中添加如下\n~~~\n//在配置阶段开始之前的回调\nthis.beforeEvaluate {}\n\n//配置阶段完成以后的回调\nthis.afterEvaluate {}\n\n//gradle生命周期执行完以后的回调\nthis.gradle.buildFinished {}\n~~~\n\n# Gradle Project\n./gradlew projects //查看工程Project数量，学会区分Project与module及根Project与子Project，每个Project必须有一个build.gradle文件\n\nProject API组成：\n1. Project相关API：如何管理父Project及如何操作子Project\n* this.getAllProjects()，this.getSubProjects(),this.getParent()，在gradl文件中，对应allprojects、project、subprojects进行操作\n\n./gradlew projects可实现显示所有项目，自我实现如下：\n~~~\ndef getProjects(){\n    println \"------------------------\"\n    this.getAllprojects().eachWithIndex{ Project project, int index ->\n        if(index == 0){\n            println \"Root project:${project.name}\"\n        }else{\n            println \"+--- project:${project.name}\"\n        }\n    }\n}\n\nthis.getProjects()\n\n//------------------------\n//Root project:MyApplication\n//+--- project:app\n~~~\n2. task相关API\n\n3. 属性相关API\n* 父Project的属性在子项目中会被继承，可直接使用\n* 可以在项目中通过common.gradle文件来定义扩展属性ext，然后在根Project中通过apply from:this.file('common.gradle')引入后，按rootProject.ext.定义属性的方式使用\n* 在gradle.properties中定义key-value属性，如：isLoadTest=false，然后在settings.gradle中就可以编码控制是否加载Test项目\n~~~\nif(hasProperty('isLoadTest')? isLoadTest.toBoolean() : false){\n    include ':Test'\n}\n~~~\n自定义属性的两种方式：ext方式+gradle.properties中定义\n4. file相关API\n* 路径获取API：getRootdir()、getBuildDir()、getProjectDir()\n* 文件操作相关API：都是基于根工程操作的，不支持跨工程操作\n~~~\n//文件／文件夹拷贝\ncopy {\n   from file('test.txt')\n   into getRootProject().getBuildDir()\n}\n//文件树遍历\nfileTree('build/'){\n    FileTree fileTree -> fileTree.visit{ FileTreeElement element -> ... }\n}\n~~~\n5. gradle生命周期API\n\n6. 其他API\n* 依赖相关API\n~~~\nbuildscript {\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.2.1' \n    }\n}\n//等价于以下操作：\nbuildscript { ScriptHandler scriptHandler ->\n    scriptHandler.repositories {  RepositoryHandler repositoryHandler ->\n        repositoryHandler.google()\n        repositoryHandler.jcenter()\n    }\n    scriptHandler.dependencies {\n        classpath 'com.android.tools.build:gradle:3.2.1'\n    }\n}\n~~~\n依赖传递：A模块依赖B模块，B模块依赖C模块，如果A模块也需要C模块功能，不需依赖使用，防止B修改后去掉C依赖而导致错误，可在A中引入C模块，通过exclude排除依赖，transitive禁止依赖传递\n\n占位编译provided：A.类库只在编译阶段起作用 B.父项目已引入类库，子项目直接使用父项目类库，但为了子项目编译通过使用占位编译\n\n* 外部命令执行\n~~~\ntask abc() {\n    doLast{\n        def command = 'ls'\n        exec{\n            try{\n                executable 'bash'\n                args '-c',command\n                println 'command is execute success.'\n            }catch(GradleException ex){\n                println \"Excepiotn....\"\n            }\n        }\n    }\n}\n~~~\n执行：./gradlew abc\n\n# Task\n1. Task定义及配置\n直接通过task函数去创建\n~~~\ntask(\"abcd\") {\n    doLast{\n        def command = 'ls -al'\n        exec{\n            try{\n                executable 'bash'\n                args '-c',command\n                println 'command is execute success.'\n            }catch(GradleException ex){\n                println \"Excepiotn....\"\n            }\n        }\n    }\n}\n~~~\n通过TaskContainer创建\n~~~\nthis.tasks.create(\"aa\"){\n    println 'Hello task'\n}\n~~~\nTask创建之后可在开发工具的gradle插件重查找到task，如果没有设置group，则默认在other分组中，更多配置可通过task源码查看\n2. Task执行详解\ndoFirst/doLast执行阶段执行，否则在配置阶段执行\n~~~\ntask aa{\n    doFirst{\n        println 'Hello  2'\n    }\n}\ntask.doFirst{\n    println 'Hello  1'\n}\n\n//Hello  1\n//Hello  2\n~~~\n\n编写一个统计build时长的task\napp.gradle中编写：\n~~~\ndef startBuilderTime,endBuilderTime\nthis.afterEvaluate { Project project ->\n    def preBuildTask = this.tasks.getByName(\"preBuild\")\n    preBuildTask.doFirst {\n        startBuilderTime = System.currentTimeMillis()\n        println '------开始计时...'\n    }\n    def buildTask = this.tasks.getByName(\"build\")\n    buildTask.doLast {\n        endBuilderTime = System.currentTimeMillis()\n        println '------计时结束,耗时：'+(endBuilderTime - startBuilderTime)\n    }\n}\n~~~\n./gradlew build执行查看结果\n3. Task的依赖及执行顺序\n* dependsOn强依赖方式\n~~~\ntask t1() { doLast{println 'task t1'} }\ntask t2() << { println 'task t2' }      //此处\"<<\"等同于doLast\ntask t3(dependsOn:[t1,t2]) { doLast{println 'task t3'} }\ntask t4() { dependsOn this.tasks.findAll { task -> return task.name.equals(\"t2\")};doLast{println 'task t4'} }\n\n//./gradlew t3: (t1和t2执行顺序是随机的)\n//task t1\n//task t2\n//task t3\n\n//./gradlew t4\n//task t2\n//task t4\n~~~\n* 通过Task输入输出指定\nTaskInputs:参数为任意对象及文件、文件夹；TaskOutputs:只输出文件\n\n~~~\next{\n    println '------配置中...'\n    versionCode = 100\n    versionName = \"V2.0.0\"\n    versionInfo = \"第一个版本\"\n    destFile = file(\"release.xml\")\n    if(destFile != null && !destFile.exists()){\n        destFile.createNewFile()\n    }\n}\n\nclass VersionMsg{\n    Integer versionCode\n    String versionName\n    String versionInfo\n}\n\ntask writerTask{\n    //为task指定输入\n    inputs.property(\"versionCode\",this.versionCode)\n    inputs.property(\"versionName\",this.versionName)\n    inputs.property(\"versionInfo\",this.versionInfo)\n    //为task指定输出\n    outputs.file destFile\n\n    doLast{\n        def data = inputs.getProperties()\n        File file = outputs.getFiles().getSingleFile()\n        def versionMsg = new VersionMsg(data)\n        def sw = new StringWriter()\n        def xmlBuilder = new groovy.xml.MarkupBuilder(sw)\n        if(file.text != null && file.text.size() <=0){\n            xmlBuilder.releases{\n                release{\n                    versionCode(versionMsg.versionCode)\n                    versionName(versionMsg.versionName)\n                    versionInfo(versionMsg.versionInfo)\n                }\n            }\n            file.withWriter { writer ->\n                writer.append(sw.toString())\n            }\n        }else{\n            def lines = file.readLines()\n            def lengths = lines.size() - 1\n            file.withWriter { writer ->\n                lines.eachWithIndex{ String line, int index ->\n                    if(index != lengths){\n                        writer.append(line +\"\\r\\n\")\n                    }else if(index == lengths){\n                        writer.append(\"\\r\\n\" + sw.toString()+\"\\r\\n\")\n                        writer.append(lines.get(lengths))\n                    }\n                }\n            }\n\n        }\n    }\n}\n\ntask readTask{\n    inputs.file destFile\n    doLast{\n        def file = inputs.files.singleFile\n        println file.text\n    }\n}\n\ntask taskTest{\n    dependsOn readTask,writerTask\n    doLast{\n        println \"输入输出任务结束\"\n    }\n}\n~~~\ndestFile作为writerTask输出结果输入到readTask\n* 通过API指定执行顺序：mustRunAfter／shouldRunAfter\n~~~\ntask t1() { doLast{println 'task t1'} }\ntask t2() { mustRunAfter t1 doLast {println 'task t2'} }\n~~~\n通过./gradlew t2 t1查看执行结果\n4. Task类型\n详见官方文档：https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Delete.html#org.gradle.api.tasks.Delete\n5. 构建到生命周期\n~~~\nthis.project.afterEvaluate {project ->\n    println \"开始挂接...\"\n    def buildTask = project.tasks.getByName(\"build\")\n    if(buildTask == null) throw GradleException(\"build Task not found\")\n    buildTask.doLast {\n        writerTask.execute()\n    }\n}\n~~~\n\n# Gradle其他模块\n1. Settings类：对应Settings.gradle\n~~~\nif(hasProperty('isLoadTest')? isLoadTest.toBoolean() : false){\n    include ':Test'\n}\n~~~\n2. SourceSet类:AndroidSourceSet/JavaSourceSet,决定了代码、资源、第三方库要存放的位置\n~~~\n//修改.so等jnilibs的存放位置\nandroid{\n    sourceSets {\n        main{\n            jniLibs.srcDirs = ['libs']\n            res.srcDirs = ['src/main/res','src/main/res-ad']    //对res文件夹内容进行分类，但是只能在Project视图查看到效果\n        }\n    }\n}\n~~~\n3. Gradle的Plugin\n* Gradle没有提供创建自定义Gradle插件工程的模板，需要开发者手动创建Gradle插件工程\n* 使用Groovy开发，其Gradle插件工程必须遵循如下的目录结构：\n groovy代码必须位于xxxProject/src/main/groovy/目录下\n提供插件属性声明文件，该文件必须位于xxxProject/src/main/resources/META-INF/gradle-plugins/xxx.properties\n\n\n4. android插件对gradle的扩展\nandroid具体能配置那些属性，可查看源码通过BaseExtension查看\n\ngradle插件： https://avatarqing.gitbooks.io/gradlepluginuserguidechineseverision/content/introduction/README.html\n\nvarints变体\n\n\n\n\n\n\n","slug":"android-Gradle3-0自动化项目构建技术","published":1,"updated":"2019-02-14T01:41:31.000Z","layout":"post","photos":[],"link":"","_id":"cjs3yts0u006pck8hvcgscd31","content":"<h1 id=\"groovy快速入门\"><a class=\"markdownIt-Anchor\" href=\"#groovy快速入门\"></a> Groovy快速入门</h1>\n<p>领域特定语言DSL（Domain  Specific Language）：其核心思想为&quot;求专不求全，解决特定问题&quot;，</p>\n<p>Groovy： <a href=\"http://www.groovy-lang.org/\" target=\"_blank\" rel=\"noopener\">http://www.groovy-lang.org/</a><br>\nGroovy：是一种基于JVM的敏捷开发语言，结合了Python、Ruby等脚本语言的许多强大特性，可以与Java完美结合，使用Java的所有库；</p>\n<ol>\n<li>语法上支持动态类型，闭包等新一代语言特性</li>\n<li>无缝继承所有Java的库（可以完全用Java写，但是不推荐）</li>\n<li>即支持面向对象编程，也支持面向过程编程</li>\n</ol>\n<p>优势：一种更加敏捷的编程语言；入门非常容易，但是功能非常强大；既可以作为编程语言也可以作为脚本语言；熟练掌握Java的人会非常容易掌握Groovy</p>\n<p>Groovy开发环境搭建：</p>\n<blockquote>\n<p>java平台上有各种语言的翻版，例如kotlin对c#,scala对haskell,Clojure对lisp，groovy对ruby</p>\n</blockquote>\n<h2 id=\"macoslinux\"><a class=\"markdownIt-Anchor\" href=\"#macoslinux\"></a> macOS/Linux</h2>\n<ol>\n<li>安装配置好JDK</li>\n<li>下载Groovy SDK并解压到合适未知</li>\n<li>配置bin目录到<sub>/.bash_profile中，如添加如下内容到</sub>/.bash_profile</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/groovy-2.5.5/bin</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>groovy -version</li>\n</ol>\n<h2 id=\"intelij-idea配置\"><a class=\"markdownIt-Anchor\" href=\"#intelij-idea配置\"></a> InteliJ IDEA配置</h2>\n<ol>\n<li>确保已安装Groovy插件</li>\n<li>配置Groovy SDK未知<br>\n<img src=\"/pub-images/Intelij%20Groovy.png\" alt=\"image\"></li>\n<li>编写Groovy版本HelloWorld，注意查看编译后文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Java版本</span><br><span class=\"line\">class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        System.out.println(&quot;Hello world&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Groovy版本</span><br><span class=\"line\">print &quot;Hello world&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"groovy基础语法\"><a class=\"markdownIt-Anchor\" href=\"#groovy基础语法\"></a> Groovy基础语法</h1>\n<ol>\n<li>变量</li>\n</ol>\n<ul>\n<li>变量的类型：基本类型+对象类型，Groovy中没有基本类型，所有的基本类型都会被编译器包装成对象类型，如：int-&gt;Integer</li>\n<li>变量的定义：强类型定义方式+弱类型def定义方式，Groovy中如果变量的值可以推断除其类型，则可通过def声明为弱类型，区别于java中的强类型定义方式，如：int i=1；</li>\n<li>推荐在自有使用模块使用def方式定义，如果有其他模块或其他类使用推荐强类型定义方式</li>\n</ul>\n<ol start=\"2\">\n<li>字符串：String + GString<br>\nString的使用和Java中一致，GString定义方式如下：</li>\n</ol>\n<ul>\n<li>def name = ‘Hello name’ //不支持可扩展字符串</li>\n<li>def doubleName = “Hello doubleName” //可扩展字符串，如：def doubleName = “Hello doubleName and ${name}”,结果为： Hello doubleName and Hello name，此时doubleName是org.codehaus.groovy.runtime.GStringImpl的子类</li>\n<li>def thupleName  = ‘’‘Hello thupleName’’’  //支持多行方式</li>\n</ul>\n<p>无可扩展字符串时以上3种方式的String都是java.lang.String的子类，编码过程中String和GString是可以通用的，更多从方便使用角度考虑即可</p>\n<p>Groovy字符串方法介绍</p>\n<ul>\n<li>java中String原有的方法</li>\n<li>DefalutGroovyMethods</li>\n<li>StringGroovyMethods：普通类型的参数+闭包类型的参数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def str = &quot;Groovy&quot;，str2 = &quot;Hello&quot;,str3= &quot;Hello minus&quot;</span><br><span class=\"line\">//字符串填充:center(),paddingLeft(),paddingRight()</span><br><span class=\"line\">println str.center(8,&apos;a&apos;)       //aGroovya</span><br><span class=\"line\">//字符串比较：类似于数字比较；compareTo()</span><br><span class=\"line\">println str &gt; str2  //false</span><br><span class=\"line\">//获取字符串索引:类似于数组下标；charAt()</span><br><span class=\"line\">println str[0..1]   //Gr</span><br><span class=\"line\">//减法运算:类似于数字减法；minus()</span><br><span class=\"line\">println str3.minus(str2)    // minus</span><br><span class=\"line\">//其他方法自己摸索</span><br></pre></td></tr></table></figure>\n<p>逻辑控制：单步顺序执行|if／else|switch-case|while|for，基本和Java操作一致，针对Groovy扩展介绍如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//switch-case</span><br><span class=\"line\">def x=1.23,result</span><br><span class=\"line\">switch(x)&#123;  //switch(x.class)</span><br><span class=\"line\">    case &quot;name&quot;:</span><br><span class=\"line\">        result = &quot;name&quot;</span><br><span class=\"line\">        break</span><br><span class=\"line\">    case Integer:</span><br><span class=\"line\">        result = &quot;Integer&quot;</span><br><span class=\"line\">        break</span><br><span class=\"line\">    case BigDecimal:</span><br><span class=\"line\">        result = &quot;BigDecimal&quot;</span><br><span class=\"line\">        break</span><br><span class=\"line\">    case [1,2,3]:       //列表</span><br><span class=\"line\">        result = &quot;list&quot;</span><br><span class=\"line\">        break</span><br><span class=\"line\">    case 1..10:         //范围</span><br><span class=\"line\">        result = &quot;range&quot;    </span><br><span class=\"line\">    default:</span><br><span class=\"line\">        result=&quot;defalut&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println result  //BigDecimal</span><br></pre></td></tr></table></figure>\n<p>for循环控制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对范围的for循环</span><br><span class=\"line\">def sum =0</span><br><span class=\"line\">for(i in 0..9)&#123;</span><br><span class=\"line\">    sum += i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println sum //45</span><br><span class=\"line\">//对list的for循环</span><br><span class=\"line\">for(i in [1,2,3,4,5])&#123;</span><br><span class=\"line\">    sum += i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//对map的for循环</span><br><span class=\"line\">for(i in [&quot;lili&quot;:1,&quot;lucy&quot;:2])&#123;</span><br><span class=\"line\">    println i.key + &quot;:&quot; +i.value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>闭包</li>\n</ol>\n<ul>\n<li>闭包就是一个代码块，所以需要通过{}括起来，def clouser = { println “Hello Groovy!”};clouser.call();clouser();  //推荐call()方式调用来区分是闭包</li>\n<li>def clouser = {String name -&gt; println “Hello Groovy ${name}!”};clouser.call(“a”);clouser(“b”);</li>\n<li>隐式参数it：def clouser = {println “Hello Groovy ${it}!”};clouser.call(“a”);clouser(“b”);</li>\n<li>闭包返回值：总是有返回值的，当闭包体没有明确返回值的时候，返回结果就是null</li>\n<li>如果最后一个参数是闭包，闭包可以写在外面</li>\n</ul>\n<p>闭包的使用</p>\n<ul>\n<li>与基本类型的结合使用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int fab1(int number)&#123;</span><br><span class=\"line\">    int result = 1</span><br><span class=\"line\">    1.upto(number,&#123;num -&gt; result *= num  &#125;)</span><br><span class=\"line\">    return  result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int fab2(int number)&#123;</span><br><span class=\"line\">    int result = 1</span><br><span class=\"line\">    number.downto(1) &#123;</span><br><span class=\"line\">        num -&gt; result *= num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return  result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int cal(int number)&#123;</span><br><span class=\"line\">    int result = 0</span><br><span class=\"line\">    number.times &#123;</span><br><span class=\"line\">        num -&gt; result += num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>与String结合使用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def str = &quot;the 2 and 3 is 5&quot;</span><br><span class=\"line\">str.each &#123;String tmp -&gt; print tmp.multiply(2)&#125;  //tthhee  22  aanndd  33  iiss  55</span><br><span class=\"line\">println str.find &#123;String tmp -&gt; tmp.isNumber()&#125; //2</span><br><span class=\"line\">println str.any &#123;String tmp -&gt; tmp.isNumber()&#125;  //true</span><br><span class=\"line\">println str.every &#123;String tmp -&gt; tmp.isNumber()&#125; //false</span><br><span class=\"line\">def list = str.collect &#123;it.toUpperCase()&#125;;println list.toListString()   //[T, H, E,  , 2,  , A, N, D,  , 3,  , I, S,  , 5]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>与数据结构结合使用</li>\n<li>与文件等结合使用</li>\n<li>闭包进阶：闭包关键字（this，owner，delegate）+闭包委托策略</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def scriptClosure = &#123;</span><br><span class=\"line\">    println &quot;scriptClosure this:&quot;+this          //代表闭包定义处的类</span><br><span class=\"line\">    println &quot;scriptClosure owner:&quot;+owner        //代表闭包定义处的类或对象</span><br><span class=\"line\">    println &quot;scriptClosure delegate:&quot;+delegate  //代表任意对象，默认值为owner</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scriptClosure.call()</span><br><span class=\"line\"></span><br><span class=\"line\">//scriptClosure this:Test@3c130745</span><br><span class=\"line\">//scriptClosure owner:Test@3c130745</span><br><span class=\"line\">//scriptClosure delegate:Test@3c130745</span><br><span class=\"line\"></span><br><span class=\"line\">class Person&#123;</span><br><span class=\"line\">    def static classClosure = &#123;</span><br><span class=\"line\">        println &quot;classClosure this:&quot;+this</span><br><span class=\"line\">        println &quot;classClosure owner:&quot;+owner</span><br><span class=\"line\">        println &quot;classClosure delegate:&quot;+delegate</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    def static say()&#123;</span><br><span class=\"line\">        def methodClosure = &#123;</span><br><span class=\"line\">            println &quot;methodClosure this:&quot;+this</span><br><span class=\"line\">            println &quot;methodClosure owner:&quot;+owner</span><br><span class=\"line\">            println &quot;methodClosure delegate:&quot;+delegate</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        methodClosure.call()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//静态方法调用</span><br><span class=\"line\">Person.classClosure()</span><br><span class=\"line\">Person.say()</span><br><span class=\"line\">//全部指向Person类,闭包指向离他最近的封闭类</span><br><span class=\"line\">//classClosure this:class Person</span><br><span class=\"line\">//classClosure owner:class Person</span><br><span class=\"line\">//classClosure delegate:class Person</span><br><span class=\"line\">//methodClosure this:class Person</span><br><span class=\"line\">//methodClosure owner:class Person</span><br><span class=\"line\">//methodClosure delegate:class Person</span><br><span class=\"line\"></span><br><span class=\"line\">//修改Person类中方法，取消static限定符调用</span><br><span class=\"line\">Person p = new Person()</span><br><span class=\"line\">p.classClosure()</span><br><span class=\"line\">p.say()</span><br><span class=\"line\">//全部指向Person类对象，闭包指向离他最近的封闭类对象</span><br><span class=\"line\">classClosure this:Person@a9cd3b1</span><br><span class=\"line\">classClosure owner:Person@a9cd3b1</span><br><span class=\"line\">classClosure delegate:Person@a9cd3b1</span><br><span class=\"line\">methodClosure this:Person@a9cd3b1</span><br><span class=\"line\">methodClosure owner:Person@a9cd3b1</span><br><span class=\"line\">methodClosure delegate:Person@a9cd3b1</span><br><span class=\"line\"></span><br><span class=\"line\">//嵌套闭包</span><br><span class=\"line\">def outerClosure = &#123;</span><br><span class=\"line\">    def innerClosure = &#123;</span><br><span class=\"line\">        println &quot;innerClosure this:&quot;+this</span><br><span class=\"line\">        println &quot;innerClosure owner:&quot;+owner</span><br><span class=\"line\">        println &quot;innerClosure delegate:&quot;+delegate</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    innerClosure.call()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">outerClosure.call()</span><br><span class=\"line\"></span><br><span class=\"line\">//innerClosure this:Test@3c130745</span><br><span class=\"line\">//innerClosure owner:Test$_run_closure7@9353778 //指向outerClosure</span><br><span class=\"line\">//innerClosure delegate:Test$_run_closure7@9353778</span><br></pre></td></tr></table></figure>\n<p>总结：this、owner、delegate的值在大多数情况都是一样的，在嵌套闭包中this的值和owner、delegate的值不一致，只有在给delegate赋值后owner和delegate的值才不一致</p>\n<p>闭包的委托策略</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student&#123;</span><br><span class=\"line\">    String name</span><br><span class=\"line\">    def sayName = &#123; &quot;My name is $&#123;name&#125;&quot;&#125;</span><br><span class=\"line\">    String toString()&#123;</span><br><span class=\"line\">        sayName.call()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Teacher&#123;</span><br><span class=\"line\">    String name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">def stu = new Student(name: &quot;XingFeng&quot;)</span><br><span class=\"line\">println stu.toString()</span><br><span class=\"line\"></span><br><span class=\"line\">def tea = new Teacher(name: &quot;Lily&quot;)</span><br><span class=\"line\">stu.sayName.delegate = tea</span><br><span class=\"line\">println stu.toString()</span><br><span class=\"line\">stu.sayName.resolveStrategy = Closure.DELEGATE_FIRST    //先从delegate中查找name属性，没有了再从owner中查找</span><br><span class=\"line\">println stu.toString()</span><br><span class=\"line\"></span><br><span class=\"line\">//My name is XingFeng</span><br><span class=\"line\">//My name is XingFeng</span><br><span class=\"line\">//My name is Lily</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>数据结构<br>\n列表的定义：def list = [1,2,3,4] 此为一个ArrayList；<br>\n数组的定义：def list = [1,2,3,4] as int[]; int[] arr=[1,2,3]<br>\n列表的排序：def list = [1,12,3,444]; Collections.sort(list);list.sort()</li>\n</ol>\n<p>map的定义：def colors=[“red”:1,“blue”:2];def colors=[red:1,blue:2]<br>\n索引map：println colors.red;println colors[“red”];<br>\n添加map：colors.yellow=3 //Groovy中map可以添加不同类型的数据：colors.complex =[a:1,b:2]<br>\n遍历map： list.each{def tmp,int index -&gt; …}  list.eachWithIndex{ key,value,index -&gt; …}<br>\n查找map： any  find  findAll every<br>\n分组map： groupBy{}<br>\n排序map：sort</p>\n<p>范围Range：定义 def range = 1…10;println range[0];range.contains(10);println range.from;println <a href=\"http://range.to\" target=\"_blank\" rel=\"noopener\">range.to</a><br>\nRange继承自java.util.List</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switch(number)&#123;</span><br><span class=\"line\">    case 0..&lt;60</span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>面向对象<br>\n类、接口等的定义和使用</li>\n</ol>\n<ul>\n<li>Groovy中默认类、方法等都是public类型</li>\n<li>Groovy中无论是直接调用属性还是通过get／set方法其实质都是通过getter／setter方法调用的属性，getter／setter方法默认自动继承</li>\n<li>接口实现需实现接口的所有方法；trait中可以有默认方法实现，没有实现的方法需添加abstract关键字，实现时只需实现abstract的方法即可</li>\n</ul>\n<blockquote>\n<p>元编程（Metaprogramming）是指某类计算机程序的编写，这类计算机程序编写或者操纵其他程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作。很多情况下与手工编写全部代码相比工作效率更高。编写元程序的语言称之为元语言，被操作的语言称之为目标语言。一门语言同时也是自身的元语言的能力称之为反射</p>\n</blockquote>\n<blockquote>\n<p>元编程通常有两种方式起作用。一种方式是通过应用程序接口（API）来暴露运行时引擎的内部信息。另一种方法是动态执行包含编程命令的字符串。因此，“程序能编写程序”。虽然两种方法都能用，但大多数方法主要靠其中一种。</p>\n</blockquote>\n<p><img src=\"/pub-images/Groovy%E5%85%83%E7%BC%96%E7%A8%8B.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Baby &#123;</span><br><span class=\"line\">    def invokeMethod(String name,Object args)&#123;</span><br><span class=\"line\">        return &quot;the method is $&#123;name&#125;,the args is $&#123;args&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    def methodMissing(String name,Object args)&#123;</span><br><span class=\"line\">        return &quot;the method  $&#123;name&#125; is missing&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">def baby = new Baby()</span><br><span class=\"line\">println baby.cry()</span><br></pre></td></tr></table></figure>\n<p>结合上图理解：Java中对象方法的调用没有上图否流程分支，在Groovy中对象方法调用有否分支调用，上例中通过注释invokeMethod、methodMissing方法查看运行效果，通过以下代码可动态添加对象属性和方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Baby.metaClass.sex = &quot;male&quot;</span><br><span class=\"line\">Baby.metaClass.play = &#123; ... &#125;</span><br><span class=\"line\">Baby.metaClass.static.play = &#123; ... &#125;    //静态方法</span><br></pre></td></tr></table></figure>\n<p>通过ExpandoMetaClass.enableGlobally()设置让动态添加方法全局启用</p>\n<ol start=\"6\">\n<li>Json操作</li>\n</ol>\n<ul>\n<li>对象转换成JSON字符串：JsonOutput.toJson()</li>\n<li>Json格式化打印：JsonOutput.prettyPrint(jsonObject)</li>\n<li>Json字符串转对象：def jsonSlurper = new JsonSlurper();jsonSlurper.parse()</li>\n</ul>\n<ol start=\"7\">\n<li>xml操作</li>\n</ol>\n<ul>\n<li>Java对xml的处理：DOM文档驱动处理方式+SAX事件驱动处理方式</li>\n<li>Groovy解析xml数据：def xmlSlurper = new XmlSlurper();def response = xmlSlurper.parse(xml); ／／response对象可以逐级访问节点，节点的属性添加@符号，如：response.books.@id，也可以通过闭包过滤信息</li>\n<li>Groovy深度遍历xml：可以通过逐级遍历解析后的response数据，也可通过response.depFirst().find{ …}遍历或 response.’<strong>’.find{ …}遍历（’</strong>'代表深度遍历）</li>\n<li>Groovy深度遍历xml：response.books.children().find{…}或response.books.’<em>’.find{…}（’</em>'代表深度遍历）</li>\n<li>Groovy创建xml数据：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">&lt;langs type=&apos;current&apos; count=&apos;3&apos;&gt;</span><br><span class=\"line\">    &lt;language flavor=&apos;static&apos; version=&apos;1.5&apos; /&gt;</span><br><span class=\"line\">    &lt;language flavor=&apos;public&apos; version=&apos;2.5&apos; /&gt;</span><br><span class=\"line\">&lt;/langs&gt;</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def sw = new StringWriter()</span><br><span class=\"line\">def xmlBuilder = new MarkupBuilder(sw)</span><br><span class=\"line\">xmlBuilder.langs(type:&apos;current&apos;,count:3)&#123;</span><br><span class=\"line\">    language(flavor:&apos;static&apos;,version:&apos;1.5&apos;)</span><br><span class=\"line\">    language(flavor:&apos;public&apos;,version:&apos;2.5&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println sw</span><br><span class=\"line\"></span><br><span class=\"line\">def langs = new Langs()</span><br><span class=\"line\">xmlBuilder.langs(type:langs.type,count:langs.count)&#123;</span><br><span class=\"line\">     langs.languages.each &#123;</span><br><span class=\"line\">         language(flavor:it.flavor,version:it.version)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println sw</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>文件操作</li>\n</ol>\n<ul>\n<li>Java文件处理：节点流（InputStream、OutputStream及其子类）+处理流（Reader、Writer及其子类），所有Java对文件的操作Groovy都支持</li>\n<li>遍历文件内容：def file = new File(“Test.iml”);file.eachLine { println it } 或 def text = file.getText() 或 def text = file.readLines() …</li>\n</ul>\n<h1 id=\"gradle\"><a class=\"markdownIt-Anchor\" href=\"#gradle\"></a> gradle</h1>\n<p>Gradle是一款最新的，功能强大的构建工具，使用程序代替传统的xml配置，项目构建更加灵活，有丰富的第三方库</p>\n<p>gradle组成：groovy核心语法+build script block+gradle api</p>\n<h2 id=\"gradle生命周期\"><a class=\"markdownIt-Anchor\" href=\"#gradle生命周期\"></a> gradle生命周期</h2>\n<p>执行./gradlew clean 观察执行过程，其生命周期包括：初始化、配置、执行<br>\n<img src=\"/pub-images/gradle%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" alt=\"image\"></p>\n<h2 id=\"gradle生命周期的监听\"><a class=\"markdownIt-Anchor\" href=\"#gradle生命周期的监听\"></a> gradle生命周期的监听</h2>\n<p>在项目的build.gradle中添加如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在配置阶段开始之前的回调</span><br><span class=\"line\">this.beforeEvaluate &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//配置阶段完成以后的回调</span><br><span class=\"line\">this.afterEvaluate &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//gradle生命周期执行完以后的回调</span><br><span class=\"line\">this.gradle.buildFinished &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"gradle-project\"><a class=\"markdownIt-Anchor\" href=\"#gradle-project\"></a> Gradle Project</h1>\n<p>./gradlew projects //查看工程Project数量，学会区分Project与module及根Project与子Project，每个Project必须有一个build.gradle文件</p>\n<p>Project API组成：</p>\n<ol>\n<li>Project相关API：如何管理父Project及如何操作子Project</li>\n</ol>\n<ul>\n<li>this.getAllProjects()，this.getSubProjects(),this.getParent()，在gradl文件中，对应allprojects、project、subprojects进行操作</li>\n</ul>\n<p>./gradlew projects可实现显示所有项目，自我实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def getProjects()&#123;</span><br><span class=\"line\">    println &quot;------------------------&quot;</span><br><span class=\"line\">    this.getAllprojects().eachWithIndex&#123; Project project, int index -&gt;</span><br><span class=\"line\">        if(index == 0)&#123;</span><br><span class=\"line\">            println &quot;Root project:$&#123;project.name&#125;&quot;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            println &quot;+--- project:$&#123;project.name&#125;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">this.getProjects()</span><br><span class=\"line\"></span><br><span class=\"line\">//------------------------</span><br><span class=\"line\">//Root project:MyApplication</span><br><span class=\"line\">//+--- project:app</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>\n<p>task相关API</p>\n</li>\n<li>\n<p>属性相关API</p>\n</li>\n</ol>\n<ul>\n<li>父Project的属性在子项目中会被继承，可直接使用</li>\n<li>可以在项目中通过common.gradle文件来定义扩展属性ext，然后在根Project中通过apply from:this.file(‘common.gradle’)引入后，按rootProject.ext.定义属性的方式使用</li>\n<li>在gradle.properties中定义key-value属性，如：isLoadTest=false，然后在settings.gradle中就可以编码控制是否加载Test项目</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(hasProperty(&apos;isLoadTest&apos;)? isLoadTest.toBoolean() : false)&#123;</span><br><span class=\"line\">    include &apos;:Test&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自定义属性的两种方式：ext方式+gradle.properties中定义<br>\n4. file相关API</p>\n<ul>\n<li>路径获取API：getRootdir()、getBuildDir()、getProjectDir()</li>\n<li>文件操作相关API：都是基于根工程操作的，不支持跨工程操作</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//文件／文件夹拷贝</span><br><span class=\"line\">copy &#123;</span><br><span class=\"line\">   from file(&apos;test.txt&apos;)</span><br><span class=\"line\">   into getRootProject().getBuildDir()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//文件树遍历</span><br><span class=\"line\">fileTree(&apos;build/&apos;)&#123;</span><br><span class=\"line\">    FileTree fileTree -&gt; fileTree.visit&#123; FileTreeElement element -&gt; ... &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>\n<p>gradle生命周期API</p>\n</li>\n<li>\n<p>其他API</p>\n</li>\n</ol>\n<ul>\n<li>依赖相关API</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        google()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath &apos;com.android.tools.build:gradle:3.2.1&apos; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//等价于以下操作：</span><br><span class=\"line\">buildscript &#123; ScriptHandler scriptHandler -&gt;</span><br><span class=\"line\">    scriptHandler.repositories &#123;  RepositoryHandler repositoryHandler -&gt;</span><br><span class=\"line\">        repositoryHandler.google()</span><br><span class=\"line\">        repositoryHandler.jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    scriptHandler.dependencies &#123;</span><br><span class=\"line\">        classpath &apos;com.android.tools.build:gradle:3.2.1&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>依赖传递：A模块依赖B模块，B模块依赖C模块，如果A模块也需要C模块功能，不需依赖使用，防止B修改后去掉C依赖而导致错误，可在A中引入C模块，通过exclude排除依赖，transitive禁止依赖传递</p>\n<p>占位编译provided：A.类库只在编译阶段起作用 B.父项目已引入类库，子项目直接使用父项目类库，但为了子项目编译通过使用占位编译</p>\n<ul>\n<li>外部命令执行</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task abc() &#123;</span><br><span class=\"line\">    doLast&#123;</span><br><span class=\"line\">        def command = &apos;ls&apos;</span><br><span class=\"line\">        exec&#123;</span><br><span class=\"line\">            try&#123;</span><br><span class=\"line\">                executable &apos;bash&apos;</span><br><span class=\"line\">                args &apos;-c&apos;,command</span><br><span class=\"line\">                println &apos;command is execute success.&apos;</span><br><span class=\"line\">            &#125;catch(GradleException ex)&#123;</span><br><span class=\"line\">                println &quot;Excepiotn....&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行：./gradlew abc</p>\n<h1 id=\"task\"><a class=\"markdownIt-Anchor\" href=\"#task\"></a> Task</h1>\n<ol>\n<li>Task定义及配置<br>\n直接通过task函数去创建</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task(&quot;abcd&quot;) &#123;</span><br><span class=\"line\">    doLast&#123;</span><br><span class=\"line\">        def command = &apos;ls -al&apos;</span><br><span class=\"line\">        exec&#123;</span><br><span class=\"line\">            try&#123;</span><br><span class=\"line\">                executable &apos;bash&apos;</span><br><span class=\"line\">                args &apos;-c&apos;,command</span><br><span class=\"line\">                println &apos;command is execute success.&apos;</span><br><span class=\"line\">            &#125;catch(GradleException ex)&#123;</span><br><span class=\"line\">                println &quot;Excepiotn....&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过TaskContainer创建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.tasks.create(&quot;aa&quot;)&#123;</span><br><span class=\"line\">    println &apos;Hello task&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Task创建之后可在开发工具的gradle插件重查找到task，如果没有设置group，则默认在other分组中，更多配置可通过task源码查看<br>\n2. Task执行详解<br>\ndoFirst/doLast执行阶段执行，否则在配置阶段执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task aa&#123;</span><br><span class=\"line\">    doFirst&#123;</span><br><span class=\"line\">        println &apos;Hello  2&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">task.doFirst&#123;</span><br><span class=\"line\">    println &apos;Hello  1&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Hello  1</span><br><span class=\"line\">//Hello  2</span><br></pre></td></tr></table></figure>\n<p>编写一个统计build时长的task<br>\napp.gradle中编写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def startBuilderTime,endBuilderTime</span><br><span class=\"line\">this.afterEvaluate &#123; Project project -&gt;</span><br><span class=\"line\">    def preBuildTask = this.tasks.getByName(&quot;preBuild&quot;)</span><br><span class=\"line\">    preBuildTask.doFirst &#123;</span><br><span class=\"line\">        startBuilderTime = System.currentTimeMillis()</span><br><span class=\"line\">        println &apos;------开始计时...&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    def buildTask = this.tasks.getByName(&quot;build&quot;)</span><br><span class=\"line\">    buildTask.doLast &#123;</span><br><span class=\"line\">        endBuilderTime = System.currentTimeMillis()</span><br><span class=\"line\">        println &apos;------计时结束,耗时：&apos;+(endBuilderTime - startBuilderTime)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>./gradlew build执行查看结果<br>\n3. Task的依赖及执行顺序</p>\n<ul>\n<li>dependsOn强依赖方式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task t1() &#123; doLast&#123;println &apos;task t1&apos;&#125; &#125;</span><br><span class=\"line\">task t2() &lt;&lt; &#123; println &apos;task t2&apos; &#125;      //此处&quot;&lt;&lt;&quot;等同于doLast</span><br><span class=\"line\">task t3(dependsOn:[t1,t2]) &#123; doLast&#123;println &apos;task t3&apos;&#125; &#125;</span><br><span class=\"line\">task t4() &#123; dependsOn this.tasks.findAll &#123; task -&gt; return task.name.equals(&quot;t2&quot;)&#125;;doLast&#123;println &apos;task t4&apos;&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//./gradlew t3: (t1和t2执行顺序是随机的)</span><br><span class=\"line\">//task t1</span><br><span class=\"line\">//task t2</span><br><span class=\"line\">//task t3</span><br><span class=\"line\"></span><br><span class=\"line\">//./gradlew t4</span><br><span class=\"line\">//task t2</span><br><span class=\"line\">//task t4</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过Task输入输出指定<br>\nTaskInputs:参数为任意对象及文件、文件夹；TaskOutputs:只输出文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ext&#123;</span><br><span class=\"line\">    println &apos;------配置中...&apos;</span><br><span class=\"line\">    versionCode = 100</span><br><span class=\"line\">    versionName = &quot;V2.0.0&quot;</span><br><span class=\"line\">    versionInfo = &quot;第一个版本&quot;</span><br><span class=\"line\">    destFile = file(&quot;release.xml&quot;)</span><br><span class=\"line\">    if(destFile != null &amp;&amp; !destFile.exists())&#123;</span><br><span class=\"line\">        destFile.createNewFile()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class VersionMsg&#123;</span><br><span class=\"line\">    Integer versionCode</span><br><span class=\"line\">    String versionName</span><br><span class=\"line\">    String versionInfo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task writerTask&#123;</span><br><span class=\"line\">    //为task指定输入</span><br><span class=\"line\">    inputs.property(&quot;versionCode&quot;,this.versionCode)</span><br><span class=\"line\">    inputs.property(&quot;versionName&quot;,this.versionName)</span><br><span class=\"line\">    inputs.property(&quot;versionInfo&quot;,this.versionInfo)</span><br><span class=\"line\">    //为task指定输出</span><br><span class=\"line\">    outputs.file destFile</span><br><span class=\"line\"></span><br><span class=\"line\">    doLast&#123;</span><br><span class=\"line\">        def data = inputs.getProperties()</span><br><span class=\"line\">        File file = outputs.getFiles().getSingleFile()</span><br><span class=\"line\">        def versionMsg = new VersionMsg(data)</span><br><span class=\"line\">        def sw = new StringWriter()</span><br><span class=\"line\">        def xmlBuilder = new groovy.xml.MarkupBuilder(sw)</span><br><span class=\"line\">        if(file.text != null &amp;&amp; file.text.size() &lt;=0)&#123;</span><br><span class=\"line\">            xmlBuilder.releases&#123;</span><br><span class=\"line\">                release&#123;</span><br><span class=\"line\">                    versionCode(versionMsg.versionCode)</span><br><span class=\"line\">                    versionName(versionMsg.versionName)</span><br><span class=\"line\">                    versionInfo(versionMsg.versionInfo)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            file.withWriter &#123; writer -&gt;</span><br><span class=\"line\">                writer.append(sw.toString())</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            def lines = file.readLines()</span><br><span class=\"line\">            def lengths = lines.size() - 1</span><br><span class=\"line\">            file.withWriter &#123; writer -&gt;</span><br><span class=\"line\">                lines.eachWithIndex&#123; String line, int index -&gt;</span><br><span class=\"line\">                    if(index != lengths)&#123;</span><br><span class=\"line\">                        writer.append(line +&quot;\\r\\n&quot;)</span><br><span class=\"line\">                    &#125;else if(index == lengths)&#123;</span><br><span class=\"line\">                        writer.append(&quot;\\r\\n&quot; + sw.toString()+&quot;\\r\\n&quot;)</span><br><span class=\"line\">                        writer.append(lines.get(lengths))</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task readTask&#123;</span><br><span class=\"line\">    inputs.file destFile</span><br><span class=\"line\">    doLast&#123;</span><br><span class=\"line\">        def file = inputs.files.singleFile</span><br><span class=\"line\">        println file.text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task taskTest&#123;</span><br><span class=\"line\">    dependsOn readTask,writerTask</span><br><span class=\"line\">    doLast&#123;</span><br><span class=\"line\">        println &quot;输入输出任务结束&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>destFile作为writerTask输出结果输入到readTask</p>\n<ul>\n<li>通过API指定执行顺序：mustRunAfter／shouldRunAfter</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task t1() &#123; doLast&#123;println &apos;task t1&apos;&#125; &#125;</span><br><span class=\"line\">task t2() &#123; mustRunAfter t1 doLast &#123;println &apos;task t2&apos;&#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>通过./gradlew t2 t1查看执行结果<br>\n4. Task类型<br>\n详见官方文档：<a href=\"https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Delete.html#org.gradle.api.tasks.Delete\" target=\"_blank\" rel=\"noopener\">https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Delete.html#org.gradle.api.tasks.Delete</a><br>\n5. 构建到生命周期</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.project.afterEvaluate &#123;project -&gt;</span><br><span class=\"line\">    println &quot;开始挂接...&quot;</span><br><span class=\"line\">    def buildTask = project.tasks.getByName(&quot;build&quot;)</span><br><span class=\"line\">    if(buildTask == null) throw GradleException(&quot;build Task not found&quot;)</span><br><span class=\"line\">    buildTask.doLast &#123;</span><br><span class=\"line\">        writerTask.execute()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"gradle其他模块\"><a class=\"markdownIt-Anchor\" href=\"#gradle其他模块\"></a> Gradle其他模块</h1>\n<ol>\n<li>Settings类：对应Settings.gradle</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(hasProperty(&apos;isLoadTest&apos;)? isLoadTest.toBoolean() : false)&#123;</span><br><span class=\"line\">    include &apos;:Test&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>SourceSet类:AndroidSourceSet/JavaSourceSet,决定了代码、资源、第三方库要存放的位置</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改.so等jnilibs的存放位置</span><br><span class=\"line\">android&#123;</span><br><span class=\"line\">    sourceSets &#123;</span><br><span class=\"line\">        main&#123;</span><br><span class=\"line\">            jniLibs.srcDirs = [&apos;libs&apos;]</span><br><span class=\"line\">            res.srcDirs = [&apos;src/main/res&apos;,&apos;src/main/res-ad&apos;]    //对res文件夹内容进行分类，但是只能在Project视图查看到效果</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Gradle的Plugin</li>\n</ol>\n<ul>\n<li>Gradle没有提供创建自定义Gradle插件工程的模板，需要开发者手动创建Gradle插件工程</li>\n<li>使用Groovy开发，其Gradle插件工程必须遵循如下的目录结构：<br>\ngroovy代码必须位于xxxProject/src/main/groovy/目录下<br>\n提供插件属性声明文件，该文件必须位于xxxProject/src/main/resources/META-INF/gradle-plugins/xxx.properties</li>\n</ul>\n<ol start=\"4\">\n<li>android插件对gradle的扩展<br>\nandroid具体能配置那些属性，可查看源码通过BaseExtension查看</li>\n</ol>\n<p>gradle插件： <a href=\"https://avatarqing.gitbooks.io/gradlepluginuserguidechineseverision/content/introduction/README.html\" target=\"_blank\" rel=\"noopener\">https://avatarqing.gitbooks.io/gradlepluginuserguidechineseverision/content/introduction/README.html</a></p>\n<p>varints变体</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"groovy快速入门\"><a class=\"markdownIt-Anchor\" href=\"#groovy快速入门\"></a> Groovy快速入门</h1>\n<p>领域特定语言DSL（Domain  Specific Language）：其核心思想为&quot;求专不求全，解决特定问题&quot;，</p>\n<p>Groovy： <a href=\"http://www.groovy-lang.org/\" target=\"_blank\" rel=\"noopener\">http://www.groovy-lang.org/</a><br>\nGroovy：是一种基于JVM的敏捷开发语言，结合了Python、Ruby等脚本语言的许多强大特性，可以与Java完美结合，使用Java的所有库；</p>\n<ol>\n<li>语法上支持动态类型，闭包等新一代语言特性</li>\n<li>无缝继承所有Java的库（可以完全用Java写，但是不推荐）</li>\n<li>即支持面向对象编程，也支持面向过程编程</li>\n</ol>\n<p>优势：一种更加敏捷的编程语言；入门非常容易，但是功能非常强大；既可以作为编程语言也可以作为脚本语言；熟练掌握Java的人会非常容易掌握Groovy</p>\n<p>Groovy开发环境搭建：</p>\n<blockquote>\n<p>java平台上有各种语言的翻版，例如kotlin对c#,scala对haskell,Clojure对lisp，groovy对ruby</p>\n</blockquote>\n<h2 id=\"macoslinux\"><a class=\"markdownIt-Anchor\" href=\"#macoslinux\"></a> macOS/Linux</h2>\n<ol>\n<li>安装配置好JDK</li>\n<li>下载Groovy SDK并解压到合适未知</li>\n<li>配置bin目录到<sub>/.bash_profile中，如添加如下内容到</sub>/.bash_profile</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/groovy-2.5.5/bin</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>groovy -version</li>\n</ol>\n<h2 id=\"intelij-idea配置\"><a class=\"markdownIt-Anchor\" href=\"#intelij-idea配置\"></a> InteliJ IDEA配置</h2>\n<ol>\n<li>确保已安装Groovy插件</li>\n<li>配置Groovy SDK未知<br>\n<img src=\"/pub-images/Intelij%20Groovy.png\" alt=\"image\"></li>\n<li>编写Groovy版本HelloWorld，注意查看编译后文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Java版本</span><br><span class=\"line\">class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        System.out.println(&quot;Hello world&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Groovy版本</span><br><span class=\"line\">print &quot;Hello world&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"groovy基础语法\"><a class=\"markdownIt-Anchor\" href=\"#groovy基础语法\"></a> Groovy基础语法</h1>\n<ol>\n<li>变量</li>\n</ol>\n<ul>\n<li>变量的类型：基本类型+对象类型，Groovy中没有基本类型，所有的基本类型都会被编译器包装成对象类型，如：int-&gt;Integer</li>\n<li>变量的定义：强类型定义方式+弱类型def定义方式，Groovy中如果变量的值可以推断除其类型，则可通过def声明为弱类型，区别于java中的强类型定义方式，如：int i=1；</li>\n<li>推荐在自有使用模块使用def方式定义，如果有其他模块或其他类使用推荐强类型定义方式</li>\n</ul>\n<ol start=\"2\">\n<li>字符串：String + GString<br>\nString的使用和Java中一致，GString定义方式如下：</li>\n</ol>\n<ul>\n<li>def name = ‘Hello name’ //不支持可扩展字符串</li>\n<li>def doubleName = “Hello doubleName” //可扩展字符串，如：def doubleName = “Hello doubleName and ${name}”,结果为： Hello doubleName and Hello name，此时doubleName是org.codehaus.groovy.runtime.GStringImpl的子类</li>\n<li>def thupleName  = ‘’‘Hello thupleName’’’  //支持多行方式</li>\n</ul>\n<p>无可扩展字符串时以上3种方式的String都是java.lang.String的子类，编码过程中String和GString是可以通用的，更多从方便使用角度考虑即可</p>\n<p>Groovy字符串方法介绍</p>\n<ul>\n<li>java中String原有的方法</li>\n<li>DefalutGroovyMethods</li>\n<li>StringGroovyMethods：普通类型的参数+闭包类型的参数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def str = &quot;Groovy&quot;，str2 = &quot;Hello&quot;,str3= &quot;Hello minus&quot;</span><br><span class=\"line\">//字符串填充:center(),paddingLeft(),paddingRight()</span><br><span class=\"line\">println str.center(8,&apos;a&apos;)       //aGroovya</span><br><span class=\"line\">//字符串比较：类似于数字比较；compareTo()</span><br><span class=\"line\">println str &gt; str2  //false</span><br><span class=\"line\">//获取字符串索引:类似于数组下标；charAt()</span><br><span class=\"line\">println str[0..1]   //Gr</span><br><span class=\"line\">//减法运算:类似于数字减法；minus()</span><br><span class=\"line\">println str3.minus(str2)    // minus</span><br><span class=\"line\">//其他方法自己摸索</span><br></pre></td></tr></table></figure>\n<p>逻辑控制：单步顺序执行|if／else|switch-case|while|for，基本和Java操作一致，针对Groovy扩展介绍如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//switch-case</span><br><span class=\"line\">def x=1.23,result</span><br><span class=\"line\">switch(x)&#123;  //switch(x.class)</span><br><span class=\"line\">    case &quot;name&quot;:</span><br><span class=\"line\">        result = &quot;name&quot;</span><br><span class=\"line\">        break</span><br><span class=\"line\">    case Integer:</span><br><span class=\"line\">        result = &quot;Integer&quot;</span><br><span class=\"line\">        break</span><br><span class=\"line\">    case BigDecimal:</span><br><span class=\"line\">        result = &quot;BigDecimal&quot;</span><br><span class=\"line\">        break</span><br><span class=\"line\">    case [1,2,3]:       //列表</span><br><span class=\"line\">        result = &quot;list&quot;</span><br><span class=\"line\">        break</span><br><span class=\"line\">    case 1..10:         //范围</span><br><span class=\"line\">        result = &quot;range&quot;    </span><br><span class=\"line\">    default:</span><br><span class=\"line\">        result=&quot;defalut&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println result  //BigDecimal</span><br></pre></td></tr></table></figure>\n<p>for循环控制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对范围的for循环</span><br><span class=\"line\">def sum =0</span><br><span class=\"line\">for(i in 0..9)&#123;</span><br><span class=\"line\">    sum += i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println sum //45</span><br><span class=\"line\">//对list的for循环</span><br><span class=\"line\">for(i in [1,2,3,4,5])&#123;</span><br><span class=\"line\">    sum += i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//对map的for循环</span><br><span class=\"line\">for(i in [&quot;lili&quot;:1,&quot;lucy&quot;:2])&#123;</span><br><span class=\"line\">    println i.key + &quot;:&quot; +i.value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>闭包</li>\n</ol>\n<ul>\n<li>闭包就是一个代码块，所以需要通过{}括起来，def clouser = { println “Hello Groovy!”};clouser.call();clouser();  //推荐call()方式调用来区分是闭包</li>\n<li>def clouser = {String name -&gt; println “Hello Groovy ${name}!”};clouser.call(“a”);clouser(“b”);</li>\n<li>隐式参数it：def clouser = {println “Hello Groovy ${it}!”};clouser.call(“a”);clouser(“b”);</li>\n<li>闭包返回值：总是有返回值的，当闭包体没有明确返回值的时候，返回结果就是null</li>\n<li>如果最后一个参数是闭包，闭包可以写在外面</li>\n</ul>\n<p>闭包的使用</p>\n<ul>\n<li>与基本类型的结合使用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int fab1(int number)&#123;</span><br><span class=\"line\">    int result = 1</span><br><span class=\"line\">    1.upto(number,&#123;num -&gt; result *= num  &#125;)</span><br><span class=\"line\">    return  result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int fab2(int number)&#123;</span><br><span class=\"line\">    int result = 1</span><br><span class=\"line\">    number.downto(1) &#123;</span><br><span class=\"line\">        num -&gt; result *= num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return  result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int cal(int number)&#123;</span><br><span class=\"line\">    int result = 0</span><br><span class=\"line\">    number.times &#123;</span><br><span class=\"line\">        num -&gt; result += num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>与String结合使用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def str = &quot;the 2 and 3 is 5&quot;</span><br><span class=\"line\">str.each &#123;String tmp -&gt; print tmp.multiply(2)&#125;  //tthhee  22  aanndd  33  iiss  55</span><br><span class=\"line\">println str.find &#123;String tmp -&gt; tmp.isNumber()&#125; //2</span><br><span class=\"line\">println str.any &#123;String tmp -&gt; tmp.isNumber()&#125;  //true</span><br><span class=\"line\">println str.every &#123;String tmp -&gt; tmp.isNumber()&#125; //false</span><br><span class=\"line\">def list = str.collect &#123;it.toUpperCase()&#125;;println list.toListString()   //[T, H, E,  , 2,  , A, N, D,  , 3,  , I, S,  , 5]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>与数据结构结合使用</li>\n<li>与文件等结合使用</li>\n<li>闭包进阶：闭包关键字（this，owner，delegate）+闭包委托策略</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def scriptClosure = &#123;</span><br><span class=\"line\">    println &quot;scriptClosure this:&quot;+this          //代表闭包定义处的类</span><br><span class=\"line\">    println &quot;scriptClosure owner:&quot;+owner        //代表闭包定义处的类或对象</span><br><span class=\"line\">    println &quot;scriptClosure delegate:&quot;+delegate  //代表任意对象，默认值为owner</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scriptClosure.call()</span><br><span class=\"line\"></span><br><span class=\"line\">//scriptClosure this:Test@3c130745</span><br><span class=\"line\">//scriptClosure owner:Test@3c130745</span><br><span class=\"line\">//scriptClosure delegate:Test@3c130745</span><br><span class=\"line\"></span><br><span class=\"line\">class Person&#123;</span><br><span class=\"line\">    def static classClosure = &#123;</span><br><span class=\"line\">        println &quot;classClosure this:&quot;+this</span><br><span class=\"line\">        println &quot;classClosure owner:&quot;+owner</span><br><span class=\"line\">        println &quot;classClosure delegate:&quot;+delegate</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    def static say()&#123;</span><br><span class=\"line\">        def methodClosure = &#123;</span><br><span class=\"line\">            println &quot;methodClosure this:&quot;+this</span><br><span class=\"line\">            println &quot;methodClosure owner:&quot;+owner</span><br><span class=\"line\">            println &quot;methodClosure delegate:&quot;+delegate</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        methodClosure.call()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//静态方法调用</span><br><span class=\"line\">Person.classClosure()</span><br><span class=\"line\">Person.say()</span><br><span class=\"line\">//全部指向Person类,闭包指向离他最近的封闭类</span><br><span class=\"line\">//classClosure this:class Person</span><br><span class=\"line\">//classClosure owner:class Person</span><br><span class=\"line\">//classClosure delegate:class Person</span><br><span class=\"line\">//methodClosure this:class Person</span><br><span class=\"line\">//methodClosure owner:class Person</span><br><span class=\"line\">//methodClosure delegate:class Person</span><br><span class=\"line\"></span><br><span class=\"line\">//修改Person类中方法，取消static限定符调用</span><br><span class=\"line\">Person p = new Person()</span><br><span class=\"line\">p.classClosure()</span><br><span class=\"line\">p.say()</span><br><span class=\"line\">//全部指向Person类对象，闭包指向离他最近的封闭类对象</span><br><span class=\"line\">classClosure this:Person@a9cd3b1</span><br><span class=\"line\">classClosure owner:Person@a9cd3b1</span><br><span class=\"line\">classClosure delegate:Person@a9cd3b1</span><br><span class=\"line\">methodClosure this:Person@a9cd3b1</span><br><span class=\"line\">methodClosure owner:Person@a9cd3b1</span><br><span class=\"line\">methodClosure delegate:Person@a9cd3b1</span><br><span class=\"line\"></span><br><span class=\"line\">//嵌套闭包</span><br><span class=\"line\">def outerClosure = &#123;</span><br><span class=\"line\">    def innerClosure = &#123;</span><br><span class=\"line\">        println &quot;innerClosure this:&quot;+this</span><br><span class=\"line\">        println &quot;innerClosure owner:&quot;+owner</span><br><span class=\"line\">        println &quot;innerClosure delegate:&quot;+delegate</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    innerClosure.call()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">outerClosure.call()</span><br><span class=\"line\"></span><br><span class=\"line\">//innerClosure this:Test@3c130745</span><br><span class=\"line\">//innerClosure owner:Test$_run_closure7@9353778 //指向outerClosure</span><br><span class=\"line\">//innerClosure delegate:Test$_run_closure7@9353778</span><br></pre></td></tr></table></figure>\n<p>总结：this、owner、delegate的值在大多数情况都是一样的，在嵌套闭包中this的值和owner、delegate的值不一致，只有在给delegate赋值后owner和delegate的值才不一致</p>\n<p>闭包的委托策略</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student&#123;</span><br><span class=\"line\">    String name</span><br><span class=\"line\">    def sayName = &#123; &quot;My name is $&#123;name&#125;&quot;&#125;</span><br><span class=\"line\">    String toString()&#123;</span><br><span class=\"line\">        sayName.call()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Teacher&#123;</span><br><span class=\"line\">    String name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">def stu = new Student(name: &quot;XingFeng&quot;)</span><br><span class=\"line\">println stu.toString()</span><br><span class=\"line\"></span><br><span class=\"line\">def tea = new Teacher(name: &quot;Lily&quot;)</span><br><span class=\"line\">stu.sayName.delegate = tea</span><br><span class=\"line\">println stu.toString()</span><br><span class=\"line\">stu.sayName.resolveStrategy = Closure.DELEGATE_FIRST    //先从delegate中查找name属性，没有了再从owner中查找</span><br><span class=\"line\">println stu.toString()</span><br><span class=\"line\"></span><br><span class=\"line\">//My name is XingFeng</span><br><span class=\"line\">//My name is XingFeng</span><br><span class=\"line\">//My name is Lily</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>数据结构<br>\n列表的定义：def list = [1,2,3,4] 此为一个ArrayList；<br>\n数组的定义：def list = [1,2,3,4] as int[]; int[] arr=[1,2,3]<br>\n列表的排序：def list = [1,12,3,444]; Collections.sort(list);list.sort()</li>\n</ol>\n<p>map的定义：def colors=[“red”:1,“blue”:2];def colors=[red:1,blue:2]<br>\n索引map：println colors.red;println colors[“red”];<br>\n添加map：colors.yellow=3 //Groovy中map可以添加不同类型的数据：colors.complex =[a:1,b:2]<br>\n遍历map： list.each{def tmp,int index -&gt; …}  list.eachWithIndex{ key,value,index -&gt; …}<br>\n查找map： any  find  findAll every<br>\n分组map： groupBy{}<br>\n排序map：sort</p>\n<p>范围Range：定义 def range = 1…10;println range[0];range.contains(10);println range.from;println <a href=\"http://range.to\" target=\"_blank\" rel=\"noopener\">range.to</a><br>\nRange继承自java.util.List</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switch(number)&#123;</span><br><span class=\"line\">    case 0..&lt;60</span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>面向对象<br>\n类、接口等的定义和使用</li>\n</ol>\n<ul>\n<li>Groovy中默认类、方法等都是public类型</li>\n<li>Groovy中无论是直接调用属性还是通过get／set方法其实质都是通过getter／setter方法调用的属性，getter／setter方法默认自动继承</li>\n<li>接口实现需实现接口的所有方法；trait中可以有默认方法实现，没有实现的方法需添加abstract关键字，实现时只需实现abstract的方法即可</li>\n</ul>\n<blockquote>\n<p>元编程（Metaprogramming）是指某类计算机程序的编写，这类计算机程序编写或者操纵其他程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作。很多情况下与手工编写全部代码相比工作效率更高。编写元程序的语言称之为元语言，被操作的语言称之为目标语言。一门语言同时也是自身的元语言的能力称之为反射</p>\n</blockquote>\n<blockquote>\n<p>元编程通常有两种方式起作用。一种方式是通过应用程序接口（API）来暴露运行时引擎的内部信息。另一种方法是动态执行包含编程命令的字符串。因此，“程序能编写程序”。虽然两种方法都能用，但大多数方法主要靠其中一种。</p>\n</blockquote>\n<p><img src=\"/pub-images/Groovy%E5%85%83%E7%BC%96%E7%A8%8B.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Baby &#123;</span><br><span class=\"line\">    def invokeMethod(String name,Object args)&#123;</span><br><span class=\"line\">        return &quot;the method is $&#123;name&#125;,the args is $&#123;args&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    def methodMissing(String name,Object args)&#123;</span><br><span class=\"line\">        return &quot;the method  $&#123;name&#125; is missing&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">def baby = new Baby()</span><br><span class=\"line\">println baby.cry()</span><br></pre></td></tr></table></figure>\n<p>结合上图理解：Java中对象方法的调用没有上图否流程分支，在Groovy中对象方法调用有否分支调用，上例中通过注释invokeMethod、methodMissing方法查看运行效果，通过以下代码可动态添加对象属性和方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Baby.metaClass.sex = &quot;male&quot;</span><br><span class=\"line\">Baby.metaClass.play = &#123; ... &#125;</span><br><span class=\"line\">Baby.metaClass.static.play = &#123; ... &#125;    //静态方法</span><br></pre></td></tr></table></figure>\n<p>通过ExpandoMetaClass.enableGlobally()设置让动态添加方法全局启用</p>\n<ol start=\"6\">\n<li>Json操作</li>\n</ol>\n<ul>\n<li>对象转换成JSON字符串：JsonOutput.toJson()</li>\n<li>Json格式化打印：JsonOutput.prettyPrint(jsonObject)</li>\n<li>Json字符串转对象：def jsonSlurper = new JsonSlurper();jsonSlurper.parse()</li>\n</ul>\n<ol start=\"7\">\n<li>xml操作</li>\n</ol>\n<ul>\n<li>Java对xml的处理：DOM文档驱动处理方式+SAX事件驱动处理方式</li>\n<li>Groovy解析xml数据：def xmlSlurper = new XmlSlurper();def response = xmlSlurper.parse(xml); ／／response对象可以逐级访问节点，节点的属性添加@符号，如：response.books.@id，也可以通过闭包过滤信息</li>\n<li>Groovy深度遍历xml：可以通过逐级遍历解析后的response数据，也可通过response.depFirst().find{ …}遍历或 response.’<strong>’.find{ …}遍历（’</strong>'代表深度遍历）</li>\n<li>Groovy深度遍历xml：response.books.children().find{…}或response.books.’<em>’.find{…}（’</em>'代表深度遍历）</li>\n<li>Groovy创建xml数据：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">&lt;langs type=&apos;current&apos; count=&apos;3&apos;&gt;</span><br><span class=\"line\">    &lt;language flavor=&apos;static&apos; version=&apos;1.5&apos; /&gt;</span><br><span class=\"line\">    &lt;language flavor=&apos;public&apos; version=&apos;2.5&apos; /&gt;</span><br><span class=\"line\">&lt;/langs&gt;</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def sw = new StringWriter()</span><br><span class=\"line\">def xmlBuilder = new MarkupBuilder(sw)</span><br><span class=\"line\">xmlBuilder.langs(type:&apos;current&apos;,count:3)&#123;</span><br><span class=\"line\">    language(flavor:&apos;static&apos;,version:&apos;1.5&apos;)</span><br><span class=\"line\">    language(flavor:&apos;public&apos;,version:&apos;2.5&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println sw</span><br><span class=\"line\"></span><br><span class=\"line\">def langs = new Langs()</span><br><span class=\"line\">xmlBuilder.langs(type:langs.type,count:langs.count)&#123;</span><br><span class=\"line\">     langs.languages.each &#123;</span><br><span class=\"line\">         language(flavor:it.flavor,version:it.version)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println sw</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>文件操作</li>\n</ol>\n<ul>\n<li>Java文件处理：节点流（InputStream、OutputStream及其子类）+处理流（Reader、Writer及其子类），所有Java对文件的操作Groovy都支持</li>\n<li>遍历文件内容：def file = new File(“Test.iml”);file.eachLine { println it } 或 def text = file.getText() 或 def text = file.readLines() …</li>\n</ul>\n<h1 id=\"gradle\"><a class=\"markdownIt-Anchor\" href=\"#gradle\"></a> gradle</h1>\n<p>Gradle是一款最新的，功能强大的构建工具，使用程序代替传统的xml配置，项目构建更加灵活，有丰富的第三方库</p>\n<p>gradle组成：groovy核心语法+build script block+gradle api</p>\n<h2 id=\"gradle生命周期\"><a class=\"markdownIt-Anchor\" href=\"#gradle生命周期\"></a> gradle生命周期</h2>\n<p>执行./gradlew clean 观察执行过程，其生命周期包括：初始化、配置、执行<br>\n<img src=\"/pub-images/gradle%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" alt=\"image\"></p>\n<h2 id=\"gradle生命周期的监听\"><a class=\"markdownIt-Anchor\" href=\"#gradle生命周期的监听\"></a> gradle生命周期的监听</h2>\n<p>在项目的build.gradle中添加如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在配置阶段开始之前的回调</span><br><span class=\"line\">this.beforeEvaluate &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//配置阶段完成以后的回调</span><br><span class=\"line\">this.afterEvaluate &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//gradle生命周期执行完以后的回调</span><br><span class=\"line\">this.gradle.buildFinished &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"gradle-project\"><a class=\"markdownIt-Anchor\" href=\"#gradle-project\"></a> Gradle Project</h1>\n<p>./gradlew projects //查看工程Project数量，学会区分Project与module及根Project与子Project，每个Project必须有一个build.gradle文件</p>\n<p>Project API组成：</p>\n<ol>\n<li>Project相关API：如何管理父Project及如何操作子Project</li>\n</ol>\n<ul>\n<li>this.getAllProjects()，this.getSubProjects(),this.getParent()，在gradl文件中，对应allprojects、project、subprojects进行操作</li>\n</ul>\n<p>./gradlew projects可实现显示所有项目，自我实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def getProjects()&#123;</span><br><span class=\"line\">    println &quot;------------------------&quot;</span><br><span class=\"line\">    this.getAllprojects().eachWithIndex&#123; Project project, int index -&gt;</span><br><span class=\"line\">        if(index == 0)&#123;</span><br><span class=\"line\">            println &quot;Root project:$&#123;project.name&#125;&quot;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            println &quot;+--- project:$&#123;project.name&#125;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">this.getProjects()</span><br><span class=\"line\"></span><br><span class=\"line\">//------------------------</span><br><span class=\"line\">//Root project:MyApplication</span><br><span class=\"line\">//+--- project:app</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>\n<p>task相关API</p>\n</li>\n<li>\n<p>属性相关API</p>\n</li>\n</ol>\n<ul>\n<li>父Project的属性在子项目中会被继承，可直接使用</li>\n<li>可以在项目中通过common.gradle文件来定义扩展属性ext，然后在根Project中通过apply from:this.file(‘common.gradle’)引入后，按rootProject.ext.定义属性的方式使用</li>\n<li>在gradle.properties中定义key-value属性，如：isLoadTest=false，然后在settings.gradle中就可以编码控制是否加载Test项目</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(hasProperty(&apos;isLoadTest&apos;)? isLoadTest.toBoolean() : false)&#123;</span><br><span class=\"line\">    include &apos;:Test&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自定义属性的两种方式：ext方式+gradle.properties中定义<br>\n4. file相关API</p>\n<ul>\n<li>路径获取API：getRootdir()、getBuildDir()、getProjectDir()</li>\n<li>文件操作相关API：都是基于根工程操作的，不支持跨工程操作</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//文件／文件夹拷贝</span><br><span class=\"line\">copy &#123;</span><br><span class=\"line\">   from file(&apos;test.txt&apos;)</span><br><span class=\"line\">   into getRootProject().getBuildDir()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//文件树遍历</span><br><span class=\"line\">fileTree(&apos;build/&apos;)&#123;</span><br><span class=\"line\">    FileTree fileTree -&gt; fileTree.visit&#123; FileTreeElement element -&gt; ... &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>\n<p>gradle生命周期API</p>\n</li>\n<li>\n<p>其他API</p>\n</li>\n</ol>\n<ul>\n<li>依赖相关API</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        google()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath &apos;com.android.tools.build:gradle:3.2.1&apos; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//等价于以下操作：</span><br><span class=\"line\">buildscript &#123; ScriptHandler scriptHandler -&gt;</span><br><span class=\"line\">    scriptHandler.repositories &#123;  RepositoryHandler repositoryHandler -&gt;</span><br><span class=\"line\">        repositoryHandler.google()</span><br><span class=\"line\">        repositoryHandler.jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    scriptHandler.dependencies &#123;</span><br><span class=\"line\">        classpath &apos;com.android.tools.build:gradle:3.2.1&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>依赖传递：A模块依赖B模块，B模块依赖C模块，如果A模块也需要C模块功能，不需依赖使用，防止B修改后去掉C依赖而导致错误，可在A中引入C模块，通过exclude排除依赖，transitive禁止依赖传递</p>\n<p>占位编译provided：A.类库只在编译阶段起作用 B.父项目已引入类库，子项目直接使用父项目类库，但为了子项目编译通过使用占位编译</p>\n<ul>\n<li>外部命令执行</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task abc() &#123;</span><br><span class=\"line\">    doLast&#123;</span><br><span class=\"line\">        def command = &apos;ls&apos;</span><br><span class=\"line\">        exec&#123;</span><br><span class=\"line\">            try&#123;</span><br><span class=\"line\">                executable &apos;bash&apos;</span><br><span class=\"line\">                args &apos;-c&apos;,command</span><br><span class=\"line\">                println &apos;command is execute success.&apos;</span><br><span class=\"line\">            &#125;catch(GradleException ex)&#123;</span><br><span class=\"line\">                println &quot;Excepiotn....&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行：./gradlew abc</p>\n<h1 id=\"task\"><a class=\"markdownIt-Anchor\" href=\"#task\"></a> Task</h1>\n<ol>\n<li>Task定义及配置<br>\n直接通过task函数去创建</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task(&quot;abcd&quot;) &#123;</span><br><span class=\"line\">    doLast&#123;</span><br><span class=\"line\">        def command = &apos;ls -al&apos;</span><br><span class=\"line\">        exec&#123;</span><br><span class=\"line\">            try&#123;</span><br><span class=\"line\">                executable &apos;bash&apos;</span><br><span class=\"line\">                args &apos;-c&apos;,command</span><br><span class=\"line\">                println &apos;command is execute success.&apos;</span><br><span class=\"line\">            &#125;catch(GradleException ex)&#123;</span><br><span class=\"line\">                println &quot;Excepiotn....&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过TaskContainer创建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.tasks.create(&quot;aa&quot;)&#123;</span><br><span class=\"line\">    println &apos;Hello task&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Task创建之后可在开发工具的gradle插件重查找到task，如果没有设置group，则默认在other分组中，更多配置可通过task源码查看<br>\n2. Task执行详解<br>\ndoFirst/doLast执行阶段执行，否则在配置阶段执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task aa&#123;</span><br><span class=\"line\">    doFirst&#123;</span><br><span class=\"line\">        println &apos;Hello  2&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">task.doFirst&#123;</span><br><span class=\"line\">    println &apos;Hello  1&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Hello  1</span><br><span class=\"line\">//Hello  2</span><br></pre></td></tr></table></figure>\n<p>编写一个统计build时长的task<br>\napp.gradle中编写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def startBuilderTime,endBuilderTime</span><br><span class=\"line\">this.afterEvaluate &#123; Project project -&gt;</span><br><span class=\"line\">    def preBuildTask = this.tasks.getByName(&quot;preBuild&quot;)</span><br><span class=\"line\">    preBuildTask.doFirst &#123;</span><br><span class=\"line\">        startBuilderTime = System.currentTimeMillis()</span><br><span class=\"line\">        println &apos;------开始计时...&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    def buildTask = this.tasks.getByName(&quot;build&quot;)</span><br><span class=\"line\">    buildTask.doLast &#123;</span><br><span class=\"line\">        endBuilderTime = System.currentTimeMillis()</span><br><span class=\"line\">        println &apos;------计时结束,耗时：&apos;+(endBuilderTime - startBuilderTime)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>./gradlew build执行查看结果<br>\n3. Task的依赖及执行顺序</p>\n<ul>\n<li>dependsOn强依赖方式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task t1() &#123; doLast&#123;println &apos;task t1&apos;&#125; &#125;</span><br><span class=\"line\">task t2() &lt;&lt; &#123; println &apos;task t2&apos; &#125;      //此处&quot;&lt;&lt;&quot;等同于doLast</span><br><span class=\"line\">task t3(dependsOn:[t1,t2]) &#123; doLast&#123;println &apos;task t3&apos;&#125; &#125;</span><br><span class=\"line\">task t4() &#123; dependsOn this.tasks.findAll &#123; task -&gt; return task.name.equals(&quot;t2&quot;)&#125;;doLast&#123;println &apos;task t4&apos;&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//./gradlew t3: (t1和t2执行顺序是随机的)</span><br><span class=\"line\">//task t1</span><br><span class=\"line\">//task t2</span><br><span class=\"line\">//task t3</span><br><span class=\"line\"></span><br><span class=\"line\">//./gradlew t4</span><br><span class=\"line\">//task t2</span><br><span class=\"line\">//task t4</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过Task输入输出指定<br>\nTaskInputs:参数为任意对象及文件、文件夹；TaskOutputs:只输出文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ext&#123;</span><br><span class=\"line\">    println &apos;------配置中...&apos;</span><br><span class=\"line\">    versionCode = 100</span><br><span class=\"line\">    versionName = &quot;V2.0.0&quot;</span><br><span class=\"line\">    versionInfo = &quot;第一个版本&quot;</span><br><span class=\"line\">    destFile = file(&quot;release.xml&quot;)</span><br><span class=\"line\">    if(destFile != null &amp;&amp; !destFile.exists())&#123;</span><br><span class=\"line\">        destFile.createNewFile()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class VersionMsg&#123;</span><br><span class=\"line\">    Integer versionCode</span><br><span class=\"line\">    String versionName</span><br><span class=\"line\">    String versionInfo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task writerTask&#123;</span><br><span class=\"line\">    //为task指定输入</span><br><span class=\"line\">    inputs.property(&quot;versionCode&quot;,this.versionCode)</span><br><span class=\"line\">    inputs.property(&quot;versionName&quot;,this.versionName)</span><br><span class=\"line\">    inputs.property(&quot;versionInfo&quot;,this.versionInfo)</span><br><span class=\"line\">    //为task指定输出</span><br><span class=\"line\">    outputs.file destFile</span><br><span class=\"line\"></span><br><span class=\"line\">    doLast&#123;</span><br><span class=\"line\">        def data = inputs.getProperties()</span><br><span class=\"line\">        File file = outputs.getFiles().getSingleFile()</span><br><span class=\"line\">        def versionMsg = new VersionMsg(data)</span><br><span class=\"line\">        def sw = new StringWriter()</span><br><span class=\"line\">        def xmlBuilder = new groovy.xml.MarkupBuilder(sw)</span><br><span class=\"line\">        if(file.text != null &amp;&amp; file.text.size() &lt;=0)&#123;</span><br><span class=\"line\">            xmlBuilder.releases&#123;</span><br><span class=\"line\">                release&#123;</span><br><span class=\"line\">                    versionCode(versionMsg.versionCode)</span><br><span class=\"line\">                    versionName(versionMsg.versionName)</span><br><span class=\"line\">                    versionInfo(versionMsg.versionInfo)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            file.withWriter &#123; writer -&gt;</span><br><span class=\"line\">                writer.append(sw.toString())</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            def lines = file.readLines()</span><br><span class=\"line\">            def lengths = lines.size() - 1</span><br><span class=\"line\">            file.withWriter &#123; writer -&gt;</span><br><span class=\"line\">                lines.eachWithIndex&#123; String line, int index -&gt;</span><br><span class=\"line\">                    if(index != lengths)&#123;</span><br><span class=\"line\">                        writer.append(line +&quot;\\r\\n&quot;)</span><br><span class=\"line\">                    &#125;else if(index == lengths)&#123;</span><br><span class=\"line\">                        writer.append(&quot;\\r\\n&quot; + sw.toString()+&quot;\\r\\n&quot;)</span><br><span class=\"line\">                        writer.append(lines.get(lengths))</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task readTask&#123;</span><br><span class=\"line\">    inputs.file destFile</span><br><span class=\"line\">    doLast&#123;</span><br><span class=\"line\">        def file = inputs.files.singleFile</span><br><span class=\"line\">        println file.text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task taskTest&#123;</span><br><span class=\"line\">    dependsOn readTask,writerTask</span><br><span class=\"line\">    doLast&#123;</span><br><span class=\"line\">        println &quot;输入输出任务结束&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>destFile作为writerTask输出结果输入到readTask</p>\n<ul>\n<li>通过API指定执行顺序：mustRunAfter／shouldRunAfter</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task t1() &#123; doLast&#123;println &apos;task t1&apos;&#125; &#125;</span><br><span class=\"line\">task t2() &#123; mustRunAfter t1 doLast &#123;println &apos;task t2&apos;&#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>通过./gradlew t2 t1查看执行结果<br>\n4. Task类型<br>\n详见官方文档：<a href=\"https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Delete.html#org.gradle.api.tasks.Delete\" target=\"_blank\" rel=\"noopener\">https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Delete.html#org.gradle.api.tasks.Delete</a><br>\n5. 构建到生命周期</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.project.afterEvaluate &#123;project -&gt;</span><br><span class=\"line\">    println &quot;开始挂接...&quot;</span><br><span class=\"line\">    def buildTask = project.tasks.getByName(&quot;build&quot;)</span><br><span class=\"line\">    if(buildTask == null) throw GradleException(&quot;build Task not found&quot;)</span><br><span class=\"line\">    buildTask.doLast &#123;</span><br><span class=\"line\">        writerTask.execute()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"gradle其他模块\"><a class=\"markdownIt-Anchor\" href=\"#gradle其他模块\"></a> Gradle其他模块</h1>\n<ol>\n<li>Settings类：对应Settings.gradle</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(hasProperty(&apos;isLoadTest&apos;)? isLoadTest.toBoolean() : false)&#123;</span><br><span class=\"line\">    include &apos;:Test&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>SourceSet类:AndroidSourceSet/JavaSourceSet,决定了代码、资源、第三方库要存放的位置</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改.so等jnilibs的存放位置</span><br><span class=\"line\">android&#123;</span><br><span class=\"line\">    sourceSets &#123;</span><br><span class=\"line\">        main&#123;</span><br><span class=\"line\">            jniLibs.srcDirs = [&apos;libs&apos;]</span><br><span class=\"line\">            res.srcDirs = [&apos;src/main/res&apos;,&apos;src/main/res-ad&apos;]    //对res文件夹内容进行分类，但是只能在Project视图查看到效果</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Gradle的Plugin</li>\n</ol>\n<ul>\n<li>Gradle没有提供创建自定义Gradle插件工程的模板，需要开发者手动创建Gradle插件工程</li>\n<li>使用Groovy开发，其Gradle插件工程必须遵循如下的目录结构：<br>\ngroovy代码必须位于xxxProject/src/main/groovy/目录下<br>\n提供插件属性声明文件，该文件必须位于xxxProject/src/main/resources/META-INF/gradle-plugins/xxx.properties</li>\n</ul>\n<ol start=\"4\">\n<li>android插件对gradle的扩展<br>\nandroid具体能配置那些属性，可查看源码通过BaseExtension查看</li>\n</ol>\n<p>gradle插件： <a href=\"https://avatarqing.gitbooks.io/gradlepluginuserguidechineseverision/content/introduction/README.html\" target=\"_blank\" rel=\"noopener\">https://avatarqing.gitbooks.io/gradlepluginuserguidechineseverision/content/introduction/README.html</a></p>\n<p>varints变体</p>\n"}],"PostAsset":[{"_id":"source/_posts/2018-10-05-MySQL安装-Windows/屏幕快照 2018-09-16 下午4.08.12.png","post":"cjs3ytrp60005ck8h339efl4k","slug":"屏幕快照 2018-09-16 下午4.08.12.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-10-05-MySQL安装-Windows/屏幕快照 2018-09-30 上午9.06.54.png","post":"cjs3ytrp60005ck8h339efl4k","slug":"屏幕快照 2018-09-30 上午9.06.54.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjs3ytrp00002ck8h7f0raj9g","category_id":"cjs3ytrp80007ck8h7wmoxclv","_id":"cjs3ytrpj000hck8hge3py3ku"},{"post_id":"cjs3ytrp60005ck8h339efl4k","category_id":"cjs3ytrpf000dck8h1g9tnzfu","_id":"cjs3ytrpm000mck8h8j6j4q14"},{"post_id":"cjs3ytrp90008ck8hgt5xy11o","category_id":"cjs3ytrpk000ick8hm9x1qrop","_id":"cjs3ytrq1000tck8h7qmqlc3h"},{"post_id":"cjs3ytrpb0009ck8h9yw0zefs","category_id":"cjs3ytrpp000ock8hvifxo71m","_id":"cjs3ytrq5000zck8h8fbaogpr"},{"post_id":"cjs3ytrpd000cck8h384322ku","category_id":"cjs3ytrpp000ock8hvifxo71m","_id":"cjs3ytrq80016ck8h2dc36juj"},{"post_id":"cjs3ytrpi000gck8hm79qbvq8","category_id":"cjs3ytrpk000ick8hm9x1qrop","_id":"cjs3ytrqa001ack8he341me2m"},{"post_id":"cjs3ytrpk000jck8hai3ioeye","category_id":"cjs3ytrq80015ck8hdss3w35x","_id":"cjs3ytrqd001ick8hlem2u38b"},{"post_id":"cjs3ytrpp000pck8hophkm8u5","category_id":"cjs3ytrqb001cck8hhk7ov7vo","_id":"cjs3ytrqg001ock8hrp34vj6h"},{"post_id":"cjs3ytrpu000sck8hlt8lxwx1","category_id":"cjs3ytrqd001jck8h30fo2u82","_id":"cjs3ytrqh001uck8h6pmbuvfb"},{"post_id":"cjs3ytrq1000vck8heiznousp","category_id":"cjs3ytrqb001cck8hhk7ov7vo","_id":"cjs3ytrqi001yck8hj5bc97jp"},{"post_id":"cjs3ytrq4000wck8h143fk8b4","category_id":"cjs3ytrqd001jck8h30fo2u82","_id":"cjs3ytrqj0021ck8hyktr4qqw"},{"post_id":"cjs3ytrq50011ck8hmt4q0ie3","category_id":"cjs3ytrqd001jck8h30fo2u82","_id":"cjs3ytrqj0025ck8hgytolxfe"},{"post_id":"cjs3ytrq60013ck8ha2g53ha6","category_id":"cjs3ytrqd001jck8h30fo2u82","_id":"cjs3ytrqk002ack8h2j94ms5w"},{"post_id":"cjs3ytrq80017ck8h2gkutufy","category_id":"cjs3ytrqd001jck8h30fo2u82","_id":"cjs3ytrql002cck8hv9gwbeom"},{"post_id":"cjs3ytrq90018ck8hu026gufq","category_id":"cjs3ytrqk0029ck8h5owwfn6u","_id":"cjs3ytrqm002hck8hpri6s32t"},{"post_id":"cjs3ytrqa001bck8ht0wqu6rr","category_id":"cjs3ytrqd001jck8h30fo2u82","_id":"cjs3ytrqn002lck8hd4l9q78c"},{"post_id":"cjs3ytrqb001eck8h1ea2cnwh","category_id":"cjs3ytrqm002gck8hdywt9rq8","_id":"cjs3ytrqn002ock8h6fog1e04"},{"post_id":"cjs3ytrqc001hck8hqgwb822u","category_id":"cjs3ytrqn002mck8ho65uuwwr","_id":"cjs3ytrqo002sck8hddcv7559"},{"post_id":"cjs3ytrqd001lck8hqxcadm8a","category_id":"cjs3ytrqn002pck8hreq2ukbl","_id":"cjs3ytrqp002wck8hcboy4ytp"},{"post_id":"cjs3ytrvp003kck8hxzr1smh5","category_id":"cjs3ytrqd001jck8h30fo2u82","_id":"cjs3ytrvw003rck8hsqy2i1fx"},{"post_id":"cjs3ytrvs003mck8hwlnkw2xq","category_id":"cjs3ytrqd001jck8h30fo2u82","_id":"cjs3ytrvx003sck8hutwiow1p"},{"post_id":"cjs3ytrvv003pck8h37qbcaix","category_id":"cjs3ytrpf000dck8h1g9tnzfu","_id":"cjs3ytrvx003uck8hxezu97bb"},{"post_id":"cjs3ytrx8003yck8hldji874i","category_id":"cjs3ytrpf000dck8h1g9tnzfu","_id":"cjs3ytrxd0043ck8h6wen9z5m"},{"post_id":"cjs3ytrx9003zck8h4s6vn9z0","category_id":"cjs3ytrqk0029ck8h5owwfn6u","_id":"cjs3ytrxf0045ck8hbx9bu7bd"},{"post_id":"cjs3ytrxa0041ck8hvteanw3e","category_id":"cjs3ytrqk0029ck8h5owwfn6u","_id":"cjs3ytrxh0049ck8holq9k14r"},{"post_id":"cjs3ytrxc0042ck8hreyhivgd","category_id":"cjs3ytrqk0029ck8h5owwfn6u","_id":"cjs3ytrxu004bck8hzxrak6qz"},{"post_id":"cjs3ytrxd0044ck8hyehjmlwu","category_id":"cjs3ytrqk0029ck8h5owwfn6u","_id":"cjs3ytrxv004eck8h99jlwy60"},{"post_id":"cjs3ytrxg0048ck8hy2h57zl2","category_id":"cjs3ytrqk0029ck8h5owwfn6u","_id":"cjs3ytrxw004gck8hgnnk0b5b"},{"post_id":"cjs3ytrxs004ack8he19xge2j","category_id":"cjs3ytrpk000ick8hm9x1qrop","_id":"cjs3ytrxy004jck8h63etvzkm"},{"post_id":"cjs3ytrxu004dck8hgn6rmfyf","category_id":"cjs3ytrqk0029ck8h5owwfn6u","_id":"cjs3ytrxz004mck8hb8ie8nmn"},{"post_id":"cjs3ytrxx004ick8hb8j6v80p","category_id":"cjs3ytrpf000dck8h1g9tnzfu","_id":"cjs3ytry2004sck8hns16q0dg"},{"post_id":"cjs3ytry0004pck8hqh5litcd","category_id":"cjs3ytry2004vck8h8yp6tv38","_id":"cjs3ytry80055ck8h1ckig3po"},{"post_id":"cjs3ytryd005ack8h3123zxde","category_id":"cjs3ytrp80007ck8h7wmoxclv","_id":"cjs3ytryi005gck8hrjzod2hx"},{"post_id":"cjs3yts0t006ock8hd0gcxwax","category_id":"cjs3yts0v006qck8hz7h6jmqw","_id":"cjs3yts0w006uck8h2c34jclv"}],"PostTag":[{"post_id":"cjs3ytrou0000ck8h3507kn69","tag_id":"cjs3ytrp40004ck8hsbpq53as","_id":"cjs3ytrpd000bck8hsnh35asn"},{"post_id":"cjs3ytrp00002ck8h7f0raj9g","tag_id":"cjs3ytrpc000ack8htvqpijn2","_id":"cjs3ytrpm000nck8hw5btvc9r"},{"post_id":"cjs3ytrp00002ck8h7f0raj9g","tag_id":"cjs3ytrpi000fck8hqbhs93m1","_id":"cjs3ytrpq000qck8hyxblc1c2"},{"post_id":"cjs3ytrp60005ck8h339efl4k","tag_id":"cjs3ytrpl000kck8hr9io4ymf","_id":"cjs3ytrq50010ck8hbfp8u8i2"},{"post_id":"cjs3ytrp60005ck8h339efl4k","tag_id":"cjs3ytrpu000rck8hpz8bqrha","_id":"cjs3ytrq60012ck8hrbto7cgr"},{"post_id":"cjs3ytrp90008ck8hgt5xy11o","tag_id":"cjs3ytrq4000xck8hnfckcieq","_id":"cjs3ytrqb001dck8hwknrzwrg"},{"post_id":"cjs3ytrp90008ck8hgt5xy11o","tag_id":"cjs3ytrq70014ck8h7mvff5xp","_id":"cjs3ytrqc001fck8hgaleukou"},{"post_id":"cjs3ytrpb0009ck8h9yw0zefs","tag_id":"cjs3ytrqa0019ck8htokpk355","_id":"cjs3ytrqd001kck8hyn16vsaa"},{"post_id":"cjs3ytrpd000cck8h384322ku","tag_id":"cjs3ytrqc001gck8hpd8hs0i2","_id":"cjs3ytrqg001qck8hlhqj2ssi"},{"post_id":"cjs3ytrpi000gck8hm79qbvq8","tag_id":"cjs3ytrpc000ack8htvqpijn2","_id":"cjs3ytrqi001vck8hysh5m3o8"},{"post_id":"cjs3ytrpi000gck8hm79qbvq8","tag_id":"cjs3ytrqf001nck8h67pepq78","_id":"cjs3ytrqi001wck8hcl1xe14x"},{"post_id":"cjs3ytrpk000jck8hai3ioeye","tag_id":"cjs3ytrqh001sck8has6e16dg","_id":"cjs3ytrqj0023ck8h5cqj6553"},{"post_id":"cjs3ytrpk000jck8hai3ioeye","tag_id":"cjs3ytrqi001zck8hgq09nm1w","_id":"cjs3ytrqk0026ck8h4p19tym5"},{"post_id":"cjs3ytrpp000pck8hophkm8u5","tag_id":"cjs3ytrqj0022ck8hp9toxg9e","_id":"cjs3ytrqk0028ck8h0zswjb16"},{"post_id":"cjs3ytrpu000sck8hlt8lxwx1","tag_id":"cjs3ytrqk0027ck8h4qc8gnyv","_id":"cjs3ytrqm002fck8hyrwpubej"},{"post_id":"cjs3ytrpu000sck8hlt8lxwx1","tag_id":"cjs3ytrqk002bck8hdz43pt15","_id":"cjs3ytrqm002ick8h5c836hvw"},{"post_id":"cjs3ytrq1000vck8heiznousp","tag_id":"cjs3ytrqj0022ck8hp9toxg9e","_id":"cjs3ytrqn002kck8ha4u3dlqg"},{"post_id":"cjs3ytrq4000wck8h143fk8b4","tag_id":"cjs3ytrqk0027ck8h4qc8gnyv","_id":"cjs3ytrqo002rck8hwt9d8tji"},{"post_id":"cjs3ytrq4000wck8h143fk8b4","tag_id":"cjs3ytrqn002nck8hj1dhsqd5","_id":"cjs3ytrqo002tck8hw30jkdpb"},{"post_id":"cjs3ytrq50011ck8hmt4q0ie3","tag_id":"cjs3ytrqk0027ck8h4qc8gnyv","_id":"cjs3ytrqp002vck8hlufuqi6r"},{"post_id":"cjs3ytrq60013ck8ha2g53ha6","tag_id":"cjs3ytrqk0027ck8h4qc8gnyv","_id":"cjs3ytrqp002zck8h07pxxl6q"},{"post_id":"cjs3ytrq60013ck8ha2g53ha6","tag_id":"cjs3ytrqp002xck8hnu244o0s","_id":"cjs3ytrqq0030ck8h6mzu72vc"},{"post_id":"cjs3ytrq80017ck8h2gkutufy","tag_id":"cjs3ytrqk0027ck8h4qc8gnyv","_id":"cjs3ytrqq0032ck8hc301r11j"},{"post_id":"cjs3ytrq90018ck8hu026gufq","tag_id":"cjs3ytrqq0031ck8hvjo0nnt2","_id":"cjs3ytrqr0034ck8hdjhnxcqq"},{"post_id":"cjs3ytrqa001bck8ht0wqu6rr","tag_id":"cjs3ytrqk0027ck8h4qc8gnyv","_id":"cjs3ytrqr0037ck8hd7bcn0g8"},{"post_id":"cjs3ytrqa001bck8ht0wqu6rr","tag_id":"cjs3ytrqr0035ck8h4uoy75b8","_id":"cjs3ytrqr0038ck8hlb0pwm53"},{"post_id":"cjs3ytrqb001eck8h1ea2cnwh","tag_id":"cjs3ytrqr0036ck8h0g9tikd2","_id":"cjs3ytrqs003ack8ht1dyxqqq"},{"post_id":"cjs3ytrqc001hck8hqgwb822u","tag_id":"cjs3ytrqr0039ck8hjfj6u96r","_id":"cjs3ytrqs003eck8h19c0dzk9"},{"post_id":"cjs3ytrqc001hck8hqgwb822u","tag_id":"cjs3ytrqs003bck8h6jhnn7rc","_id":"cjs3ytrqs003fck8hncemkkne"},{"post_id":"cjs3ytrqc001hck8hqgwb822u","tag_id":"cjs3ytrqs003cck8h8kw4561l","_id":"cjs3ytrqt003hck8ha707691h"},{"post_id":"cjs3ytrqd001lck8hqxcadm8a","tag_id":"cjs3ytrqs003dck8h8qauk3ln","_id":"cjs3ytrqt003ick8h4r3ngd2e"},{"post_id":"cjs3ytrqf001mck8hifp5nuh4","tag_id":"cjs3ytrqs003gck8hntwdi6jv","_id":"cjs3ytrqt003jck8h4up8wwtx"},{"post_id":"cjs3ytrvp003kck8hxzr1smh5","tag_id":"cjs3ytrqk0027ck8h4qc8gnyv","_id":"cjs3ytrvu003ock8h5guqo51d"},{"post_id":"cjs3ytrvs003mck8hwlnkw2xq","tag_id":"cjs3ytrqk0027ck8h4qc8gnyv","_id":"cjs3ytrvx003vck8hhmegj0bt"},{"post_id":"cjs3ytrvs003mck8hwlnkw2xq","tag_id":"cjs3ytrvw003qck8hm2cxf9hj","_id":"cjs3ytrvy003wck8hsf9vdhuz"},{"post_id":"cjs3ytrvv003pck8h37qbcaix","tag_id":"cjs3ytrvx003tck8hz1qazueb","_id":"cjs3ytrvy003xck8hv6j563ut"},{"post_id":"cjs3ytrx8003yck8hldji874i","tag_id":"cjs3ytrxa0040ck8h9il6ewsa","_id":"cjs3ytrxf0047ck8hcfnzzoik"},{"post_id":"cjs3ytrx9003zck8h4s6vn9z0","tag_id":"cjs3ytrxf0046ck8hlnja7u39","_id":"cjs3ytrxy004kck8h95k565ik"},{"post_id":"cjs3ytrx9003zck8h4s6vn9z0","tag_id":"cjs3ytrxu004cck8h4pfd1xxq","_id":"cjs3ytrxz004nck8h8ndbhe6e"},{"post_id":"cjs3ytrxa0041ck8hvteanw3e","tag_id":"cjs3ytrxf0046ck8hlnja7u39","_id":"cjs3ytry1004qck8hunv4hy5l"},{"post_id":"cjs3ytrxa0041ck8hvteanw3e","tag_id":"cjs3ytrqq0031ck8hvjo0nnt2","_id":"cjs3ytry2004tck8h2mx7a1t0"},{"post_id":"cjs3ytrxc0042ck8hreyhivgd","tag_id":"cjs3ytrxf0046ck8hlnja7u39","_id":"cjs3ytry60050ck8hbkwpn9ri"},{"post_id":"cjs3ytrxc0042ck8hreyhivgd","tag_id":"cjs3ytry2004uck8hcx78s9lo","_id":"cjs3ytry70052ck8h24ueexcm"},{"post_id":"cjs3ytrxd0044ck8hyehjmlwu","tag_id":"cjs3ytrxf0046ck8hlnja7u39","_id":"cjs3ytryc0059ck8hd01t3irm"},{"post_id":"cjs3ytrxd0044ck8hyehjmlwu","tag_id":"cjs3ytry70053ck8hrz99ozas","_id":"cjs3ytrye005bck8hoxsj4gut"},{"post_id":"cjs3ytrxg0048ck8hy2h57zl2","tag_id":"cjs3ytrxf0046ck8hlnja7u39","_id":"cjs3ytryh005fck8hnwawl1bv"},{"post_id":"cjs3ytrxg0048ck8hy2h57zl2","tag_id":"cjs3ytryb0058ck8hsiwbsp71","_id":"cjs3ytryi005hck8hyecg5ch5"},{"post_id":"cjs3ytrxs004ack8he19xge2j","tag_id":"cjs3ytryf005dck8h53tls0ht","_id":"cjs3ytryj005kck8h21y0a6cr"},{"post_id":"cjs3ytrxs004ack8he19xge2j","tag_id":"cjs3ytryi005ick8h4s74f34c","_id":"cjs3ytryj005lck8hz4rzdjgp"},{"post_id":"cjs3ytrxu004dck8hgn6rmfyf","tag_id":"cjs3ytrxf0046ck8hlnja7u39","_id":"cjs3ytryj005nck8hkfsstpun"},{"post_id":"cjs3ytrxu004dck8hgn6rmfyf","tag_id":"cjs3ytryi005jck8hdzx0qtl3","_id":"cjs3ytryj005ock8he33rzf7c"},{"post_id":"cjs3ytrxv004fck8hj9ogtwn8","tag_id":"cjs3ytryj005mck8h35kuv6zs","_id":"cjs3ytryj005qck8h1mrs89oj"},{"post_id":"cjs3ytrxx004ick8hb8j6v80p","tag_id":"cjs3ytryj005pck8haicjutbg","_id":"cjs3ytryk005sck8hius1y9ux"},{"post_id":"cjs3ytrxy004lck8hpuun93sz","tag_id":"cjs3ytryk005rck8h1bhi2oiu","_id":"cjs3ytryk005vck8h3o90e8j6"},{"post_id":"cjs3ytrxy004lck8hpuun93sz","tag_id":"cjs3ytryk005tck8hzb14b7ib","_id":"cjs3ytryk005wck8hy0jpmxqu"},{"post_id":"cjs3ytry0004pck8hqh5litcd","tag_id":"cjs3ytryj005mck8h35kuv6zs","_id":"cjs3ytryl005yck8hozkjvnom"},{"post_id":"cjs3ytry1004rck8h3t8zdn54","tag_id":"cjs3ytryj005mck8h35kuv6zs","_id":"cjs3ytryl0060ck8hc4rcqei9"},{"post_id":"cjs3ytry3004wck8h15dro8ip","tag_id":"cjs3ytryj005mck8h35kuv6zs","_id":"cjs3ytrym0062ck8h3z64lypz"},{"post_id":"cjs3ytry3004xck8hpfokhpry","tag_id":"cjs3ytryj005mck8h35kuv6zs","_id":"cjs3ytrym0064ck8h8c62gve0"},{"post_id":"cjs3ytry5004zck8hntr2x4yu","tag_id":"cjs3ytryj005mck8h35kuv6zs","_id":"cjs3ytrym0066ck8h5gk9c69b"},{"post_id":"cjs3ytry60051ck8hpgbc8f0j","tag_id":"cjs3ytryj005mck8h35kuv6zs","_id":"cjs3ytryn0068ck8habdjj63a"},{"post_id":"cjs3ytry70054ck8htaz1c02a","tag_id":"cjs3ytryj005mck8h35kuv6zs","_id":"cjs3ytryn006ack8h70eoeizu"},{"post_id":"cjs3ytry80056ck8h1kzfcfcy","tag_id":"cjs3ytryj005mck8h35kuv6zs","_id":"cjs3ytryo006cck8hkgq18x1d"},{"post_id":"cjs3ytry90057ck8ho38pv715","tag_id":"cjs3ytryj005mck8h35kuv6zs","_id":"cjs3ytryo006eck8hya0tgc0a"},{"post_id":"cjs3ytryd005ack8h3123zxde","tag_id":"cjs3ytryo006dck8hw8179x71","_id":"cjs3ytryo006hck8hatcfr8j3"},{"post_id":"cjs3ytryd005ack8h3123zxde","tag_id":"cjs3ytryo006fck8hps61099z","_id":"cjs3ytryp006ick8hm9qjrbel"},{"post_id":"cjs3ytrye005cck8hc39rva40","tag_id":"cjs3ytryo006dck8hw8179x71","_id":"cjs3ytryp006lck8hk4sbisoa"},{"post_id":"cjs3ytrye005cck8hc39rva40","tag_id":"cjs3ytryo006fck8hps61099z","_id":"cjs3ytryp006mck8htigon6cg"},{"post_id":"cjs3ytryg005eck8h3gi70kl8","tag_id":"cjs3ytryj005mck8h35kuv6zs","_id":"cjs3ytryp006nck8hpdkp6vho"},{"post_id":"cjs3yts0u006pck8hvcgscd31","tag_id":"cjs3ytryk005rck8h1bhi2oiu","_id":"cjs3yts0v006sck8hn037iluk"},{"post_id":"cjs3yts0t006ock8hd0gcxwax","tag_id":"cjs3yts0v006rck8hiab80g16","_id":"cjs3yts0w006tck8hlspu30ma"}],"Tag":[{"name":"编写工具","_id":"cjs3ytrp40004ck8hsbpq53as"},{"name":"git","_id":"cjs3ytrpc000ack8htvqpijn2"},{"name":"github pages","_id":"cjs3ytrpi000fck8hqbhs93m1"},{"name":"MySQL","_id":"cjs3ytrpl000kck8hr9io4ymf"},{"name":"数据库","_id":"cjs3ytrpu000rck8hpz8bqrha"},{"name":"ngrok","_id":"cjs3ytrq4000xck8hnfckcieq"},{"name":"网络工具","_id":"cjs3ytrq70014ck8h7mvff5xp"},{"name":"微信","_id":"cjs3ytrqa0019ck8htokpk355"},{"name":"微信公众平台","_id":"cjs3ytrqc001gck8hpd8hs0i2"},{"name":"windows","_id":"cjs3ytrqf001nck8h67pepq78"},{"name":"react","_id":"cjs3ytrqh001sck8has6e16dg"},{"name":"Antd","_id":"cjs3ytrqi001zck8hgq09nm1w"},{"name":"前端规范","_id":"cjs3ytrqj0022ck8hp9toxg9e"},{"name":"React","_id":"cjs3ytrqk0027ck8h4qc8gnyv"},{"name":"React组件库","_id":"cjs3ytrqk002bck8hdz43pt15"},{"name":"React-Router","_id":"cjs3ytrqn002nck8hj1dhsqd5"},{"name":"React组件","_id":"cjs3ytrqp002xck8hnu244o0s"},{"name":"C#","_id":"cjs3ytrqq0031ck8hvjo0nnt2"},{"name":"redux组件库","_id":"cjs3ytrqr0035ck8h4uoy75b8"},{"name":"Kotlin入门","_id":"cjs3ytrqr0036ck8h0g9tikd2"},{"name":"Spring","_id":"cjs3ytrqr0039ck8hjfj6u96r"},{"name":"Spring Boot","_id":"cjs3ytrqs003bck8h6jhnn7rc"},{"name":"JavaWeb","_id":"cjs3ytrqs003cck8h8kw4561l"},{"name":"MyBatis","_id":"cjs3ytrqs003dck8h8qauk3ln"},{"name":"Java","_id":"cjs3ytrqs003gck8hntwdi6jv"},{"name":"Redux","_id":"cjs3ytrvw003qck8hm2cxf9hj"},{"name":"Oracle","_id":"cjs3ytrvx003tck8hz1qazueb"},{"name":"MongoDB","_id":"cjs3ytrxa0040ck8h9il6ewsa"},{"name":"ASP.NET","_id":"cjs3ytrxf0046ck8hlnja7u39"},{"name":"MVC","_id":"cjs3ytrxu004cck8h4pfd1xxq"},{"name":"WebForms","_id":"cjs3ytry2004uck8hcx78s9lo"},{"name":"Razor","_id":"cjs3ytry70053ck8hrz99ozas"},{"name":"WebPages","_id":"cjs3ytryb0058ck8hsiwbsp71"},{"name":"工具","_id":"cjs3ytryf005dck8h53tls0ht"},{"name":"版本控制","_id":"cjs3ytryi005ick8h4s74f34c"},{"name":"HTML表单元素","_id":"cjs3ytryi005jck8hdzx0qtl3"},{"name":"环境搭建","_id":"cjs3ytryj005mck8h35kuv6zs"},{"name":"持续集成","_id":"cjs3ytryj005pck8haicjutbg"},{"name":"andrioid","_id":"cjs3ytryk005rck8h1bhi2oiu"},{"name":"RxJava","_id":"cjs3ytryk005tck8hzb14b7ib"},{"name":"node","_id":"cjs3ytryo006dck8hw8179x71"},{"name":"hexo","_id":"cjs3ytryo006fck8hps61099z"},{"name":"docker","_id":"cjs3yts0v006rck8hiab80g16"}]}}